<file_map>
C:/Development/PeerCircle/PeerCircleApp/lib
├── core
│   ├── api
│   │   ├── constants.dart
│   │   ├── dio_provider.dart
│   │   └── dio_provider.g.dart
│   ├── app_style
│   │   ├── color_constants.dart
│   │   ├── sizes.dart
│   │   ├── text_style_constants.dart
│   │   └── theme_manager.dart
│   ├── common_widgets
│   │   ├── check_circle_outlined_painter.dart
│   │   ├── clear_icon.dart
│   │   ├── custom_app_bar.dart
│   │   ├── custom_button.dart
│   │   ├── custom_textbutton.dart
│   │   ├── height_space.dart
│   │   ├── home_screen.dart
│   │   ├── read_only_container_textfield.dart
│   │   └── splash_screen.dart
│   ├── constants
│   │   ├── assets.dart
│   │   └── constants.dart
│   ├── debug_log
│   │   └── logger.dart
│   ├── exception
│   │   └── auth_exception.dart
│   ├── extension
│   │   ├── build_context.dart
│   │   ├── completer.dart
│   │   ├── double.dart
│   │   ├── ilist.dart
│   │   └── talker.dart
│   ├── functions
│   │   ├── date_formatters.dart
│   │   ├── handle_request.dart
│   │   └── rebuild_all.dart
│   ├── local_storage
│   │   ├── local_storage_repository.dart
│   │   └── local_storage_repository.g.dart
│   ├── mock_config
│   │   ├── config.dart
│   │   └── config.g.dart
│   └── pretty_json
│       └── pretty_json.dart
├── features
│   ├── auth
│   │   ├── controllers
│   │   │   ├── auth_controller.dart
│   │   │   ├── auth_controller.g.dart
│   │   │   ├── create_user_controller.dart
│   │   │   ├── create_user_controller.g.dart
│   │   │   ├── verify_code_controller.dart
│   │   │   └── verify_code_controller.g.dart
│   │   ├── models
│   │   │   ├── data
│   │   │   │   ├── create_user_request.dart
│   │   │   │   ├── create_user_request.freezed.dart
│   │   │   │   ├── create_user_request.g.dart
│   │   │   │   ├── create_user_response.dart
│   │   │   │   ├── create_user_response.freezed.dart
│   │   │   │   ├── create_user_response.g.dart
│   │   │   │   ├── error_response.dart
│   │   │   │   ├── error_response.freezed.dart
│   │   │   │   ├── error_response.g.dart
│   │   │   │   ├── login_request.dart
│   │   │   │   ├── login_request.freezed.dart
│   │   │   │   ├── login_request.g.dart
│   │   │   │   ├── login_response.dart
│   │   │   │   ├── login_response.freezed.dart
│   │   │   │   ├── login_response.g.dart
│   │   │   │   ├── user.dart
│   │   │   │   ├── user.freezed.dart
│   │   │   │   ├── user.g.dart
│   │   │   │   ├── verify_code_request.dart
│   │   │   │   ├── verify_code_request.freezed.dart
│   │   │   │   ├── verify_code_request.g.dart
│   │   │   │   ├── verify_code_response.dart
│   │   │   │   ├── verify_code_response.freezed.dart
│   │   │   │   └── verify_code_response.g.dart
│   │   │   ├── data_sources
│   │   │   │   ├── auth_data_source.dart
│   │   │   │   ├── auth_remote_data_source.dart
│   │   │   │   └── auth_remote_data_source.g.dart
│   │   │   └── repositories
│   │   │       ├── auth_repository.dart
│   │   │       └── auth_repository.g.dart
│   │   └── views
│   │       ├── screens
│   │       │   ├── sign_in_flow
│   │       │   │   └── sign_in_screen.dart
│   │       │   ├── sign_up_flow
│   │       │   │   ├── birthday_input_screen.dart
│   │       │   │   ├── change_username_screen.dart
│   │       │   │   ├── create_password_screen.dart
│   │       │   │   ├── name_input_screen.dart
│   │       │   │   ├── onboarding_screen.dart
│   │       │   │   ├── phone_number_input_screen.dart
│   │       │   │   ├── sign_up_success.dart
│   │       │   │   ├── signup_verification_screen.dart
│   │       │   │   └── welcome_signup_screen.dart
│   │       │   ├── get_started_or_login_welcome_screen.dart
│   │       │   └── welcome_signin_screen.dart
│   │       ├── ui_states
│   │       │   ├── create_user_state.dart
│   │       │   ├── create_user_state.freezed.dart
│   │       │   └── create_user_state.g.dart
│   │       └── widgets
│   │           ├── custom_text_field.dart
│   │           ├── name_and_username.dart
│   │           └── password_validation_indicator_row.dart
│   └── multifaceted_profile
│       ├── avatar
│       │   ├── controllers
│       │   │   ├── avatar_controller.dart
│       │   │   ├── avatar_controller.g.dart
│       │   │   ├── current_avatar.dart
│       │   │   └── current_avatar.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── avatar_request.dart
│       │   │   │   └── avatar_response.dart
│       │   │   ├── data_sources
│       │   │   │   ├── avatar_remote_data_source.dart
│       │   │   │   └── avatar_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── avatar_repository.dart
│       │   │       └── avatar_repository.g.dart
│       │   └── views
│       │       ├── screens
│       │       │   ├── avatar_upload_screen.dart
│       │       │   └── peer_snapshot_screen.dart
│       │       ├── ui_states
│       │       │   ├── avatar_state.dart
│       │       │   └── avatar_state.freezed.dart
│       │       └── widgets
│       │           └── avatar.dart
│       ├── bio
│       │   ├── controllers
│       │   │   ├── bio_controller.dart
│       │   │   └── bio_controller.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── bio_request.dart
│       │   │   │   ├── bio_request.freezed.dart
│       │   │   │   ├── bio_request.g.dart
│       │   │   │   ├── bio_response.dart
│       │   │   │   ├── bio_response.freezed.dart
│       │   │   │   └── bio_response.g.dart
│       │   │   ├── data_sources
│       │   │   │   ├── bio_remote_data_source.dart
│       │   │   │   └── bio_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── bio_repository.dart
│       │   │       └── bio_repository.g.dart
│       │   └── views
│       │       ├── screens
│       │       │   └── bio_input_screen.dart
│       │       └── ui_states
│       │           ├── bio_state.dart
│       │           ├── bio_state.freezed.dart
│       │           └── bio_state.g.dart
│       ├── drag_drop
│       │   ├── controllers
│       │   │   ├── drag_drop_data_controller.dart
│       │   │   ├── drag_drop_data_controller.g.dart
│       │   │   ├── physical_core_controller.dart
│       │   │   └── physical_core_controller.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── category_item.dart
│       │   │   │   ├── category_item.freezed.dart
│       │   │   │   ├── category_item.g.dart
│       │   │   │   ├── physical_core_request.dart
│       │   │   │   └── physical_core_response.dart
│       │   │   ├── data_sources
│       │   │   │   ├── physical_core_remote_data_source.dart
│       │   │   │   └── physical_core_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── physical_core_repository.dart
│       │   │       └── physical_core_repository.g.dart
│       │   └── views
│       │       ├── screens
│       │       │   ├── culture_drag_drop_screen.dart
│       │       │   ├── drag_drop_guide_screen.dart
│       │       │   ├── neurodiversity_drag_drop_screen.dart
│       │       │   ├── orientation_drag_drop_screen.dart
│       │       │   ├── overview_drag_drop_screen.dart
│       │       │   └── pronoun_drag_drop_screen.dart
│       │       └── widgets
│       │           ├── drag_drop_template.dart
│       │           └── draggable_item.dart
│       ├── emotion_qa
│       │   ├── controllers
│       │   │   ├── emotional_qa_controller.dart
│       │   │   └── emotional_qa_controller.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── emotional_qa_request.dart
│       │   │   │   ├── emotional_qa_request.freezed.dart
│       │   │   │   ├── emotional_qa_request.g.dart
│       │   │   │   └── emotional_qa_response.dart
│       │   │   ├── data_sources
│       │   │   │   ├── emotional_qa_remote_data_source.dart
│       │   │   │   └── emotional_qa_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── emotional_qa_repository.dart
│       │   │       └── emotional_qa_repository.g.dart
│       │   └── views
│       │       └── screens
│       │           └── emotion_qa_screen.dart
│       ├── fav_colour
│       │   ├── controllers
│       │   │   ├── cur_colour.dart
│       │   │   ├── cur_colour.g.dart
│       │   │   ├── fav_colour_controller.dart
│       │   │   └── fav_colour_controller.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── fav_colour_request.dart
│       │   │   │   └── fav_colour_response.dart
│       │   │   ├── data_sources
│       │   │   │   ├── fav_colour_remote_data_source.dart
│       │   │   │   └── fav_colour_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── fav_colour_repository.dart
│       │   │       └── fav_colour_repository.g.dart
│       │   └── views
│       │       ├── screens
│       │       │   └── fav_colour_screen.dart
│       │       ├── ui_states
│       │       │   ├── fav_colour_state.dart
│       │       │   └── fav_colour_state.freezed.dart
│       │       └── widgets
│       │           └── color_container_with_avatar.dart
│       ├── hair
│       │   └── views
│       │       └── screens
│       │           └── hair_profile_screen.dart
│       ├── make_up
│       │   └── views
│       │       ├── screens
│       │       │   └── make_up_profile_screen.dart
│       │       └── widgets
│       │           ├── sheet_button.dart
│       │           ├── undertone_clothes_tip_sheet.dart
│       │           ├── undertone_jewelry_tip_sheet.dart
│       │           └── undertone_tip_sheet.dart
│       ├── profile_completion
│       │   ├── controllers
│       │   │   ├── core_insights_feedback_controller.dart
│       │   │   └── core_insights_feedback_controller.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── core_insights_feedback_request.dart
│       │   │   │   ├── core_insights_feedback_request.freezed.dart
│       │   │   │   ├── core_insights_feedback_request.g.dart
│       │   │   │   ├── core_insights_feedback_response.dart
│       │   │   │   ├── core_insights_feedback_response.freezed.dart
│       │   │   │   └── core_insights_feedback_response.g.dart
│       │   │   ├── data_sources
│       │   │   │   ├── core_insights_feedback_remote_data_source.dart
│       │   │   │   └── core_insights_feedback_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── core_insights_feedback_repository.dart
│       │   │       └── core_insights_feedback_repository.g.dart
│       │   └── views
│       │       ├── screens
│       │       │   └── profile_completion_screen.dart
│       │       └── widgets
│       │           └── profile_overview.dart
│       ├── role_based_identity
│       │   ├── controllers
│       │   │   ├── role_based_qa_controller.dart
│       │   │   └── role_based_qa_controller.g.dart
│       │   ├── models
│       │   │   ├── data
│       │   │   │   ├── role_based_qa_request.dart
│       │   │   │   ├── role_based_qa_request.freezed.dart
│       │   │   │   ├── role_based_qa_request.g.dart
│       │   │   │   ├── role_based_qa_response.dart
│       │   │   │   ├── role_based_qa_response.freezed.dart
│       │   │   │   └── role_based_qa_response.g.dart
│       │   │   ├── data_sources
│       │   │   │   ├── role_based_qa_remote_data_source.dart
│       │   │   │   └── role_based_qa_remote_data_source.g.dart
│       │   │   └── repositories
│       │   │       ├── role_based_qa_repository.dart
│       │   │       └── role_based_qa_repository.g.dart
│       │   └── views
│       │       ├── screens
│       │       │   └── personality_card_swipe_screen.dart
│       │       └── ui_states
│       │           ├── question_content.dart
│       │           ├── question_content.freezed.dart
│       │           └── question_content.g.dart
│       ├── skin
│       │   ├── models
│       │   │   └── data
│       │   │       └── skin_hair_undertone_enum.dart
│       │   └── views
│       │       └── screens
│       │           └── skin_profile_screen.dart
│       └── social_vibe
│           └── views
│               └── screens
│                   └── social_vibe_screen.dart
├── gen
│   ├── assets.gen.dart
│   └── fonts.gen.dart
├── router
│   ├── navigation_history
│   │   ├── current_route_notifier.dart
│   │   ├── current_route_notifier.g.dart
│   │   ├── navigation_history_notifier.dart
│   │   ├── navigation_history_notifier.g.dart
│   │   ├── navigation_state.dart
│   │   └── navigation_state.freezed.dart
│   ├── router_notifier.dart
│   ├── router_notifier.g.dart
│   ├── router.dart
│   └── router.g.dart
├── bootstrap.dart
├── flavors.dart
├── main_dev.dart
├── main_prod.dart
├── main_staging.dart
└── main.dart

</file_map>

<file_contents>
File: C:/Development/PeerCircle/PeerCircleApp/lib/gen/assets.gen.dart
```dart
/// GENERATED CODE - DO NOT MODIFY BY HAND
/// *****************************************************
///  FlutterGen
/// *****************************************************

// coverage:ignore-file
// ignore_for_file: type=lint
// ignore_for_file: directives_ordering,unnecessary_import,implicit_dynamic_list_literal,deprecated_member_use

import 'package:flutter/widgets.dart';

class $AssetsFontsGen {
  const $AssetsFontsGen();

  /// File path: assets/fonts/Roderick-DOMox.otf
  String get roderickDOMox => 'assets/fonts/Roderick-DOMox.otf';

  /// File path: assets/fonts/SFPRODISPLAYBOLD.OTF
  String get sfprodisplaybold => 'assets/fonts/SFPRODISPLAYBOLD.OTF';

  /// File path: assets/fonts/SFPRODISPLAYMEDIUM.OTF
  String get sfprodisplaymedium => 'assets/fonts/SFPRODISPLAYMEDIUM.OTF';

  /// File path: assets/fonts/SFPRODISPLAYREGULAR.OTF
  String get sfprodisplayregular => 'assets/fonts/SFPRODISPLAYREGULAR.OTF';

  /// List of all assets
  List<String> get values => [roderickDOMox, sfprodisplaybold, sfprodisplaymedium, sfprodisplayregular];
}

class $AssetsIconsGen {
  const $AssetsIconsGen();

  /// File path: assets/icons/chat_icon.png
  AssetGenImage get chatIcon => const AssetGenImage('assets/icons/chat_icon.png');

  /// File path: assets/icons/check_icon_rounded.png
  AssetGenImage get checkIconRounded => const AssetGenImage('assets/icons/check_icon_rounded.png');

  /// File path: assets/icons/circular_upload_photo_icon.png
  AssetGenImage get circularUploadPhotoIcon => const AssetGenImage('assets/icons/circular_upload_photo_icon.png');

  /// File path: assets/icons/clear_icon.png
  AssetGenImage get clearIcon => const AssetGenImage('assets/icons/clear_icon.png');

  /// File path: assets/icons/clear_icon_white_background.png
  AssetGenImage get clearIconWhiteBackground => const AssetGenImage('assets/icons/clear_icon_white_background.png');

  /// File path: assets/icons/face_id_icon.png
  AssetGenImage get faceIdIcon => const AssetGenImage('assets/icons/face_id_icon.png');

  /// File path: assets/icons/feed_chat_camera_icon.png
  AssetGenImage get feedChatCameraIcon => const AssetGenImage('assets/icons/feed_chat_camera_icon.png');

  /// File path: assets/icons/grid_view_icon.png
  AssetGenImage get gridViewIcon => const AssetGenImage('assets/icons/grid_view_icon.png');

  /// File path: assets/icons/hand_swipe_icon.png
  AssetGenImage get handSwipeIcon => const AssetGenImage('assets/icons/hand_swipe_icon.png');

  /// File path: assets/icons/heart.png
  AssetGenImage get heart => const AssetGenImage('assets/icons/heart.png');

  /// File path: assets/icons/home.png
  AssetGenImage get home => const AssetGenImage('assets/icons/home.png');

  /// File path: assets/icons/home_feed_message_icon_small.png
  AssetGenImage get homeFeedMessageIconSmall => const AssetGenImage('assets/icons/home_feed_message_icon_small.png');

  /// File path: assets/icons/home_feed_pin_icon.png
  AssetGenImage get homeFeedPinIcon => const AssetGenImage('assets/icons/home_feed_pin_icon.png');

  /// File path: assets/icons/like_icon.png
  AssetGenImage get likeIcon => const AssetGenImage('assets/icons/like_icon.png');

  /// File path: assets/icons/people_icon.png
  AssetGenImage get peopleIcon => const AssetGenImage('assets/icons/people_icon.png');

  /// File path: assets/icons/person_add_icon.png
  AssetGenImage get personAddIcon => const AssetGenImage('assets/icons/person_add_icon.png');

  /// File path: assets/icons/photo-camera_icon.png
  AssetGenImage get photoCameraIcon => const AssetGenImage('assets/icons/photo-camera_icon.png');

  /// File path: assets/icons/search.png
  AssetGenImage get search => const AssetGenImage('assets/icons/search.png');

  /// File path: assets/icons/select_new_era_icon.png
  AssetGenImage get selectNewEraIcon => const AssetGenImage('assets/icons/select_new_era_icon.png');

  /// File path: assets/icons/selected_heart_icon.png
  AssetGenImage get selectedHeartIcon => const AssetGenImage('assets/icons/selected_heart_icon.png');

  /// File path: assets/icons/selected_home_icon.png
  AssetGenImage get selectedHomeIcon => const AssetGenImage('assets/icons/selected_home_icon.png');

  /// File path: assets/icons/selected_search_icon.png
  AssetGenImage get selectedSearchIcon => const AssetGenImage('assets/icons/selected_search_icon.png');

  /// File path: assets/icons/share_icon.png
  AssetGenImage get shareIcon => const AssetGenImage('assets/icons/share_icon.png');

  /// File path: assets/icons/three_dots_icon_for_home_feed.png
  AssetGenImage get threeDotsIconForHomeFeed => const AssetGenImage('assets/icons/three_dots_icon_for_home_feed.png');

  /// File path: assets/icons/traits_updated_icon.png
  AssetGenImage get traitsUpdatedIcon => const AssetGenImage('assets/icons/traits_updated_icon.png');

  /// File path: assets/icons/visibility_off_icon.png
  AssetGenImage get visibilityOffIcon => const AssetGenImage('assets/icons/visibility_off_icon.png');

  /// File path: assets/icons/visible_icon.png
  AssetGenImage get visibleIcon => const AssetGenImage('assets/icons/visible_icon.png');

  /// File path: assets/icons/waving_hand_icon.png
  AssetGenImage get wavingHandIcon => const AssetGenImage('assets/icons/waving_hand_icon.png');

  /// List of all assets
  List<AssetGenImage> get values => [
        chatIcon,
        checkIconRounded,
        circularUploadPhotoIcon,
        clearIcon,
        clearIconWhiteBackground,
        faceIdIcon,
        feedChatCameraIcon,
        gridViewIcon,
        handSwipeIcon,
        heart,
        home,
        homeFeedMessageIconSmall,
        homeFeedPinIcon,
        likeIcon,
        peopleIcon,
        personAddIcon,
        photoCameraIcon,
        search,
        selectNewEraIcon,
        selectedHeartIcon,
        selectedHomeIcon,
        selectedSearchIcon,
        shareIcon,
        threeDotsIconForHomeFeed,
        traitsUpdatedIcon,
        visibilityOffIcon,
        visibleIcon,
        wavingHandIcon
      ];
}

class $AssetsImagesGen {
  const $AssetsImagesGen();

  /// File path: assets/images/360snapshot.png
  AssetGenImage get a360snapshot => const AssetGenImage('assets/images/360snapshot.png');

  /// File path: assets/images/base_avatar.png
  AssetGenImage get baseAvatar => const AssetGenImage('assets/images/base_avatar.png');

  /// File path: assets/images/be_there_when_it_matters_dialog_image.png
  AssetGenImage get beThereWhenItMattersDialogImage => const AssetGenImage('assets/images/be_there_when_it_matters_dialog_image.png');

  /// File path: assets/images/beautyWellnessCard1_4.png
  AssetGenImage get beautyWellnessCard14 => const AssetGenImage('assets/images/beautyWellnessCard1_4.png');

  /// File path: assets/images/beautyWellnessCard1_5.png
  AssetGenImage get beautyWellnessCard15 => const AssetGenImage('assets/images/beautyWellnessCard1_5.png');

  /// File path: assets/images/beautyWellnessCard2_1.png
  AssetGenImage get beautyWellnessCard21 => const AssetGenImage('assets/images/beautyWellnessCard2_1.png');

  /// File path: assets/images/beautyWellnessCard2_2.png
  AssetGenImage get beautyWellnessCard22 => const AssetGenImage('assets/images/beautyWellnessCard2_2.png');

  /// File path: assets/images/beautyWellnessCard2_3.png
  AssetGenImage get beautyWellnessCard23 => const AssetGenImage('assets/images/beautyWellnessCard2_3.png');

  /// File path: assets/images/beauty_wellness_card_1.1.png
  AssetGenImage get beautyWellnessCard11 => const AssetGenImage('assets/images/beauty_wellness_card_1.1.png');

  /// File path: assets/images/beauty_wellness_card_1.2.png
  AssetGenImage get beautyWellnessCard12 => const AssetGenImage('assets/images/beauty_wellness_card_1.2.png');

  /// File path: assets/images/beauty_wellness_card_1.3.png
  AssetGenImage get beautyWellnessCard13 => const AssetGenImage('assets/images/beauty_wellness_card_1.3.png');

  /// File path: assets/images/beauty_wellness_card_1.png
  AssetGenImage get beautyWellnessCard1 => const AssetGenImage('assets/images/beauty_wellness_card_1.png');

  /// File path: assets/images/beauty_wellness_card_2.png
  AssetGenImage get beautyWellnessCard2 => const AssetGenImage('assets/images/beauty_wellness_card_2.png');

  /// File path: assets/images/beauty_wellness_card_3.png
  AssetGenImage get beautyWellnessCard3 => const AssetGenImage('assets/images/beauty_wellness_card_3.png');

  /// File path: assets/images/beauty_wellness_card_4.png
  AssetGenImage get beautyWellnessCard4 => const AssetGenImage('assets/images/beauty_wellness_card_4.png');

  /// File path: assets/images/beauty_wellness_card_5.png
  AssetGenImage get beautyWellnessCard5 => const AssetGenImage('assets/images/beauty_wellness_card_5.png');

  /// File path: assets/images/discover_image.png
  AssetGenImage get discoverImage => const AssetGenImage('assets/images/discover_image.png');

  /// File path: assets/images/discover_image_2.png
  AssetGenImage get discoverImage2 => const AssetGenImage('assets/images/discover_image_2.png');

  /// File path: assets/images/example_profile_image.png
  AssetGenImage get exampleProfileImage => const AssetGenImage('assets/images/example_profile_image.png');

  /// File path: assets/images/hand_emojies.png
  AssetGenImage get handEmojies => const AssetGenImage('assets/images/hand_emojies.png');

  /// File path: assets/images/literally_me_container_image.png
  AssetGenImage get literallyMeContainerImage => const AssetGenImage('assets/images/literally_me_container_image.png');

  /// File path: assets/images/nope_container_image.png
  AssetGenImage get nopeContainerImage => const AssetGenImage('assets/images/nope_container_image.png');

  /// File path: assets/images/onboarding_1.png
  AssetGenImage get onboarding1 => const AssetGenImage('assets/images/onboarding_1.png');

  /// File path: assets/images/onboarding_2.png
  AssetGenImage get onboarding2 => const AssetGenImage('assets/images/onboarding_2.png');

  /// File path: assets/images/onboarding_3.png
  AssetGenImage get onboarding3 => const AssetGenImage('assets/images/onboarding_3.png');

  /// File path: assets/images/peer_circle_expanded_image.png
  AssetGenImage get peerCircleExpandedImage => const AssetGenImage('assets/images/peer_circle_expanded_image.png');

  /// File path: assets/images/person_icon_image.png
  AssetGenImage get personIconImage => const AssetGenImage('assets/images/person_icon_image.png');

  /// File path: assets/images/profile_card_image1.png
  AssetGenImage get profileCardImage1 => const AssetGenImage('assets/images/profile_card_image1.png');

  /// File path: assets/images/profile_card_image2.png
  AssetGenImage get profileCardImage2 => const AssetGenImage('assets/images/profile_card_image2.png');

  /// File path: assets/images/profile_card_image3.png
  AssetGenImage get profileCardImage3 => const AssetGenImage('assets/images/profile_card_image3.png');

  /// File path: assets/images/real_you_card1.png
  AssetGenImage get realYouCard1 => const AssetGenImage('assets/images/real_you_card1.png');

  /// File path: assets/images/real_you_card2.png
  AssetGenImage get realYouCard2 => const AssetGenImage('assets/images/real_you_card2.png');

  /// File path: assets/images/real_you_card3.png
  AssetGenImage get realYouCard3 => const AssetGenImage('assets/images/real_you_card3.png');

  /// File path: assets/images/select_chat_image_1.png
  AssetGenImage get selectChatImage1 => const AssetGenImage('assets/images/select_chat_image_1.png');

  /// File path: assets/images/select_chat_image_2.png
  AssetGenImage get selectChatImage2 => const AssetGenImage('assets/images/select_chat_image_2.png');

  /// File path: assets/images/select_chat_image_3.png
  AssetGenImage get selectChatImage3 => const AssetGenImage('assets/images/select_chat_image_3.png');

  /// File path: assets/images/select_chat_image_4.png
  AssetGenImage get selectChatImage4 => const AssetGenImage('assets/images/select_chat_image_4.png');

  /// File path: assets/images/select_chat_image_5.png
  AssetGenImage get selectChatImage5 => const AssetGenImage('assets/images/select_chat_image_5.png');

  /// File path: assets/images/select_chat_image_6.png
  AssetGenImage get selectChatImage6 => const AssetGenImage('assets/images/select_chat_image_6.png');

  /// File path: assets/images/select_chat_image_7.png
  AssetGenImage get selectChatImage7 => const AssetGenImage('assets/images/select_chat_image_7.png');

  /// File path: assets/images/select_chat_image_8.png
  AssetGenImage get selectChatImage8 => const AssetGenImage('assets/images/select_chat_image_8.png');

  /// File path: assets/images/select_chat_image_9.png
  AssetGenImage get selectChatImage9 => const AssetGenImage('assets/images/select_chat_image_9.png');

  /// File path: assets/images/select_image_1.png
  AssetGenImage get selectImage1 => const AssetGenImage('assets/images/select_image_1.png');

  /// File path: assets/images/select_image_2.png
  AssetGenImage get selectImage2 => const AssetGenImage('assets/images/select_image_2.png');

  /// File path: assets/images/select_image_3.png
  AssetGenImage get selectImage3 => const AssetGenImage('assets/images/select_image_3.png');

  /// File path: assets/images/test_avatar.png
  AssetGenImage get testAvatar => const AssetGenImage('assets/images/test_avatar.png');

  /// File path: assets/images/your_make_up_screen_image_1.png
  AssetGenImage get yourMakeUpScreenImage1 => const AssetGenImage('assets/images/your_make_up_screen_image_1.png');

  /// File path: assets/images/your_make_up_screen_image_2.png
  AssetGenImage get yourMakeUpScreenImage2 => const AssetGenImage('assets/images/your_make_up_screen_image_2.png');

  /// File path: assets/images/your_make_up_screen_image_3.png
  AssetGenImage get yourMakeUpScreenImage3 => const AssetGenImage('assets/images/your_make_up_screen_image_3.png');

  /// List of all assets
  List<AssetGenImage> get values => [
        a360snapshot,
        baseAvatar,
        beThereWhenItMattersDialogImage,
        beautyWellnessCard14,
        beautyWellnessCard15,
        beautyWellnessCard21,
        beautyWellnessCard22,
        beautyWellnessCard23,
        beautyWellnessCard11,
        beautyWellnessCard12,
        beautyWellnessCard13,
        beautyWellnessCard1,
        beautyWellnessCard2,
        beautyWellnessCard3,
        beautyWellnessCard4,
        beautyWellnessCard5,
        discoverImage,
        discoverImage2,
        exampleProfileImage,
        handEmojies,
        literallyMeContainerImage,
        nopeContainerImage,
        onboarding1,
        onboarding2,
        onboarding3,
        peerCircleExpandedImage,
        personIconImage,
        profileCardImage1,
        profileCardImage2,
        profileCardImage3,
        realYouCard1,
        realYouCard2,
        realYouCard3,
        selectChatImage1,
        selectChatImage2,
        selectChatImage3,
        selectChatImage4,
        selectChatImage5,
        selectChatImage6,
        selectChatImage7,
        selectChatImage8,
        selectChatImage9,
        selectImage1,
        selectImage2,
        selectImage3,
        testAvatar,
        yourMakeUpScreenImage1,
        yourMakeUpScreenImage2,
        yourMakeUpScreenImage3
      ];
}

class $AssetsLogoGen {
  const $AssetsLogoGen();

  /// File path: assets/logo/full_logo.png
  AssetGenImage get fullLogo => const AssetGenImage('assets/logo/full_logo.png');

  /// File path: assets/logo/logo.png
  AssetGenImage get logo => const AssetGenImage('assets/logo/logo.png');

  /// File path: assets/logo/logo_dev.png
  AssetGenImage get logoDev => const AssetGenImage('assets/logo/logo_dev.png');

  /// File path: assets/logo/logo_staging.png
  AssetGenImage get logoStaging => const AssetGenImage('assets/logo/logo_staging.png');

  /// List of all assets
  List<AssetGenImage> get values => [fullLogo, logo, logoDev, logoStaging];
}

class $AssetsPersonalityCardsGen {
  const $AssetsPersonalityCardsGen();

  /// File path: assets/personality_cards/card_01.png
  AssetGenImage get card01 => const AssetGenImage('assets/personality_cards/card_01.png');

  /// File path: assets/personality_cards/card_02.png
  AssetGenImage get card02 => const AssetGenImage('assets/personality_cards/card_02.png');

  /// File path: assets/personality_cards/card_03.png
  AssetGenImage get card03 => const AssetGenImage('assets/personality_cards/card_03.png');

  /// File path: assets/personality_cards/card_04.png
  AssetGenImage get card04 => const AssetGenImage('assets/personality_cards/card_04.png');

  /// File path: assets/personality_cards/card_05.png
  AssetGenImage get card05 => const AssetGenImage('assets/personality_cards/card_05.png');

  /// File path: assets/personality_cards/card_06.png
  AssetGenImage get card06 => const AssetGenImage('assets/personality_cards/card_06.png');

  /// File path: assets/personality_cards/card_07.png
  AssetGenImage get card07 => const AssetGenImage('assets/personality_cards/card_07.png');

  /// File path: assets/personality_cards/card_08.png
  AssetGenImage get card08 => const AssetGenImage('assets/personality_cards/card_08.png');

  /// File path: assets/personality_cards/card_09.png
  AssetGenImage get card09 => const AssetGenImage('assets/personality_cards/card_09.png');

  /// File path: assets/personality_cards/card_10.png
  AssetGenImage get card10 => const AssetGenImage('assets/personality_cards/card_10.png');

  /// File path: assets/personality_cards/card_11.png
  AssetGenImage get card11 => const AssetGenImage('assets/personality_cards/card_11.png');

  /// File path: assets/personality_cards/card_12.png
  AssetGenImage get card12 => const AssetGenImage('assets/personality_cards/card_12.png');

  /// File path: assets/personality_cards/card_13.png
  AssetGenImage get card13 => const AssetGenImage('assets/personality_cards/card_13.png');

  /// File path: assets/personality_cards/card_14.png
  AssetGenImage get card14 => const AssetGenImage('assets/personality_cards/card_14.png');

  /// File path: assets/personality_cards/card_15.png
  AssetGenImage get card15 => const AssetGenImage('assets/personality_cards/card_15.png');

  /// List of all assets
  List<AssetGenImage> get values => [card01, card02, card03, card04, card05, card06, card07, card08, card09, card10, card11, card12, card13, card14, card15];
}

class Assets {
  const Assets._();

  static const $AssetsFontsGen fonts = $AssetsFontsGen();
  static const $AssetsIconsGen icons = $AssetsIconsGen();
  static const $AssetsImagesGen images = $AssetsImagesGen();
  static const $AssetsLogoGen logo = $AssetsLogoGen();
  static const $AssetsPersonalityCardsGen personalityCards = $AssetsPersonalityCardsGen();
}

class AssetGenImage {
  const AssetGenImage(
    this._assetName, {
    this.size,
    this.flavors = const {},
  });

  final String _assetName;

  final Size? size;
  final Set<String> flavors;

  Image image({
    Key? key,
    AssetBundle? bundle,
    ImageFrameBuilder? frameBuilder,
    ImageErrorWidgetBuilder? errorBuilder,
    String? semanticLabel,
    bool excludeFromSemantics = false,
    double? scale,
    double? width,
    double? height,
    Color? color,
    Animation<double>? opacity,
    BlendMode? colorBlendMode,
    BoxFit? fit,
    AlignmentGeometry alignment = Alignment.center,
    ImageRepeat repeat = ImageRepeat.noRepeat,
    Rect? centerSlice,
    bool matchTextDirection = false,
    bool gaplessPlayback = true,
    bool isAntiAlias = false,
    String? package,
    FilterQuality filterQuality = FilterQuality.medium,
    int? cacheWidth,
    int? cacheHeight,
  }) {
    return Image.asset(
      _assetName,
      key: key,
      bundle: bundle,
      frameBuilder: frameBuilder,
      errorBuilder: errorBuilder,
      semanticLabel: semanticLabel,
      excludeFromSemantics: excludeFromSemantics,
      scale: scale,
      width: width,
      height: height,
      color: color,
      opacity: opacity,
      colorBlendMode: colorBlendMode,
      fit: fit,
      alignment: alignment,
      repeat: repeat,
      centerSlice: centerSlice,
      matchTextDirection: matchTextDirection,
      gaplessPlayback: gaplessPlayback,
      isAntiAlias: isAntiAlias,
      package: package,
      filterQuality: filterQuality,
      cacheWidth: cacheWidth,
      cacheHeight: cacheHeight,
    );
  }

  ImageProvider provider({
    AssetBundle? bundle,
    String? package,
  }) {
    return AssetImage(
      _assetName,
      bundle: bundle,
      package: package,
    );
  }

  String get path => _assetName;

  String get keyName => _assetName;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'role_based_qa_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

RoleBasedQARequest _$RoleBasedQARequestFromJson(Map<String, dynamic> json) {
  return _RoleBasedQARequest.fromJson(json);
}

/// @nodoc
mixin _$RoleBasedQARequest {
  @JsonKey(name: 'user_id')
  int get userId => throw _privateConstructorUsedError;
  List<RoleBasedQAEntry> get qa => throw _privateConstructorUsedError;

  /// Serializes this RoleBasedQARequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of RoleBasedQARequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $RoleBasedQARequestCopyWith<RoleBasedQARequest> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $RoleBasedQARequestCopyWith<$Res> {
  factory $RoleBasedQARequestCopyWith(
          RoleBasedQARequest value, $Res Function(RoleBasedQARequest) then) =
      _$RoleBasedQARequestCopyWithImpl<$Res, RoleBasedQARequest>;
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, List<RoleBasedQAEntry> qa});
}

/// @nodoc
class _$RoleBasedQARequestCopyWithImpl<$Res, $Val extends RoleBasedQARequest>
    implements $RoleBasedQARequestCopyWith<$Res> {
  _$RoleBasedQARequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of RoleBasedQARequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? qa = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      qa: null == qa
          ? _value.qa
          : qa // ignore: cast_nullable_to_non_nullable
              as List<RoleBasedQAEntry>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$RoleBasedQARequestImplCopyWith<$Res>
    implements $RoleBasedQARequestCopyWith<$Res> {
  factory _$$RoleBasedQARequestImplCopyWith(_$RoleBasedQARequestImpl value,
          $Res Function(_$RoleBasedQARequestImpl) then) =
      __$$RoleBasedQARequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, List<RoleBasedQAEntry> qa});
}

/// @nodoc
class __$$RoleBasedQARequestImplCopyWithImpl<$Res>
    extends _$RoleBasedQARequestCopyWithImpl<$Res, _$RoleBasedQARequestImpl>
    implements _$$RoleBasedQARequestImplCopyWith<$Res> {
  __$$RoleBasedQARequestImplCopyWithImpl(_$RoleBasedQARequestImpl _value,
      $Res Function(_$RoleBasedQARequestImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoleBasedQARequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? qa = null,
  }) {
    return _then(_$RoleBasedQARequestImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      qa: null == qa
          ? _value._qa
          : qa // ignore: cast_nullable_to_non_nullable
              as List<RoleBasedQAEntry>,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$RoleBasedQARequestImpl implements _RoleBasedQARequest {
  const _$RoleBasedQARequestImpl(
      {@JsonKey(name: 'user_id') required this.userId,
      required final List<RoleBasedQAEntry> qa})
      : _qa = qa;

  factory _$RoleBasedQARequestImpl.fromJson(Map<String, dynamic> json) =>
      _$$RoleBasedQARequestImplFromJson(json);

  @override
  @JsonKey(name: 'user_id')
  final int userId;
  final List<RoleBasedQAEntry> _qa;
  @override
  List<RoleBasedQAEntry> get qa {
    if (_qa is EqualUnmodifiableListView) return _qa;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_qa);
  }

  @override
  String toString() {
    return 'RoleBasedQARequest(userId: $userId, qa: $qa)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RoleBasedQARequestImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            const DeepCollectionEquality().equals(other._qa, _qa));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, userId, const DeepCollectionEquality().hash(_qa));

  /// Create a copy of RoleBasedQARequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RoleBasedQARequestImplCopyWith<_$RoleBasedQARequestImpl> get copyWith =>
      __$$RoleBasedQARequestImplCopyWithImpl<_$RoleBasedQARequestImpl>(
          this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$RoleBasedQARequestImplToJson(
      this,
    );
  }
}

abstract class _RoleBasedQARequest implements RoleBasedQARequest {
  const factory _RoleBasedQARequest(
      {@JsonKey(name: 'user_id') required final int userId,
      required final List<RoleBasedQAEntry> qa}) = _$RoleBasedQARequestImpl;

  factory _RoleBasedQARequest.fromJson(Map<String, dynamic> json) =
      _$RoleBasedQARequestImpl.fromJson;

  @override
  @JsonKey(name: 'user_id')
  int get userId;
  @override
  List<RoleBasedQAEntry> get qa;

  /// Create a copy of RoleBasedQARequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RoleBasedQARequestImplCopyWith<_$RoleBasedQARequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

RoleBasedQAEntry _$RoleBasedQAEntryFromJson(Map<String, dynamic> json) {
  return _RoleBasedQAEntry.fromJson(json);
}

/// @nodoc
mixin _$RoleBasedQAEntry {
  int get question => throw _privateConstructorUsedError;
  int get answer1 => throw _privateConstructorUsedError;
  int get answer2 => throw _privateConstructorUsedError;
  int get answer3 => throw _privateConstructorUsedError;
  int get answer4 => throw _privateConstructorUsedError;
  int get answer5 => throw _privateConstructorUsedError;

  /// Serializes this RoleBasedQAEntry to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of RoleBasedQAEntry
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $RoleBasedQAEntryCopyWith<RoleBasedQAEntry> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $RoleBasedQAEntryCopyWith<$Res> {
  factory $RoleBasedQAEntryCopyWith(
          RoleBasedQAEntry value, $Res Function(RoleBasedQAEntry) then) =
      _$RoleBasedQAEntryCopyWithImpl<$Res, RoleBasedQAEntry>;
  @useResult
  $Res call(
      {int question,
      int answer1,
      int answer2,
      int answer3,
      int answer4,
      int answer5});
}

/// @nodoc
class _$RoleBasedQAEntryCopyWithImpl<$Res, $Val extends RoleBasedQAEntry>
    implements $RoleBasedQAEntryCopyWith<$Res> {
  _$RoleBasedQAEntryCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of RoleBasedQAEntry
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? question = null,
    Object? answer1 = null,
    Object? answer2 = null,
    Object? answer3 = null,
    Object? answer4 = null,
    Object? answer5 = null,
  }) {
    return _then(_value.copyWith(
      question: null == question
          ? _value.question
          : question // ignore: cast_nullable_to_non_nullable
              as int,
      answer1: null == answer1
          ? _value.answer1
          : answer1 // ignore: cast_nullable_to_non_nullable
              as int,
      answer2: null == answer2
          ? _value.answer2
          : answer2 // ignore: cast_nullable_to_non_nullable
              as int,
      answer3: null == answer3
          ? _value.answer3
          : answer3 // ignore: cast_nullable_to_non_nullable
              as int,
      answer4: null == answer4
          ? _value.answer4
          : answer4 // ignore: cast_nullable_to_non_nullable
              as int,
      answer5: null == answer5
          ? _value.answer5
          : answer5 // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$RoleBasedQAEntryImplCopyWith<$Res>
    implements $RoleBasedQAEntryCopyWith<$Res> {
  factory _$$RoleBasedQAEntryImplCopyWith(_$RoleBasedQAEntryImpl value,
          $Res Function(_$RoleBasedQAEntryImpl) then) =
      __$$RoleBasedQAEntryImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {int question,
      int answer1,
      int answer2,
      int answer3,
      int answer4,
      int answer5});
}

/// @nodoc
class __$$RoleBasedQAEntryImplCopyWithImpl<$Res>
    extends _$RoleBasedQAEntryCopyWithImpl<$Res, _$RoleBasedQAEntryImpl>
    implements _$$RoleBasedQAEntryImplCopyWith<$Res> {
  __$$RoleBasedQAEntryImplCopyWithImpl(_$RoleBasedQAEntryImpl _value,
      $Res Function(_$RoleBasedQAEntryImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoleBasedQAEntry
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? question = null,
    Object? answer1 = null,
    Object? answer2 = null,
    Object? answer3 = null,
    Object? answer4 = null,
    Object? answer5 = null,
  }) {
    return _then(_$RoleBasedQAEntryImpl(
      question: null == question
          ? _value.question
          : question // ignore: cast_nullable_to_non_nullable
              as int,
      answer1: null == answer1
          ? _value.answer1
          : answer1 // ignore: cast_nullable_to_non_nullable
              as int,
      answer2: null == answer2
          ? _value.answer2
          : answer2 // ignore: cast_nullable_to_non_nullable
              as int,
      answer3: null == answer3
          ? _value.answer3
          : answer3 // ignore: cast_nullable_to_non_nullable
              as int,
      answer4: null == answer4
          ? _value.answer4
          : answer4 // ignore: cast_nullable_to_non_nullable
              as int,
      answer5: null == answer5
          ? _value.answer5
          : answer5 // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$RoleBasedQAEntryImpl implements _RoleBasedQAEntry {
  const _$RoleBasedQAEntryImpl(
      {required this.question,
      required this.answer1,
      required this.answer2,
      required this.answer3,
      required this.answer4,
      required this.answer5});

  factory _$RoleBasedQAEntryImpl.fromJson(Map<String, dynamic> json) =>
      _$$RoleBasedQAEntryImplFromJson(json);

  @override
  final int question;
  @override
  final int answer1;
  @override
  final int answer2;
  @override
  final int answer3;
  @override
  final int answer4;
  @override
  final int answer5;

  @override
  String toString() {
    return 'RoleBasedQAEntry(question: $question, answer1: $answer1, answer2: $answer2, answer3: $answer3, answer4: $answer4, answer5: $answer5)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RoleBasedQAEntryImpl &&
            (identical(other.question, question) ||
                other.question == question) &&
            (identical(other.answer1, answer1) || other.answer1 == answer1) &&
            (identical(other.answer2, answer2) || other.answer2 == answer2) &&
            (identical(other.answer3, answer3) || other.answer3 == answer3) &&
            (identical(other.answer4, answer4) || other.answer4 == answer4) &&
            (identical(other.answer5, answer5) || other.answer5 == answer5));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(
      runtimeType, question, answer1, answer2, answer3, answer4, answer5);

  /// Create a copy of RoleBasedQAEntry
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RoleBasedQAEntryImplCopyWith<_$RoleBasedQAEntryImpl> get copyWith =>
      __$$RoleBasedQAEntryImplCopyWithImpl<_$RoleBasedQAEntryImpl>(
          this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$RoleBasedQAEntryImplToJson(
      this,
    );
  }
}

abstract class _RoleBasedQAEntry implements RoleBasedQAEntry {
  const factory _RoleBasedQAEntry(
      {required final int question,
      required final int answer1,
      required final int answer2,
      required final int answer3,
      required final int answer4,
      required final int answer5}) = _$RoleBasedQAEntryImpl;

  factory _RoleBasedQAEntry.fromJson(Map<String, dynamic> json) =
      _$RoleBasedQAEntryImpl.fromJson;

  @override
  int get question;
  @override
  int get answer1;
  @override
  int get answer2;
  @override
  int get answer3;
  @override
  int get answer4;
  @override
  int get answer5;

  /// Create a copy of RoleBasedQAEntry
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RoleBasedQAEntryImplCopyWith<_$RoleBasedQAEntryImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'role_based_qa_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

RoleBasedQAResponse _$RoleBasedQAResponseFromJson(Map<String, dynamic> json) {
  return _RoleBasedQAResponse.fromJson(json);
}

/// @nodoc
mixin _$RoleBasedQAResponse {
  int get status => throw _privateConstructorUsedError;
  String get archetype => throw _privateConstructorUsedError;
  IList<Insight> get insights => throw _privateConstructorUsedError;

  /// Serializes this RoleBasedQAResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of RoleBasedQAResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $RoleBasedQAResponseCopyWith<RoleBasedQAResponse> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $RoleBasedQAResponseCopyWith<$Res> {
  factory $RoleBasedQAResponseCopyWith(
          RoleBasedQAResponse value, $Res Function(RoleBasedQAResponse) then) =
      _$RoleBasedQAResponseCopyWithImpl<$Res, RoleBasedQAResponse>;
  @useResult
  $Res call({int status, String archetype, IList<Insight> insights});
}

/// @nodoc
class _$RoleBasedQAResponseCopyWithImpl<$Res, $Val extends RoleBasedQAResponse>
    implements $RoleBasedQAResponseCopyWith<$Res> {
  _$RoleBasedQAResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of RoleBasedQAResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
    Object? archetype = null,
    Object? insights = null,
  }) {
    return _then(_value.copyWith(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
      archetype: null == archetype
          ? _value.archetype
          : archetype // ignore: cast_nullable_to_non_nullable
              as String,
      insights: null == insights
          ? _value.insights
          : insights // ignore: cast_nullable_to_non_nullable
              as IList<Insight>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$RoleBasedQAResponseImplCopyWith<$Res>
    implements $RoleBasedQAResponseCopyWith<$Res> {
  factory _$$RoleBasedQAResponseImplCopyWith(_$RoleBasedQAResponseImpl value,
          $Res Function(_$RoleBasedQAResponseImpl) then) =
      __$$RoleBasedQAResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int status, String archetype, IList<Insight> insights});
}

/// @nodoc
class __$$RoleBasedQAResponseImplCopyWithImpl<$Res>
    extends _$RoleBasedQAResponseCopyWithImpl<$Res, _$RoleBasedQAResponseImpl>
    implements _$$RoleBasedQAResponseImplCopyWith<$Res> {
  __$$RoleBasedQAResponseImplCopyWithImpl(_$RoleBasedQAResponseImpl _value,
      $Res Function(_$RoleBasedQAResponseImpl) _then)
      : super(_value, _then);

  /// Create a copy of RoleBasedQAResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
    Object? archetype = null,
    Object? insights = null,
  }) {
    return _then(_$RoleBasedQAResponseImpl(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
      archetype: null == archetype
          ? _value.archetype
          : archetype // ignore: cast_nullable_to_non_nullable
              as String,
      insights: null == insights
          ? _value.insights
          : insights // ignore: cast_nullable_to_non_nullable
              as IList<Insight>,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$RoleBasedQAResponseImpl implements _RoleBasedQAResponse {
  const _$RoleBasedQAResponseImpl(
      {required this.status,
      required this.archetype,
      this.insights = const IListConst([])});

  factory _$RoleBasedQAResponseImpl.fromJson(Map<String, dynamic> json) =>
      _$$RoleBasedQAResponseImplFromJson(json);

  @override
  final int status;
  @override
  final String archetype;
  @override
  @JsonKey()
  final IList<Insight> insights;

  @override
  String toString() {
    return 'RoleBasedQAResponse(status: $status, archetype: $archetype, insights: $insights)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RoleBasedQAResponseImpl &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.archetype, archetype) ||
                other.archetype == archetype) &&
            const DeepCollectionEquality().equals(other.insights, insights));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, status, archetype,
      const DeepCollectionEquality().hash(insights));

  /// Create a copy of RoleBasedQAResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RoleBasedQAResponseImplCopyWith<_$RoleBasedQAResponseImpl> get copyWith =>
      __$$RoleBasedQAResponseImplCopyWithImpl<_$RoleBasedQAResponseImpl>(
          this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$RoleBasedQAResponseImplToJson(
      this,
    );
  }
}

abstract class _RoleBasedQAResponse implements RoleBasedQAResponse {
  const factory _RoleBasedQAResponse(
      {required final int status,
      required final String archetype,
      final IList<Insight> insights}) = _$RoleBasedQAResponseImpl;

  factory _RoleBasedQAResponse.fromJson(Map<String, dynamic> json) =
      _$RoleBasedQAResponseImpl.fromJson;

  @override
  int get status;
  @override
  String get archetype;
  @override
  IList<Insight> get insights;

  /// Create a copy of RoleBasedQAResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RoleBasedQAResponseImplCopyWith<_$RoleBasedQAResponseImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

Insight _$InsightFromJson(Map<String, dynamic> json) {
  return _Insight.fromJson(json);
}

/// @nodoc
mixin _$Insight {
  String get type => throw _privateConstructorUsedError;
  String get text => throw _privateConstructorUsedError;
  bool get check => throw _privateConstructorUsedError;
  String get connector => throw _privateConstructorUsedError;

  /// Serializes this Insight to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $InsightCopyWith<Insight> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $InsightCopyWith<$Res> {
  factory $InsightCopyWith(Insight value, $Res Function(Insight) then) =
      _$InsightCopyWithImpl<$Res, Insight>;
  @useResult
  $Res call({String type, String text, bool check, String connector});
}

/// @nodoc
class _$InsightCopyWithImpl<$Res, $Val extends Insight>
    implements $InsightCopyWith<$Res> {
  _$InsightCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? type = null,
    Object? text = null,
    Object? check = null,
    Object? connector = null,
  }) {
    return _then(_value.copyWith(
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as String,
      text: null == text
          ? _value.text
          : text // ignore: cast_nullable_to_non_nullable
              as String,
      check: null == check
          ? _value.check
          : check // ignore: cast_nullable_to_non_nullable
              as bool,
      connector: null == connector
          ? _value.connector
          : connector // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$InsightImplCopyWith<$Res> implements $InsightCopyWith<$Res> {
  factory _$$InsightImplCopyWith(
          _$InsightImpl value, $Res Function(_$InsightImpl) then) =
      __$$InsightImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String type, String text, bool check, String connector});
}

/// @nodoc
class __$$InsightImplCopyWithImpl<$Res>
    extends _$InsightCopyWithImpl<$Res, _$InsightImpl>
    implements _$$InsightImplCopyWith<$Res> {
  __$$InsightImplCopyWithImpl(
      _$InsightImpl _value, $Res Function(_$InsightImpl) _then)
      : super(_value, _then);

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? type = null,
    Object? text = null,
    Object? check = null,
    Object? connector = null,
  }) {
    return _then(_$InsightImpl(
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as String,
      text: null == text
          ? _value.text
          : text // ignore: cast_nullable_to_non_nullable
              as String,
      check: null == check
          ? _value.check
          : check // ignore: cast_nullable_to_non_nullable
              as bool,
      connector: null == connector
          ? _value.connector
          : connector // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$InsightImpl extends _Insight {
  const _$InsightImpl(
      {required this.type,
      required this.text,
      required this.check,
      required this.connector})
      : super._();

  factory _$InsightImpl.fromJson(Map<String, dynamic> json) =>
      _$$InsightImplFromJson(json);

  @override
  final String type;
  @override
  final String text;
  @override
  final bool check;
  @override
  final String connector;

  @override
  String toString() {
    return 'Insight(type: $type, text: $text, check: $check, connector: $connector)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$InsightImpl &&
            (identical(other.type, type) || other.type == type) &&
            (identical(other.text, text) || other.text == text) &&
            (identical(other.check, check) || other.check == check) &&
            (identical(other.connector, connector) ||
                other.connector == connector));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, type, text, check, connector);

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$InsightImplCopyWith<_$InsightImpl> get copyWith =>
      __$$InsightImplCopyWithImpl<_$InsightImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$InsightImplToJson(
      this,
    );
  }
}

abstract class _Insight extends Insight {
  const factory _Insight(
      {required final String type,
      required final String text,
      required final bool check,
      required final String connector}) = _$InsightImpl;
  const _Insight._() : super._();

  factory _Insight.fromJson(Map<String, dynamic> json) = _$InsightImpl.fromJson;

  @override
  String get type;
  @override
  String get text;
  @override
  bool get check;
  @override
  String get connector;

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$InsightImplCopyWith<_$InsightImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data/bio_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'bio_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

BioResponse _$BioResponseFromJson(Map<String, dynamic> json) {
  return _BioResponse.fromJson(json);
}

/// @nodoc
mixin _$BioResponse {
  int get status => throw _privateConstructorUsedError;
  String get archetype => throw _privateConstructorUsedError;
  IList<Insight> get insights => throw _privateConstructorUsedError;

  /// Serializes this BioResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of BioResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $BioResponseCopyWith<BioResponse> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $BioResponseCopyWith<$Res> {
  factory $BioResponseCopyWith(
          BioResponse value, $Res Function(BioResponse) then) =
      _$BioResponseCopyWithImpl<$Res, BioResponse>;
  @useResult
  $Res call({int status, String archetype, IList<Insight> insights});
}

/// @nodoc
class _$BioResponseCopyWithImpl<$Res, $Val extends BioResponse>
    implements $BioResponseCopyWith<$Res> {
  _$BioResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of BioResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
    Object? archetype = null,
    Object? insights = null,
  }) {
    return _then(_value.copyWith(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
      archetype: null == archetype
          ? _value.archetype
          : archetype // ignore: cast_nullable_to_non_nullable
              as String,
      insights: null == insights
          ? _value.insights
          : insights // ignore: cast_nullable_to_non_nullable
              as IList<Insight>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$BioResponseImplCopyWith<$Res>
    implements $BioResponseCopyWith<$Res> {
  factory _$$BioResponseImplCopyWith(
          _$BioResponseImpl value, $Res Function(_$BioResponseImpl) then) =
      __$$BioResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int status, String archetype, IList<Insight> insights});
}

/// @nodoc
class __$$BioResponseImplCopyWithImpl<$Res>
    extends _$BioResponseCopyWithImpl<$Res, _$BioResponseImpl>
    implements _$$BioResponseImplCopyWith<$Res> {
  __$$BioResponseImplCopyWithImpl(
      _$BioResponseImpl _value, $Res Function(_$BioResponseImpl) _then)
      : super(_value, _then);

  /// Create a copy of BioResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
    Object? archetype = null,
    Object? insights = null,
  }) {
    return _then(_$BioResponseImpl(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
      archetype: null == archetype
          ? _value.archetype
          : archetype // ignore: cast_nullable_to_non_nullable
              as String,
      insights: null == insights
          ? _value.insights
          : insights // ignore: cast_nullable_to_non_nullable
              as IList<Insight>,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$BioResponseImpl implements _BioResponse {
  const _$BioResponseImpl(
      {required this.status,
      required this.archetype,
      this.insights = const IListConst([])});

  factory _$BioResponseImpl.fromJson(Map<String, dynamic> json) =>
      _$$BioResponseImplFromJson(json);

  @override
  final int status;
  @override
  final String archetype;
  @override
  @JsonKey()
  final IList<Insight> insights;

  @override
  String toString() {
    return 'BioResponse(status: $status, archetype: $archetype, insights: $insights)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BioResponseImpl &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.archetype, archetype) ||
                other.archetype == archetype) &&
            const DeepCollectionEquality().equals(other.insights, insights));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, status, archetype,
      const DeepCollectionEquality().hash(insights));

  /// Create a copy of BioResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$BioResponseImplCopyWith<_$BioResponseImpl> get copyWith =>
      __$$BioResponseImplCopyWithImpl<_$BioResponseImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$BioResponseImplToJson(
      this,
    );
  }
}

abstract class _BioResponse implements BioResponse {
  const factory _BioResponse(
      {required final int status,
      required final String archetype,
      final IList<Insight> insights}) = _$BioResponseImpl;

  factory _BioResponse.fromJson(Map<String, dynamic> json) =
      _$BioResponseImpl.fromJson;

  @override
  int get status;
  @override
  String get archetype;
  @override
  IList<Insight> get insights;

  /// Create a copy of BioResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$BioResponseImplCopyWith<_$BioResponseImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

Insight _$InsightFromJson(Map<String, dynamic> json) {
  return _Insight.fromJson(json);
}

/// @nodoc
mixin _$Insight {
  String get type => throw _privateConstructorUsedError;
  String get text => throw _privateConstructorUsedError;
  bool get check => throw _privateConstructorUsedError;
  String get connector => throw _privateConstructorUsedError;

  /// Serializes this Insight to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $InsightCopyWith<Insight> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $InsightCopyWith<$Res> {
  factory $InsightCopyWith(Insight value, $Res Function(Insight) then) =
      _$InsightCopyWithImpl<$Res, Insight>;
  @useResult
  $Res call({String type, String text, bool check, String connector});
}

/// @nodoc
class _$InsightCopyWithImpl<$Res, $Val extends Insight>
    implements $InsightCopyWith<$Res> {
  _$InsightCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? type = null,
    Object? text = null,
    Object? check = null,
    Object? connector = null,
  }) {
    return _then(_value.copyWith(
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as String,
      text: null == text
          ? _value.text
          : text // ignore: cast_nullable_to_non_nullable
              as String,
      check: null == check
          ? _value.check
          : check // ignore: cast_nullable_to_non_nullable
              as bool,
      connector: null == connector
          ? _value.connector
          : connector // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$InsightImplCopyWith<$Res> implements $InsightCopyWith<$Res> {
  factory _$$InsightImplCopyWith(
          _$InsightImpl value, $Res Function(_$InsightImpl) then) =
      __$$InsightImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String type, String text, bool check, String connector});
}

/// @nodoc
class __$$InsightImplCopyWithImpl<$Res>
    extends _$InsightCopyWithImpl<$Res, _$InsightImpl>
    implements _$$InsightImplCopyWith<$Res> {
  __$$InsightImplCopyWithImpl(
      _$InsightImpl _value, $Res Function(_$InsightImpl) _then)
      : super(_value, _then);

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? type = null,
    Object? text = null,
    Object? check = null,
    Object? connector = null,
  }) {
    return _then(_$InsightImpl(
      type: null == type
          ? _value.type
          : type // ignore: cast_nullable_to_non_nullable
              as String,
      text: null == text
          ? _value.text
          : text // ignore: cast_nullable_to_non_nullable
              as String,
      check: null == check
          ? _value.check
          : check // ignore: cast_nullable_to_non_nullable
              as bool,
      connector: null == connector
          ? _value.connector
          : connector // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$InsightImpl extends _Insight {
  const _$InsightImpl(
      {required this.type,
      required this.text,
      required this.check,
      required this.connector})
      : super._();

  factory _$InsightImpl.fromJson(Map<String, dynamic> json) =>
      _$$InsightImplFromJson(json);

  @override
  final String type;
  @override
  final String text;
  @override
  final bool check;
  @override
  final String connector;

  @override
  String toString() {
    return 'Insight(type: $type, text: $text, check: $check, connector: $connector)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$InsightImpl &&
            (identical(other.type, type) || other.type == type) &&
            (identical(other.text, text) || other.text == text) &&
            (identical(other.check, check) || other.check == check) &&
            (identical(other.connector, connector) ||
                other.connector == connector));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, type, text, check, connector);

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$InsightImplCopyWith<_$InsightImpl> get copyWith =>
      __$$InsightImplCopyWithImpl<_$InsightImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$InsightImplToJson(
      this,
    );
  }
}

abstract class _Insight extends Insight {
  const factory _Insight(
      {required final String type,
      required final String text,
      required final bool check,
      required final String connector}) = _$InsightImpl;
  const _Insight._() : super._();

  factory _Insight.fromJson(Map<String, dynamic> json) = _$InsightImpl.fromJson;

  @override
  String get type;
  @override
  String get text;
  @override
  bool get check;
  @override
  String get connector;

  /// Create a copy of Insight
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$InsightImplCopyWith<_$InsightImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/ui_states/create_user_state.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'create_user_state.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

CreateUserState _$CreateUserStateFromJson(Map<String, dynamic> json) {
  return _CreateUserState.fromJson(json);
}

/// @nodoc
mixin _$CreateUserState {
  CreateUserStatus get status => throw _privateConstructorUsedError;
  String? get firstName => throw _privateConstructorUsedError;
  String? get lastName => throw _privateConstructorUsedError;
  String? get password => throw _privateConstructorUsedError;
  String? get userName => throw _privateConstructorUsedError;
  String? get dOB => throw _privateConstructorUsedError;
  String? get phoneNumber => throw _privateConstructorUsedError;
  CreateUserResponse? get createUserResponse => throw _privateConstructorUsedError;
  String? get errorMessage => throw _privateConstructorUsedError;

  /// Serializes this CreateUserState to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of CreateUserState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CreateUserStateCopyWith<CreateUserState> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CreateUserStateCopyWith<$Res> {
  factory $CreateUserStateCopyWith(CreateUserState value, $Res Function(CreateUserState) then) = _$CreateUserStateCopyWithImpl<$Res, CreateUserState>;
  @useResult
  $Res call(
      {CreateUserStatus status,
      String? firstName,
      String? lastName,
      String? password,
      String? userName,
      String? dOB,
      String? phoneNumber,
      CreateUserResponse? createUserResponse,
      String? errorMessage});

  $CreateUserResponseCopyWith<$Res>? get createUserResponse;
}

/// @nodoc
class _$CreateUserStateCopyWithImpl<$Res, $Val extends CreateUserState> implements $CreateUserStateCopyWith<$Res> {
  _$CreateUserStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of CreateUserState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
    Object? firstName = freezed,
    Object? lastName = freezed,
    Object? password = freezed,
    Object? userName = freezed,
    Object? dOB = freezed,
    Object? phoneNumber = freezed,
    Object? createUserResponse = freezed,
    Object? errorMessage = freezed,
  }) {
    return _then(_value.copyWith(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as CreateUserStatus,
      firstName: freezed == firstName
          ? _value.firstName
          : firstName // ignore: cast_nullable_to_non_nullable
              as String?,
      lastName: freezed == lastName
          ? _value.lastName
          : lastName // ignore: cast_nullable_to_non_nullable
              as String?,
      password: freezed == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String?,
      userName: freezed == userName
          ? _value.userName
          : userName // ignore: cast_nullable_to_non_nullable
              as String?,
      dOB: freezed == dOB
          ? _value.dOB
          : dOB // ignore: cast_nullable_to_non_nullable
              as String?,
      phoneNumber: freezed == phoneNumber
          ? _value.phoneNumber
          : phoneNumber // ignore: cast_nullable_to_non_nullable
              as String?,
      createUserResponse: freezed == createUserResponse
          ? _value.createUserResponse
          : createUserResponse // ignore: cast_nullable_to_non_nullable
              as CreateUserResponse?,
      errorMessage: freezed == errorMessage
          ? _value.errorMessage
          : errorMessage // ignore: cast_nullable_to_non_nullable
              as String?,
    ) as $Val);
  }

  /// Create a copy of CreateUserState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $CreateUserResponseCopyWith<$Res>? get createUserResponse {
    if (_value.createUserResponse == null) {
      return null;
    }

    return $CreateUserResponseCopyWith<$Res>(_value.createUserResponse!, (value) {
      return _then(_value.copyWith(createUserResponse: value) as $Val);
    });
  }
}

/// @nodoc
abstract class _$$CreateUserStateImplCopyWith<$Res> implements $CreateUserStateCopyWith<$Res> {
  factory _$$CreateUserStateImplCopyWith(_$CreateUserStateImpl value, $Res Function(_$CreateUserStateImpl) then) = __$$CreateUserStateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {CreateUserStatus status,
      String? firstName,
      String? lastName,
      String? password,
      String? userName,
      String? dOB,
      String? phoneNumber,
      CreateUserResponse? createUserResponse,
      String? errorMessage});

  @override
  $CreateUserResponseCopyWith<$Res>? get createUserResponse;
}

/// @nodoc
class __$$CreateUserStateImplCopyWithImpl<$Res> extends _$CreateUserStateCopyWithImpl<$Res, _$CreateUserStateImpl>
    implements _$$CreateUserStateImplCopyWith<$Res> {
  __$$CreateUserStateImplCopyWithImpl(_$CreateUserStateImpl _value, $Res Function(_$CreateUserStateImpl) _then) : super(_value, _then);

  /// Create a copy of CreateUserState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
    Object? firstName = freezed,
    Object? lastName = freezed,
    Object? password = freezed,
    Object? userName = freezed,
    Object? dOB = freezed,
    Object? phoneNumber = freezed,
    Object? createUserResponse = freezed,
    Object? errorMessage = freezed,
  }) {
    return _then(_$CreateUserStateImpl(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as CreateUserStatus,
      firstName: freezed == firstName
          ? _value.firstName
          : firstName // ignore: cast_nullable_to_non_nullable
              as String?,
      lastName: freezed == lastName
          ? _value.lastName
          : lastName // ignore: cast_nullable_to_non_nullable
              as String?,
      password: freezed == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String?,
      userName: freezed == userName
          ? _value.userName
          : userName // ignore: cast_nullable_to_non_nullable
              as String?,
      dOB: freezed == dOB
          ? _value.dOB
          : dOB // ignore: cast_nullable_to_non_nullable
              as String?,
      phoneNumber: freezed == phoneNumber
          ? _value.phoneNumber
          : phoneNumber // ignore: cast_nullable_to_non_nullable
              as String?,
      createUserResponse: freezed == createUserResponse
          ? _value.createUserResponse
          : createUserResponse // ignore: cast_nullable_to_non_nullable
              as CreateUserResponse?,
      errorMessage: freezed == errorMessage
          ? _value.errorMessage
          : errorMessage // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CreateUserStateImpl extends _CreateUserState {
  const _$CreateUserStateImpl(
      {this.status = CreateUserStatus.initial,
      this.firstName,
      this.lastName,
      this.password,
      this.userName,
      this.dOB,
      this.phoneNumber,
      this.createUserResponse,
      this.errorMessage})
      : super._();

  factory _$CreateUserStateImpl.fromJson(Map<String, dynamic> json) => _$$CreateUserStateImplFromJson(json);

  @override
  @JsonKey()
  final CreateUserStatus status;
  @override
  final String? firstName;
  @override
  final String? lastName;
  @override
  final String? password;
  @override
  final String? userName;
  @override
  final String? dOB;
  @override
  final String? phoneNumber;
  @override
  final CreateUserResponse? createUserResponse;
  @override
  final String? errorMessage;

  @override
  String toString() {
    return 'CreateUserState(status: $status, firstName: $firstName, lastName: $lastName, password: $password, userName: $userName, dOB: $dOB, phoneNumber: $phoneNumber, createUserResponse: $createUserResponse, errorMessage: $errorMessage)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateUserStateImpl &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.firstName, firstName) || other.firstName == firstName) &&
            (identical(other.lastName, lastName) || other.lastName == lastName) &&
            (identical(other.password, password) || other.password == password) &&
            (identical(other.userName, userName) || other.userName == userName) &&
            (identical(other.dOB, dOB) || other.dOB == dOB) &&
            (identical(other.phoneNumber, phoneNumber) || other.phoneNumber == phoneNumber) &&
            (identical(other.createUserResponse, createUserResponse) || other.createUserResponse == createUserResponse) &&
            (identical(other.errorMessage, errorMessage) || other.errorMessage == errorMessage));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, status, firstName, lastName, password, userName, dOB, phoneNumber, createUserResponse, errorMessage);

  /// Create a copy of CreateUserState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CreateUserStateImplCopyWith<_$CreateUserStateImpl> get copyWith => __$$CreateUserStateImplCopyWithImpl<_$CreateUserStateImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$CreateUserStateImplToJson(
      this,
    );
  }
}

abstract class _CreateUserState extends CreateUserState {
  const factory _CreateUserState(
      {final CreateUserStatus status,
      final String? firstName,
      final String? lastName,
      final String? password,
      final String? userName,
      final String? dOB,
      final String? phoneNumber,
      final CreateUserResponse? createUserResponse,
      final String? errorMessage}) = _$CreateUserStateImpl;
  const _CreateUserState._() : super._();

  factory _CreateUserState.fromJson(Map<String, dynamic> json) = _$CreateUserStateImpl.fromJson;

  @override
  CreateUserStatus get status;
  @override
  String? get firstName;
  @override
  String? get lastName;
  @override
  String? get password;
  @override
  String? get userName;
  @override
  String? get dOB;
  @override
  String? get phoneNumber;
  @override
  CreateUserResponse? get createUserResponse;
  @override
  String? get errorMessage;

  /// Create a copy of CreateUserState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CreateUserStateImplCopyWith<_$CreateUserStateImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'emotional_qa_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

EmotionalQARequest _$EmotionalQARequestFromJson(Map<String, dynamic> json) {
  return _EmotionalQARequest.fromJson(json);
}

/// @nodoc
mixin _$EmotionalQARequest {
  @JsonKey(name: 'user_id')
  int get userId => throw _privateConstructorUsedError;
  List<QAEntry> get qa => throw _privateConstructorUsedError;

  /// Serializes this EmotionalQARequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of EmotionalQARequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $EmotionalQARequestCopyWith<EmotionalQARequest> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $EmotionalQARequestCopyWith<$Res> {
  factory $EmotionalQARequestCopyWith(EmotionalQARequest value, $Res Function(EmotionalQARequest) then) =
      _$EmotionalQARequestCopyWithImpl<$Res, EmotionalQARequest>;
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, List<QAEntry> qa});
}

/// @nodoc
class _$EmotionalQARequestCopyWithImpl<$Res, $Val extends EmotionalQARequest> implements $EmotionalQARequestCopyWith<$Res> {
  _$EmotionalQARequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of EmotionalQARequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? qa = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      qa: null == qa
          ? _value.qa
          : qa // ignore: cast_nullable_to_non_nullable
              as List<QAEntry>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$EmotionalQARequestImplCopyWith<$Res> implements $EmotionalQARequestCopyWith<$Res> {
  factory _$$EmotionalQARequestImplCopyWith(_$EmotionalQARequestImpl value, $Res Function(_$EmotionalQARequestImpl) then) =
      __$$EmotionalQARequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, List<QAEntry> qa});
}

/// @nodoc
class __$$EmotionalQARequestImplCopyWithImpl<$Res> extends _$EmotionalQARequestCopyWithImpl<$Res, _$EmotionalQARequestImpl>
    implements _$$EmotionalQARequestImplCopyWith<$Res> {
  __$$EmotionalQARequestImplCopyWithImpl(_$EmotionalQARequestImpl _value, $Res Function(_$EmotionalQARequestImpl) _then) : super(_value, _then);

  /// Create a copy of EmotionalQARequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? qa = null,
  }) {
    return _then(_$EmotionalQARequestImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      qa: null == qa
          ? _value._qa
          : qa // ignore: cast_nullable_to_non_nullable
              as List<QAEntry>,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$EmotionalQARequestImpl implements _EmotionalQARequest {
  const _$EmotionalQARequestImpl({@JsonKey(name: 'user_id') required this.userId, required final List<QAEntry> qa}) : _qa = qa;

  factory _$EmotionalQARequestImpl.fromJson(Map<String, dynamic> json) => _$$EmotionalQARequestImplFromJson(json);

  @override
  @JsonKey(name: 'user_id')
  final int userId;
  final List<QAEntry> _qa;
  @override
  List<QAEntry> get qa {
    if (_qa is EqualUnmodifiableListView) return _qa;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_qa);
  }

  @override
  String toString() {
    return 'EmotionalQARequest(userId: $userId, qa: $qa)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$EmotionalQARequestImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            const DeepCollectionEquality().equals(other._qa, _qa));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, userId, const DeepCollectionEquality().hash(_qa));

  /// Create a copy of EmotionalQARequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$EmotionalQARequestImplCopyWith<_$EmotionalQARequestImpl> get copyWith =>
      __$$EmotionalQARequestImplCopyWithImpl<_$EmotionalQARequestImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$EmotionalQARequestImplToJson(
      this,
    );
  }
}

abstract class _EmotionalQARequest implements EmotionalQARequest {
  const factory _EmotionalQARequest({@JsonKey(name: 'user_id') required final int userId, required final List<QAEntry> qa}) = _$EmotionalQARequestImpl;

  factory _EmotionalQARequest.fromJson(Map<String, dynamic> json) = _$EmotionalQARequestImpl.fromJson;

  @override
  @JsonKey(name: 'user_id')
  int get userId;
  @override
  List<QAEntry> get qa;

  /// Create a copy of EmotionalQARequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$EmotionalQARequestImplCopyWith<_$EmotionalQARequestImpl> get copyWith => throw _privateConstructorUsedError;
}

QAEntry _$QAEntryFromJson(Map<String, dynamic> json) {
  return _QAEntry.fromJson(json);
}

/// @nodoc
mixin _$QAEntry {
  int get question => throw _privateConstructorUsedError;
  int get answer => throw _privateConstructorUsedError;

  /// Serializes this QAEntry to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of QAEntry
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $QAEntryCopyWith<QAEntry> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $QAEntryCopyWith<$Res> {
  factory $QAEntryCopyWith(QAEntry value, $Res Function(QAEntry) then) = _$QAEntryCopyWithImpl<$Res, QAEntry>;
  @useResult
  $Res call({int question, int answer});
}

/// @nodoc
class _$QAEntryCopyWithImpl<$Res, $Val extends QAEntry> implements $QAEntryCopyWith<$Res> {
  _$QAEntryCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of QAEntry
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? question = null,
    Object? answer = null,
  }) {
    return _then(_value.copyWith(
      question: null == question
          ? _value.question
          : question // ignore: cast_nullable_to_non_nullable
              as int,
      answer: null == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$QAEntryImplCopyWith<$Res> implements $QAEntryCopyWith<$Res> {
  factory _$$QAEntryImplCopyWith(_$QAEntryImpl value, $Res Function(_$QAEntryImpl) then) = __$$QAEntryImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int question, int answer});
}

/// @nodoc
class __$$QAEntryImplCopyWithImpl<$Res> extends _$QAEntryCopyWithImpl<$Res, _$QAEntryImpl> implements _$$QAEntryImplCopyWith<$Res> {
  __$$QAEntryImplCopyWithImpl(_$QAEntryImpl _value, $Res Function(_$QAEntryImpl) _then) : super(_value, _then);

  /// Create a copy of QAEntry
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? question = null,
    Object? answer = null,
  }) {
    return _then(_$QAEntryImpl(
      question: null == question
          ? _value.question
          : question // ignore: cast_nullable_to_non_nullable
              as int,
      answer: null == answer
          ? _value.answer
          : answer // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$QAEntryImpl implements _QAEntry {
  const _$QAEntryImpl({required this.question, required this.answer});

  factory _$QAEntryImpl.fromJson(Map<String, dynamic> json) => _$$QAEntryImplFromJson(json);

  @override
  final int question;
  @override
  final int answer;

  @override
  String toString() {
    return 'QAEntry(question: $question, answer: $answer)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$QAEntryImpl &&
            (identical(other.question, question) || other.question == question) &&
            (identical(other.answer, answer) || other.answer == answer));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, question, answer);

  /// Create a copy of QAEntry
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$QAEntryImplCopyWith<_$QAEntryImpl> get copyWith => __$$QAEntryImplCopyWithImpl<_$QAEntryImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$QAEntryImplToJson(
      this,
    );
  }
}

abstract class _QAEntry implements QAEntry {
  const factory _QAEntry({required final int question, required final int answer}) = _$QAEntryImpl;

  factory _QAEntry.fromJson(Map<String, dynamic> json) = _$QAEntryImpl.fromJson;

  @override
  int get question;
  @override
  int get answer;

  /// Create a copy of QAEntry
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$QAEntryImplCopyWith<_$QAEntryImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/main.dart
```dart
import 'package:device_preview/device_preview.dart';
import 'package:flex_color_scheme/flex_color_scheme.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/bootstrap.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';
import 'package:peer_circle_app/core/functions/rebuild_all.dart';
import 'package:peer_circle_app/core/mock_config/config.dart';
import 'package:peer_circle_app/flavors.dart';
import 'package:peer_circle_app/router/router.dart';

Future<void> main() async {
  final container = await bootstrap();

  void runPeerCircle() => runApp(
        UncontrolledProviderScope(
          container: container,
          child: DevicePreview(
            enabled: F.appFlavor == Flavor.dev,
            key: UniqueKey(),
            tools: const [
              MockSliverListTile(),
              MockRouteNavigation(),
              MockLogin(),
              MockLogout(),
              ...DevicePreview.defaultTools,
            ],
            backgroundColor: scaffoldBackgroundColor,
            builder: (context) => ScreenUtilInit(
              designSize: const Size(393, 852),
              minTextAdapt: true,
              splitScreenMode: true,
              useInheritedMediaQuery: true,
              builder: (context, child) {
                ScreenUtil.configure(
                  data: MediaQuery.of(context),
                );

                rebuildAllChildren(context);
                return const PeerCircleRoot();
              },
              child: const PeerCircleRoot(),
            ), // Wrap your app
          ),
        ),
      );

  // // use Sentry in release mode only
  // if (kReleaseMode) {
  //   await SentryFlutter.init(
  //     (SentryFlutterOptions options) {
  //       options.dsn = '';
  //       // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
  //       // We recommend adjusting this value in production.
  //       options.tracesSampleRate = 1.0;
  //       options.environment = F.name;
  //       options.beforeSend = beforeSend;
  //     },
  //     appRunner: () => runPeerCircle(),
  //   );
  // } else {
  //   runPeerCircle();
  // }
  runPeerCircle();
}

class PeerCircleRoot extends HookConsumerWidget {
  const PeerCircleRoot({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final router = ref.watch(routerProvider);

    return MaterialApp.router(
      locale: DevicePreview.locale(context),
      builder: DevicePreview.appBuilder,
      routerConfig: router,
      themeMode: ThemeMode.dark,
      darkTheme: FlexThemeData.dark(
        scaffoldBackground: scaffoldBackgroundColor,
        appBarElevation: 0,
        appBarOpacity: 0,
        appBarBackground: Colors.transparent,
        applyElevationOverlayColor: false,
        appBarStyle: FlexAppBarStyle.surface,
        colorScheme: const ColorScheme(
          // Base theme brightness
          brightness: Brightness.dark,

          // Primary colors
          primary: Color(0xff52bf4e), // colorsColorBrandGreen500
          onPrimary: Color(0xffffffff), // colorsColorBrandWhite50
          primaryContainer: Color(0xff75cc71), // colorsColorBrandGreen400
          onPrimaryContainer: Color(0xff081308), // colorsColorBrandGreen950

          // Secondary colors
          secondary: Color(0xfff5ce62), // colorsColorBrandYellow500
          onSecondary: Color(0xff4c3c11), // colorsColorBrandYellow900
          secondaryContainer: Color(0xfffbe097), // colorsColorBrandYellow300
          onSecondaryContainer: Color(0xff4c3c11), // colorsColorBrandYellow900

          // Tertiary colors
          tertiary: Color(0xffec4899), // colorsColorBrandPink500
          onTertiary: Color(0xffffffff), // colorsColorBrandWhite50
          tertiaryContainer: Color(0xfff9a8d4), // colorsColorBrandPink300
          onTertiaryContainer: Color(0xff831843), // colorsColorBrandPink900

          // Error colors
          error: Color(0xffCF6679), // colorsColorBrandCrimson500
          onError: Color(0xffffffff), // colorsColorBrandWhite50
          errorContainer: Color(0xfff8d0d8), // colorsColorBrandCrimson100
          onErrorContainer: Color(0xff2c040c), // colorsColorBrandCrimson900

          // Surface colors
          surface: Color(0xff121212), // colorsColorMappedSurfaceSurface1Rest
          onSurface: Color(0xffffffff), // colorsColorMappedTextOnSurface1Primary
          surfaceDim: Color(0xff212121), // colorsColorMappedSurfaceSurface2Rest
          surfaceBright: Color(0xff333333), // colorsColorMappedSurfaceSurface3Rest
          surfaceContainerLowest: Color(0xff0e0e0e), // colorsColorMappedBorderOnSurface1Primary
          surfaceContainerLow: Color(0xff212121), // colorsColorMappedSurfaceSurface2Rest
          surfaceContainer: Color(0xff333333), // colorsColorMappedSurfaceSurface3Rest
          surfaceContainerHigh: Color(0xff747474), // colorsColorMappedSurfaceSurface4Rest
          surfaceContainerHighest: Color(0xff959595), // colorsColorBrandBlack150

          // Additional surface colors
          onSurfaceVariant: Color(0xff848484), // colorsColorMappedTextOnSurface1Secondary
          outline: Color(0xff747474), // colorsColorMappedBorderDefaultRest
          outlineVariant: Color(0xff333333), // colorsColorMappedBorderDefaultDisabled

          // Shadow and scrim
          shadow: Color(0xff000000),
          scrim: Color(0xff000000),

          // Inverse colors
          inverseSurface: Color(0xffffffff), // colorsColorBrandWhite50
          onInverseSurface: Color(0xff121212), // colorsColorMappedSurfaceSurface1Rest
          inversePrimary: Color(0xff42993e), // colorsColorBrandGreen600

          // Surface tint
          surfaceTint: Colors.transparent, // colorsColorBrandGreen500
        ),
        subThemesData: FlexSubThemesData(
          // Style for all buttons
          buttonMinSize: Size(40.w, 40.h),
          buttonPadding: EdgeInsets.symmetric(
            horizontal: 16.w,
            vertical: 16.h,
          ),

          // Base styling for outlined button
          outlinedButtonRadius: 50,
          outlinedButtonSchemeColor: SchemeColor.onSurface,
          outlinedButtonBorderWidth: 2.w,
          outlinedButtonPressedBorderWidth: 1.w,

          // Text style for outlined button
          outlinedButtonTextStyle: WidgetStateProperty.all(
            TextStyle(
              fontSize: 16.sp,
              fontWeight: FontWeight.w500,
              color: Colors.white,
            ),
          ),

          // Filled Button
          filledButtonRadius: 50,
          filledButtonSchemeColor: SchemeColor.primary,
          filledButtonTextStyle: WidgetStateProperty.all(
            TextStyle(
              fontSize: 16.sp,
              fontWeight: FontWeight.w500,
              color: Colors.white,
            ),
          ),

          // Elevated Button
          //     this.elevatedButtonRadius,
          //     this.elevatedButtonElevation,
          //     this.elevatedButtonSchemeColor,
          //     this.elevatedButtonSecondarySchemeColor,
          //     this.elevatedButtonTextStyle,
          elevatedButtonRadius: 50,
          elevatedButtonElevation: 0,
          elevatedButtonSchemeColor: SchemeColor.onPrimary,
          elevatedButtonSecondarySchemeColor: SchemeColor.primary,
          elevatedButtonTextStyle: WidgetStateProperty.all(
            TextStyle(
              fontSize: 16.sp,
              fontWeight: FontWeight.w500,
              color: Colors.white,
            ),
          ),

          // Input field styling
          inputDecoratorRadius: 12, // More rounded corners
          inputDecoratorSchemeColor: SchemeColor.inverseSurface,
          inputDecoratorContentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
          //inputDecoratorIsDense: true,
          inputDecoratorIsFilled: true,
          inputDecoratorFillColor: Colors.white, // Dark background for input field
          inputDecoratorBackgroundAlpha: 0xff, // Adjust background transparency
          // inputDecoratorBorderSchemeColor: SchemeColor.primary, // Adjust to match theme
          inputDecoratorBorderType: FlexInputBorderType.outline,
          inputDecoratorFocusedHasBorder: false,
          inputDecoratorUnfocusedHasBorder: false,
          // inputDecoratorUnfocusedBorderIsColored: true,
          // inputDecoratorBorderWidth: 1.2.w, // Lighter weight border for unfocused state
          // inputDecoratorFocusedBorderWidth: 2.w,
          inputDecoratorPrefixIconSchemeColor: SchemeColor.onInverseSurface,
          inputDecoratorSuffixIconSchemeColor: SchemeColor.onInverseSurface,

          // Cursor and selection colors
          inputCursorSchemeColor: SchemeColor.primary,
          inputSelectionSchemeColor: SchemeColor.primary,
          inputSelectionOpacity: 0.4,
          inputSelectionHandleSchemeColor: SchemeColor.primary,
        ),
        textTheme: TextTheme(
          // Display styles - used for largest text elements
          displayLarge: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 57.sp,
            fontWeight: FontWeight.w400,
          ),
          displayMedium: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 45.sp,
            fontWeight: FontWeight.w400,
          ),
          displaySmall: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 36.sp,
            fontWeight: FontWeight.w400,
          ),

          // Headline styles - used for important text elements
          headlineLarge: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 32.sp,
            fontWeight: FontWeight.w500,
          ),
          headlineMedium: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 28.sp,
            fontWeight: FontWeight.w500,
          ),
          headlineSmall: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 24.sp,
            fontWeight: FontWeight.w500,
          ),

          // Title styles - used for sub-headers and emphasized text
          titleLarge: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 22.sp,
            fontWeight: FontWeight.w500,
          ),
          titleMedium: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 16.sp,
            fontWeight: FontWeight.w500,
          ),
          titleSmall: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 14.sp,
            fontWeight: FontWeight.w500,
          ),

          // Body styles - used for main content
          bodyLarge: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 16.sp,
            fontWeight: FontWeight.w400,
          ),
          bodyMedium: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 14.sp,
            fontWeight: FontWeight.w400,
          ),
          bodySmall: TextStyle(
            color: const Color(0xffffffff), // onSurface
            fontSize: 12.sp,
            fontWeight: FontWeight.w400,
          ),

          // Label styles - used for secondary and helper text
          labelLarge: TextStyle(
            color: const Color(0xff848484), // onSurfaceVariant
            fontSize: 16.sp,
            fontWeight: FontWeight.w400,
          ),
          labelMedium: TextStyle(
            color: const Color(0xff848484), // onSurfaceVariant
            fontSize: 14.sp,
            fontWeight: FontWeight.w400,
          ),
          labelSmall: TextStyle(
            color: const Color(0xff848484), // onSurfaceVariant
            fontSize: 11.sp,
            fontWeight: FontWeight.w400,
          ),
        ),
        visualDensity: FlexColorScheme.comfortablePlatformDensity,
        cupertinoOverrideTheme: const NoDefaultCupertinoThemeData(),
      ),
      debugShowCheckedModeBanner: false,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/create_user_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'create_user_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

CreateUserRequest _$CreateUserRequestFromJson(Map<String, dynamic> json) {
  return _CreateUserRequest.fromJson(json);
}

/// @nodoc
mixin _$CreateUserRequest {
  @JsonKey(name: 'first_name')
  String get firstName => throw _privateConstructorUsedError;
  @JsonKey(name: 'last_name')
  String get lastName => throw _privateConstructorUsedError;
  @JsonKey(name: 'password')
  String get password => throw _privateConstructorUsedError;
  @JsonKey(name: 'username')
  String get userName => throw _privateConstructorUsedError;
  @JsonKey(name: 'd_o_b')
  String get dOB => throw _privateConstructorUsedError;
  @JsonKey(name: 'phone_number')
  String get phoneNumber => throw _privateConstructorUsedError;

  /// Serializes this CreateUserRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of CreateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CreateUserRequestCopyWith<CreateUserRequest> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CreateUserRequestCopyWith<$Res> {
  factory $CreateUserRequestCopyWith(CreateUserRequest value, $Res Function(CreateUserRequest) then) = _$CreateUserRequestCopyWithImpl<$Res, CreateUserRequest>;
  @useResult
  $Res call(
      {@JsonKey(name: 'first_name') String firstName,
      @JsonKey(name: 'last_name') String lastName,
      @JsonKey(name: 'password') String password,
      @JsonKey(name: 'username') String userName,
      @JsonKey(name: 'd_o_b') String dOB,
      @JsonKey(name: 'phone_number') String phoneNumber});
}

/// @nodoc
class _$CreateUserRequestCopyWithImpl<$Res, $Val extends CreateUserRequest> implements $CreateUserRequestCopyWith<$Res> {
  _$CreateUserRequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of CreateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? firstName = null,
    Object? lastName = null,
    Object? password = null,
    Object? userName = null,
    Object? dOB = null,
    Object? phoneNumber = null,
  }) {
    return _then(_value.copyWith(
      firstName: null == firstName
          ? _value.firstName
          : firstName // ignore: cast_nullable_to_non_nullable
              as String,
      lastName: null == lastName
          ? _value.lastName
          : lastName // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
      userName: null == userName
          ? _value.userName
          : userName // ignore: cast_nullable_to_non_nullable
              as String,
      dOB: null == dOB
          ? _value.dOB
          : dOB // ignore: cast_nullable_to_non_nullable
              as String,
      phoneNumber: null == phoneNumber
          ? _value.phoneNumber
          : phoneNumber // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$CreateUserRequestImplCopyWith<$Res> implements $CreateUserRequestCopyWith<$Res> {
  factory _$$CreateUserRequestImplCopyWith(_$CreateUserRequestImpl value, $Res Function(_$CreateUserRequestImpl) then) =
      __$$CreateUserRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'first_name') String firstName,
      @JsonKey(name: 'last_name') String lastName,
      @JsonKey(name: 'password') String password,
      @JsonKey(name: 'username') String userName,
      @JsonKey(name: 'd_o_b') String dOB,
      @JsonKey(name: 'phone_number') String phoneNumber});
}

/// @nodoc
class __$$CreateUserRequestImplCopyWithImpl<$Res> extends _$CreateUserRequestCopyWithImpl<$Res, _$CreateUserRequestImpl>
    implements _$$CreateUserRequestImplCopyWith<$Res> {
  __$$CreateUserRequestImplCopyWithImpl(_$CreateUserRequestImpl _value, $Res Function(_$CreateUserRequestImpl) _then) : super(_value, _then);

  /// Create a copy of CreateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? firstName = null,
    Object? lastName = null,
    Object? password = null,
    Object? userName = null,
    Object? dOB = null,
    Object? phoneNumber = null,
  }) {
    return _then(_$CreateUserRequestImpl(
      firstName: null == firstName
          ? _value.firstName
          : firstName // ignore: cast_nullable_to_non_nullable
              as String,
      lastName: null == lastName
          ? _value.lastName
          : lastName // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
      userName: null == userName
          ? _value.userName
          : userName // ignore: cast_nullable_to_non_nullable
              as String,
      dOB: null == dOB
          ? _value.dOB
          : dOB // ignore: cast_nullable_to_non_nullable
              as String,
      phoneNumber: null == phoneNumber
          ? _value.phoneNumber
          : phoneNumber // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CreateUserRequestImpl implements _CreateUserRequest {
  const _$CreateUserRequestImpl(
      {@JsonKey(name: 'first_name') required this.firstName,
      @JsonKey(name: 'last_name') required this.lastName,
      @JsonKey(name: 'password') required this.password,
      @JsonKey(name: 'username') required this.userName,
      @JsonKey(name: 'd_o_b') required this.dOB,
      @JsonKey(name: 'phone_number') required this.phoneNumber});

  factory _$CreateUserRequestImpl.fromJson(Map<String, dynamic> json) => _$$CreateUserRequestImplFromJson(json);

  @override
  @JsonKey(name: 'first_name')
  final String firstName;
  @override
  @JsonKey(name: 'last_name')
  final String lastName;
  @override
  @JsonKey(name: 'password')
  final String password;
  @override
  @JsonKey(name: 'username')
  final String userName;
  @override
  @JsonKey(name: 'd_o_b')
  final String dOB;
  @override
  @JsonKey(name: 'phone_number')
  final String phoneNumber;

  @override
  String toString() {
    return 'CreateUserRequest(firstName: $firstName, lastName: $lastName, password: $password, userName: $userName, dOB: $dOB, phoneNumber: $phoneNumber)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateUserRequestImpl &&
            (identical(other.firstName, firstName) || other.firstName == firstName) &&
            (identical(other.lastName, lastName) || other.lastName == lastName) &&
            (identical(other.password, password) || other.password == password) &&
            (identical(other.userName, userName) || other.userName == userName) &&
            (identical(other.dOB, dOB) || other.dOB == dOB) &&
            (identical(other.phoneNumber, phoneNumber) || other.phoneNumber == phoneNumber));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, firstName, lastName, password, userName, dOB, phoneNumber);

  /// Create a copy of CreateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CreateUserRequestImplCopyWith<_$CreateUserRequestImpl> get copyWith => __$$CreateUserRequestImplCopyWithImpl<_$CreateUserRequestImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$CreateUserRequestImplToJson(
      this,
    );
  }
}

abstract class _CreateUserRequest implements CreateUserRequest {
  const factory _CreateUserRequest(
      {@JsonKey(name: 'first_name') required final String firstName,
      @JsonKey(name: 'last_name') required final String lastName,
      @JsonKey(name: 'password') required final String password,
      @JsonKey(name: 'username') required final String userName,
      @JsonKey(name: 'd_o_b') required final String dOB,
      @JsonKey(name: 'phone_number') required final String phoneNumber}) = _$CreateUserRequestImpl;

  factory _CreateUserRequest.fromJson(Map<String, dynamic> json) = _$CreateUserRequestImpl.fromJson;

  @override
  @JsonKey(name: 'first_name')
  String get firstName;
  @override
  @JsonKey(name: 'last_name')
  String get lastName;
  @override
  @JsonKey(name: 'password')
  String get password;
  @override
  @JsonKey(name: 'username')
  String get userName;
  @override
  @JsonKey(name: 'd_o_b')
  String get dOB;
  @override
  @JsonKey(name: 'phone_number')
  String get phoneNumber;

  /// Create a copy of CreateUserRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CreateUserRequestImplCopyWith<_$CreateUserRequestImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/app_style/text_style_constants.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';

TextStyle whiteFontSize23Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 23.sp,
  );
}

TextStyle whiteFontSize24Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 24.sp,
  );
}

TextStyle whiteFontSize28W500() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w500,
    fontSize: 28.sp,
  );
}

TextStyle greyTextColor12W400() {
  return TextStyle(
    color: const Color(0xFFE1E3E3),
    fontWeight: FontWeight.w500,
    fontSize: 12.sp,
  );
}

TextStyle whiteFontSize21Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 21.sp,
  );
}

TextStyle whiteFontSize23Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 23.sp,
  );
}

TextStyle blackFontSize23Regular() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.normal,
    fontSize: 23.sp,
  );
}

TextStyle blackFontSize24W700() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.w700,
    fontSize: 24.sp,
  );
}

TextStyle whiteFontSize32Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 32.sp,
  );
}

TextStyle whiteFontSize18Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w500,
    fontSize: 18.sp,
  );
}

TextStyle whiteFontSize18Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w700,
    fontSize: 18.sp,
  );
}

TextStyle whiteFontSize13Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w500,
    fontSize: 13.sp,
  );
}

TextStyle whiteFontSize13Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 13.sp,
  );
}

TextStyle whiteFontSize14W500() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w500,
    fontSize: 14.sp,
  );
}

TextStyle whiteFontSize14Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 14.sp,
  );
}

TextStyle whiteFontSize15Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 15.sp,
  );
}

TextStyle whiteFontSize16Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 16.sp,
  );
}

TextStyle blackFontSize16Regular() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.normal,
    fontSize: 16.sp,
  );
}

TextStyle blackFontSize12W600() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.w600,
    fontSize: 12.sp,
  );
}

TextStyle blackFontSize13Bold() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.w700,
    fontSize: 13.sp,
  );
}

TextStyle blackFontSize14Bold() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.w700,
    fontSize: 14.sp,
  );
}

TextStyle blackFontSize15Bold() {
  return TextStyle(
    color: scaffoldBackgroundColor,
    fontWeight: FontWeight.w700,
    fontSize: 15.sp,
  );
}

TextStyle whiteFontSize16W600() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w600,
    fontSize: 16.sp,
  );
}

TextStyle whiteFontSize16Bold() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.bold,
    fontSize: 16.sp,
  );
}

TextStyle whiteFontSize15Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 15.sp,
  );
}

TextStyle whiteFontSize10Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 10.sp,
  );
}

TextStyle whiteFontSize12Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 12.sp,
  );
}

TextStyle whiteFontSize12W700() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w700,
    fontSize: 12.sp,
  );
}

TextStyle primaryAppColorFontSize23Regular() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.normal,
    fontSize: 23.sp,
  );
}

TextStyle primaryAppColorFontSize24Bold() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.bold,
    fontSize: 24.sp,
  );
}

TextStyle primaryAppColorFontSize16Regular() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.normal,
    fontSize: 16.sp,
  );
}

TextStyle primaryAppColorFontSize16Bold() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.bold,
    fontSize: 16.sp,
  );
}

TextStyle primaryAppColorFontSize14W600() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.w600,
    fontSize: 14.sp,
  );
}

TextStyle primaryAppColorFontSize15SemiBold() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.w500,
    fontSize: 15.sp,
  );
}

TextStyle primaryAppColorFontSize15Regular() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.normal,
    fontSize: 15.sp,
  );
}

TextStyle primaryAppColorFontSize13Regular() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.normal,
    fontSize: 13.sp,
  );
}

TextStyle primaryAppColorFontSize12W500() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.w500,
    fontSize: 12.sp,
  );
}

TextStyle primaryAppColorFontSize12W700() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.w700,
    fontSize: 12.sp,
  );
}

TextStyle secondaryLabelColorFontSize15Regular() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.normal,
    fontSize: 15.sp,
  );
}

TextStyle secondaryLabelColorFontSize16Regular() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.normal,
    fontSize: 16.sp,
  );
}

TextStyle secondaryLabelColorFontSize15W700() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w700,
    fontSize: 15.sp,
  );
}

TextStyle secondaryLabelColorFontSize16W600() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w600,
    fontSize: 16.sp,
  );
}

TextStyle primaryAppColorFontSize16W600() {
  return TextStyle(
    color: primaryAppColor,
    fontWeight: FontWeight.w600,
    fontSize: 16.sp,
  );
}

TextStyle secondaryLabelColorFontSize14Regular() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w400,
    fontSize: 14.sp,
  );
}

TextStyle greyButtonTextColorFontSize15Regular() {
  return TextStyle(
    color: greyButtonTextColor,
    fontWeight: FontWeight.normal,
    fontSize: 15.sp,
  );
}

TextStyle greyButtonTextColorFontSize15Bold() {
  return TextStyle(
    color: greyButtonTextColor,
    fontWeight: FontWeight.bold,
    fontSize: 15.sp,
  );
}

TextStyle secondaryLabelColorFontSize13Regular() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.normal,
    fontSize: 13.sp,
  );
}

TextStyle secondaryLabelColorFontSize13SemiBold() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w500,
    fontSize: 13.sp,
  );
}

TextStyle secondaryLabelColorFontSize14W500() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w500,
    fontSize: 14.sp,
  );
}

TextStyle secondaryLabelColorFontSize12W500() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w500,
    fontSize: 12.sp,
  );
}

TextStyle secondaryLabelColorFontSize12W400() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w400,
    fontSize: 12.sp,
  );
}

TextStyle secondaryLabelColorFontSize10W400() {
  return TextStyle(
    color: secondaryLabelColor,
    fontWeight: FontWeight.w400,
    fontSize: 10.sp,
  );
}

TextStyle whiteColorFontSize12Regular() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.normal,
    fontSize: 12.sp,
  );
}

TextStyle whiteColorFontSize15W600() {
  return TextStyle(
    color: whiteColor,
    fontWeight: FontWeight.w600,
    fontSize: 15.sp,
  );
}

TextStyle greyButtonTextColorFontSize13Regular() {
  return TextStyle(
    color: greyButtonTextColor,
    fontWeight: FontWeight.normal,
    fontSize: 13.sp,
  );
}

TextStyle hintTextTextStyle() {
  return TextStyle(
    color: const Color(0xFFC8C8C8),
    fontSize: 16.sp,
  );
}

TextStyle aboutMeLabelTextStyle() => TextStyle(
      fontWeight: FontWeight.w400,
      fontSize: 15.sp,
      color: onboardingScreenGreyTextColor,
    );

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'core_insights_feedback_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

CoreInsightsFeedbackRequest _$CoreInsightsFeedbackRequestFromJson(Map<String, dynamic> json) {
  return _CoreInsightsFeedbackRequest.fromJson(json);
}

/// @nodoc
mixin _$CoreInsightsFeedbackRequest {
  @JsonKey(name: 'user_id')
  int get userId => throw _privateConstructorUsedError;
  @JsonKey(name: 'defined_primary')
  String get definedPrimary => throw _privateConstructorUsedError;
  @JsonKey(name: 'defined_secondary')
  String get definedSecondary => throw _privateConstructorUsedError;
  @JsonKey(name: 'validation_primary')
  String get validationPrimary => throw _privateConstructorUsedError;

  /// Serializes this CoreInsightsFeedbackRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of CoreInsightsFeedbackRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CoreInsightsFeedbackRequestCopyWith<CoreInsightsFeedbackRequest> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CoreInsightsFeedbackRequestCopyWith<$Res> {
  factory $CoreInsightsFeedbackRequestCopyWith(CoreInsightsFeedbackRequest value, $Res Function(CoreInsightsFeedbackRequest) then) =
      _$CoreInsightsFeedbackRequestCopyWithImpl<$Res, CoreInsightsFeedbackRequest>;
  @useResult
  $Res call(
      {@JsonKey(name: 'user_id') int userId,
      @JsonKey(name: 'defined_primary') String definedPrimary,
      @JsonKey(name: 'defined_secondary') String definedSecondary,
      @JsonKey(name: 'validation_primary') String validationPrimary});
}

/// @nodoc
class _$CoreInsightsFeedbackRequestCopyWithImpl<$Res, $Val extends CoreInsightsFeedbackRequest> implements $CoreInsightsFeedbackRequestCopyWith<$Res> {
  _$CoreInsightsFeedbackRequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of CoreInsightsFeedbackRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? definedPrimary = null,
    Object? definedSecondary = null,
    Object? validationPrimary = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      definedPrimary: null == definedPrimary
          ? _value.definedPrimary
          : definedPrimary // ignore: cast_nullable_to_non_nullable
              as String,
      definedSecondary: null == definedSecondary
          ? _value.definedSecondary
          : definedSecondary // ignore: cast_nullable_to_non_nullable
              as String,
      validationPrimary: null == validationPrimary
          ? _value.validationPrimary
          : validationPrimary // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$CoreInsightsFeedbackRequestImplCopyWith<$Res> implements $CoreInsightsFeedbackRequestCopyWith<$Res> {
  factory _$$CoreInsightsFeedbackRequestImplCopyWith(_$CoreInsightsFeedbackRequestImpl value, $Res Function(_$CoreInsightsFeedbackRequestImpl) then) =
      __$$CoreInsightsFeedbackRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call(
      {@JsonKey(name: 'user_id') int userId,
      @JsonKey(name: 'defined_primary') String definedPrimary,
      @JsonKey(name: 'defined_secondary') String definedSecondary,
      @JsonKey(name: 'validation_primary') String validationPrimary});
}

/// @nodoc
class __$$CoreInsightsFeedbackRequestImplCopyWithImpl<$Res> extends _$CoreInsightsFeedbackRequestCopyWithImpl<$Res, _$CoreInsightsFeedbackRequestImpl>
    implements _$$CoreInsightsFeedbackRequestImplCopyWith<$Res> {
  __$$CoreInsightsFeedbackRequestImplCopyWithImpl(_$CoreInsightsFeedbackRequestImpl _value, $Res Function(_$CoreInsightsFeedbackRequestImpl) _then)
      : super(_value, _then);

  /// Create a copy of CoreInsightsFeedbackRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? definedPrimary = null,
    Object? definedSecondary = null,
    Object? validationPrimary = null,
  }) {
    return _then(_$CoreInsightsFeedbackRequestImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      definedPrimary: null == definedPrimary
          ? _value.definedPrimary
          : definedPrimary // ignore: cast_nullable_to_non_nullable
              as String,
      definedSecondary: null == definedSecondary
          ? _value.definedSecondary
          : definedSecondary // ignore: cast_nullable_to_non_nullable
              as String,
      validationPrimary: null == validationPrimary
          ? _value.validationPrimary
          : validationPrimary // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CoreInsightsFeedbackRequestImpl implements _CoreInsightsFeedbackRequest {
  const _$CoreInsightsFeedbackRequestImpl(
      {@JsonKey(name: 'user_id') required this.userId,
      @JsonKey(name: 'defined_primary') required this.definedPrimary,
      @JsonKey(name: 'defined_secondary') required this.definedSecondary,
      @JsonKey(name: 'validation_primary') required this.validationPrimary});

  factory _$CoreInsightsFeedbackRequestImpl.fromJson(Map<String, dynamic> json) => _$$CoreInsightsFeedbackRequestImplFromJson(json);

  @override
  @JsonKey(name: 'user_id')
  final int userId;
  @override
  @JsonKey(name: 'defined_primary')
  final String definedPrimary;
  @override
  @JsonKey(name: 'defined_secondary')
  final String definedSecondary;
  @override
  @JsonKey(name: 'validation_primary')
  final String validationPrimary;

  @override
  String toString() {
    return 'CoreInsightsFeedbackRequest(userId: $userId, definedPrimary: $definedPrimary, definedSecondary: $definedSecondary, validationPrimary: $validationPrimary)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CoreInsightsFeedbackRequestImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.definedPrimary, definedPrimary) || other.definedPrimary == definedPrimary) &&
            (identical(other.definedSecondary, definedSecondary) || other.definedSecondary == definedSecondary) &&
            (identical(other.validationPrimary, validationPrimary) || other.validationPrimary == validationPrimary));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, userId, definedPrimary, definedSecondary, validationPrimary);

  /// Create a copy of CoreInsightsFeedbackRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CoreInsightsFeedbackRequestImplCopyWith<_$CoreInsightsFeedbackRequestImpl> get copyWith =>
      __$$CoreInsightsFeedbackRequestImplCopyWithImpl<_$CoreInsightsFeedbackRequestImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$CoreInsightsFeedbackRequestImplToJson(
      this,
    );
  }
}

abstract class _CoreInsightsFeedbackRequest implements CoreInsightsFeedbackRequest {
  const factory _CoreInsightsFeedbackRequest(
      {@JsonKey(name: 'user_id') required final int userId,
      @JsonKey(name: 'defined_primary') required final String definedPrimary,
      @JsonKey(name: 'defined_secondary') required final String definedSecondary,
      @JsonKey(name: 'validation_primary') required final String validationPrimary}) = _$CoreInsightsFeedbackRequestImpl;

  factory _CoreInsightsFeedbackRequest.fromJson(Map<String, dynamic> json) = _$CoreInsightsFeedbackRequestImpl.fromJson;

  @override
  @JsonKey(name: 'user_id')
  int get userId;
  @override
  @JsonKey(name: 'defined_primary')
  String get definedPrimary;
  @override
  @JsonKey(name: 'defined_secondary')
  String get definedSecondary;
  @override
  @JsonKey(name: 'validation_primary')
  String get validationPrimary;

  /// Create a copy of CoreInsightsFeedbackRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CoreInsightsFeedbackRequestImplCopyWith<_$CoreInsightsFeedbackRequestImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/router.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/home_screen.dart';
import 'package:peer_circle_app/core/common_widgets/splash_screen.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/features/auth/views/screens/get_started_or_login_welcome_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_in_flow/sign_in_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/birthday_input_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/change_username_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/create_password_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/name_input_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/onboarding_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/phone_number_input_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/sign_up_success.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/signup_verification_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/welcome_signup_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/welcome_signin_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/screens/avatar_upload_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/screens/peer_snapshot_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/views/screens/bio_input_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/culture_drag_drop_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/drag_drop_guide_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/neurodiversity_drag_drop_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/orientation_drag_drop_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/overview_drag_drop_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/pronoun_drag_drop_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/views/screens/emotion_qa_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/screens/fav_colour_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/hair/views/screens/hair_profile_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/screens/make_up_profile_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/views/screens/profile_completion_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/views/screens/personality_card_swipe_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/views/screens/skin_profile_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/social_vibe/views/screens/social_vibe_screen.dart';
import 'package:peer_circle_app/router/router_notifier.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:talker_flutter/talker_flutter.dart';
part 'router.g.dart';

final _key = GlobalKey<NavigatorState>();

@Riverpod(keepAlive: true)
GoRouter router(Ref ref) {
  final notifier = ref.watch(routerNotifierProvider.notifier);
  return GoRouter(
    navigatorKey: _key,
    debugLogDiagnostics: true,
    observers: [TalkerRouteObserver(talker)],
    refreshListenable: notifier,
    initialLocation: '/${SplashScreen.routeName}',
    redirect: notifier.redirect,
    routes: [
      GoRoute(
        path: HomeScreen.routeName.slashBefore,
        name: HomeScreen.routeName,
        builder: HomeScreen.fromRoute,
      ),
      GoRoute(
        path: SplashScreen.routeName.slashBefore,
        name: SplashScreen.routeName,
        builder: SplashScreen.fromRoute,
      ),
      GoRoute(
        path: '/auth',
        routes: [
          // ----------------- Sign in flow -----------------
          GoRoute(
            path: SignInScreen.routeName,
            name: SignInScreen.routeName,
            builder: SignInScreen.fromRoute,
          ),
          // ----------------- Sign up flow -----------------
          GoRoute(
            path: GetStartedOrLoginWelcomeScreen.routeName,
            name: GetStartedOrLoginWelcomeScreen.routeName,
            builder: GetStartedOrLoginWelcomeScreen.fromRoute,
          ),
          // Welcome Sign in Screen
          GoRoute(
            path: WelcomeSignInScreen.routeName,
            name: WelcomeSignInScreen.routeName,
            builder: WelcomeSignInScreen.fromRoute,
          ),
          // Onboarding Screen
          GoRoute(
            path: OnboardingScreen.routeName,
            name: OnboardingScreen.routeName,
            builder: OnboardingScreen.fromRoute,
          ),
          // Welcome Sign up
          GoRoute(
            path: WelcomeSignUpScreen.routeName,
            name: WelcomeSignUpScreen.routeName,
            builder: WelcomeSignUpScreen.fromRoute,
            routes: [
              GoRoute(
                path: NameInputScreen.routeName,
                name: NameInputScreen.routeName,
                builder: NameInputScreen.fromRoute,
              ),
              GoRoute(
                path: ChangeUserNameScreen.routeName,
                name: ChangeUserNameScreen.routeName,
                builder: ChangeUserNameScreen.fromRoute,
              ),
              GoRoute(
                path: BirthdayInputScreen.routeName,
                name: BirthdayInputScreen.routeName,
                builder: BirthdayInputScreen.fromRoute,
              ),
              GoRoute(
                path: CreatePasswordScreen.routeName,
                name: CreatePasswordScreen.routeName,
                builder: CreatePasswordScreen.fromRoute,
              ),
              GoRoute(
                path: PhoneNumberInputScreen.routeName,
                name: PhoneNumberInputScreen.routeName,
                builder: PhoneNumberInputScreen.fromRoute,
              ),
              GoRoute(
                path: SignUpVerificationScreen.routeName,
                name: SignUpVerificationScreen.routeName,
                builder: SignUpVerificationScreen.fromRoute,
              ),
              GoRoute(
                path: SignUpSuccessScreen.routeName,
                name: SignUpSuccessScreen.routeName,
                builder: SignUpSuccessScreen.fromRoute,
              ),
            ],
          ),
        ],
        // if user go to /auth redirect to /auth/get-started-screen
        redirect: (_, state) {
          if (state.uri.toString() == '/auth') {
            return '/auth/${GetStartedOrLoginWelcomeScreen.routeName}';
          }
          return null;
        },
      ),
      GoRoute(
        path: PeerSnapshotScreen.routeName.slashBefore,
        name: PeerSnapshotScreen.routeName,
        builder: PeerSnapshotScreen.fromRoute,
        routes: [
          GoRoute(
            path: AvatarUploadScreen.routeName,
            name: AvatarUploadScreen.routeName,
            builder: AvatarUploadScreen.fromRoute,
          ),
          GoRoute(
            path: FavColourScreen.routeName,
            name: FavColourScreen.routeName,
            builder: FavColourScreen.fromRoute,
          ),
          GoRoute(
            path: DragDropGuideScreen.routeName,
            name: DragDropGuideScreen.routeName,
            builder: DragDropGuideScreen.fromRoute,
          ),
          GoRoute(
            path: PronounDragDropScreen.routeName,
            name: PronounDragDropScreen.routeName,
            builder: PronounDragDropScreen.fromRoute,
          ),
          GoRoute(
            path: OrientationDragDropScreen.routeName,
            name: OrientationDragDropScreen.routeName,
            builder: OrientationDragDropScreen.fromRoute,
          ),
          GoRoute(
            path: NeurodiversityDragDropScreen.routeName,
            name: NeurodiversityDragDropScreen.routeName,
            builder: NeurodiversityDragDropScreen.fromRoute,
          ),
          GoRoute(
            path: CultureDragDropScreen.routeName,
            name: CultureDragDropScreen.routeName,
            builder: CultureDragDropScreen.fromRoute,
          ),
          GoRoute(
            path: OverviewDragDropScreen.routeName,
            name: OverviewDragDropScreen.routeName,
            builder: OverviewDragDropScreen.fromRoute,
          ),
        ],
      ),
      // Emotion Quiz
      GoRoute(
        path: EmotionalQAScreen.routeName.slashBefore,
        name: EmotionalQAScreen.routeName,
        builder: EmotionalQAScreen.fromRoute,
      ),
      GoRoute(
        path: BioInputScreen.routeName.slashBefore,
        name: BioInputScreen.routeName,
        builder: BioInputScreen.fromRoute,
      ),
      GoRoute(
        path: ProfileCompletionScreen.routeName.slashBefore,
        name: ProfileCompletionScreen.routeName,
        builder: ProfileCompletionScreen.fromRoute,
      ),
      GoRoute(
        path: PersonalityCardSwipeScreen.routeName.slashBefore,
        name: PersonalityCardSwipeScreen.routeName,
        builder: PersonalityCardSwipeScreen.fromRoute,
      ),
      GoRoute(
        path: SocialVibeScreen.routeName.slashBefore,
        name: SocialVibeScreen.routeName,
        builder: SocialVibeScreen.fromRoute,
      ),
      GoRoute(
        path: SkinProfileScreen.routeName.slashBefore,
        name: SkinProfileScreen.routeName,
        builder: SkinProfileScreen.fromRoute,
      ),
      GoRoute(
        path: HairProfileScreen.routeName.slashBefore,
        name: HairProfileScreen.routeName,
        builder: HairProfileScreen.fromRoute,
      ),
      GoRoute(
        path: MakeUpProfileScreen.routeName.slashBefore,
        name: MakeUpProfileScreen.routeName,
        builder: MakeUpProfileScreen.fromRoute,
      ),
    ],
  );
}

extension SlashBefore on String {
  String get slashBefore => '/$this';
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/login_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'login_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

LoginResponse _$LoginResponseFromJson(Map<String, dynamic> json) {
  return _LoginResponse.fromJson(json);
}

/// @nodoc
mixin _$LoginResponse {
  bool get success => throw _privateConstructorUsedError;
  @JsonKey(name: 'user_id')
  int get userId => throw _privateConstructorUsedError;
  int get status => throw _privateConstructorUsedError;
  String get firstname => throw _privateConstructorUsedError;
  String get lastname => throw _privateConstructorUsedError;

  /// Serializes this LoginResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of LoginResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $LoginResponseCopyWith<LoginResponse> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $LoginResponseCopyWith<$Res> {
  factory $LoginResponseCopyWith(LoginResponse value, $Res Function(LoginResponse) then) = _$LoginResponseCopyWithImpl<$Res, LoginResponse>;
  @useResult
  $Res call({bool success, @JsonKey(name: 'user_id') int userId, int status, String firstname, String lastname});
}

/// @nodoc
class _$LoginResponseCopyWithImpl<$Res, $Val extends LoginResponse> implements $LoginResponseCopyWith<$Res> {
  _$LoginResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of LoginResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? success = null,
    Object? userId = null,
    Object? status = null,
    Object? firstname = null,
    Object? lastname = null,
  }) {
    return _then(_value.copyWith(
      success: null == success
          ? _value.success
          : success // ignore: cast_nullable_to_non_nullable
              as bool,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
      firstname: null == firstname
          ? _value.firstname
          : firstname // ignore: cast_nullable_to_non_nullable
              as String,
      lastname: null == lastname
          ? _value.lastname
          : lastname // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$LoginResponseImplCopyWith<$Res> implements $LoginResponseCopyWith<$Res> {
  factory _$$LoginResponseImplCopyWith(_$LoginResponseImpl value, $Res Function(_$LoginResponseImpl) then) = __$$LoginResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({bool success, @JsonKey(name: 'user_id') int userId, int status, String firstname, String lastname});
}

/// @nodoc
class __$$LoginResponseImplCopyWithImpl<$Res> extends _$LoginResponseCopyWithImpl<$Res, _$LoginResponseImpl> implements _$$LoginResponseImplCopyWith<$Res> {
  __$$LoginResponseImplCopyWithImpl(_$LoginResponseImpl _value, $Res Function(_$LoginResponseImpl) _then) : super(_value, _then);

  /// Create a copy of LoginResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? success = null,
    Object? userId = null,
    Object? status = null,
    Object? firstname = null,
    Object? lastname = null,
  }) {
    return _then(_$LoginResponseImpl(
      success: null == success
          ? _value.success
          : success // ignore: cast_nullable_to_non_nullable
              as bool,
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
      firstname: null == firstname
          ? _value.firstname
          : firstname // ignore: cast_nullable_to_non_nullable
              as String,
      lastname: null == lastname
          ? _value.lastname
          : lastname // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$LoginResponseImpl implements _LoginResponse {
  const _$LoginResponseImpl(
      {required this.success, @JsonKey(name: 'user_id') required this.userId, required this.status, required this.firstname, required this.lastname});

  factory _$LoginResponseImpl.fromJson(Map<String, dynamic> json) => _$$LoginResponseImplFromJson(json);

  @override
  final bool success;
  @override
  @JsonKey(name: 'user_id')
  final int userId;
  @override
  final int status;
  @override
  final String firstname;
  @override
  final String lastname;

  @override
  String toString() {
    return 'LoginResponse(success: $success, userId: $userId, status: $status, firstname: $firstname, lastname: $lastname)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LoginResponseImpl &&
            (identical(other.success, success) || other.success == success) &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.status, status) || other.status == status) &&
            (identical(other.firstname, firstname) || other.firstname == firstname) &&
            (identical(other.lastname, lastname) || other.lastname == lastname));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, success, userId, status, firstname, lastname);

  /// Create a copy of LoginResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$LoginResponseImplCopyWith<_$LoginResponseImpl> get copyWith => __$$LoginResponseImplCopyWithImpl<_$LoginResponseImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$LoginResponseImplToJson(
      this,
    );
  }
}

abstract class _LoginResponse implements LoginResponse {
  const factory _LoginResponse(
      {required final bool success,
      @JsonKey(name: 'user_id') required final int userId,
      required final int status,
      required final String firstname,
      required final String lastname}) = _$LoginResponseImpl;

  factory _LoginResponse.fromJson(Map<String, dynamic> json) = _$LoginResponseImpl.fromJson;

  @override
  bool get success;
  @override
  @JsonKey(name: 'user_id')
  int get userId;
  @override
  int get status;
  @override
  String get firstname;
  @override
  String get lastname;

  /// Create a copy of LoginResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$LoginResponseImplCopyWith<_$LoginResponseImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/user.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'user.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

User _$UserFromJson(Map<String, dynamic> json) {
  return _User.fromJson(json);
}

/// @nodoc
mixin _$User {
  int get id => throw _privateConstructorUsedError;
  String get userName => throw _privateConstructorUsedError;
  String get firstName => throw _privateConstructorUsedError;
  String get lastName => throw _privateConstructorUsedError;

  /// Serializes this User to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $UserCopyWith<User> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $UserCopyWith<$Res> {
  factory $UserCopyWith(User value, $Res Function(User) then) = _$UserCopyWithImpl<$Res, User>;
  @useResult
  $Res call({int id, String userName, String firstName, String lastName});
}

/// @nodoc
class _$UserCopyWithImpl<$Res, $Val extends User> implements $UserCopyWith<$Res> {
  _$UserCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? userName = null,
    Object? firstName = null,
    Object? lastName = null,
  }) {
    return _then(_value.copyWith(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as int,
      userName: null == userName
          ? _value.userName
          : userName // ignore: cast_nullable_to_non_nullable
              as String,
      firstName: null == firstName
          ? _value.firstName
          : firstName // ignore: cast_nullable_to_non_nullable
              as String,
      lastName: null == lastName
          ? _value.lastName
          : lastName // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$UserImplCopyWith<$Res> implements $UserCopyWith<$Res> {
  factory _$$UserImplCopyWith(_$UserImpl value, $Res Function(_$UserImpl) then) = __$$UserImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int id, String userName, String firstName, String lastName});
}

/// @nodoc
class __$$UserImplCopyWithImpl<$Res> extends _$UserCopyWithImpl<$Res, _$UserImpl> implements _$$UserImplCopyWith<$Res> {
  __$$UserImplCopyWithImpl(_$UserImpl _value, $Res Function(_$UserImpl) _then) : super(_value, _then);

  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? id = null,
    Object? userName = null,
    Object? firstName = null,
    Object? lastName = null,
  }) {
    return _then(_$UserImpl(
      id: null == id
          ? _value.id
          : id // ignore: cast_nullable_to_non_nullable
              as int,
      userName: null == userName
          ? _value.userName
          : userName // ignore: cast_nullable_to_non_nullable
              as String,
      firstName: null == firstName
          ? _value.firstName
          : firstName // ignore: cast_nullable_to_non_nullable
              as String,
      lastName: null == lastName
          ? _value.lastName
          : lastName // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$UserImpl extends _User {
  const _$UserImpl({required this.id, required this.userName, required this.firstName, required this.lastName}) : super._();

  factory _$UserImpl.fromJson(Map<String, dynamic> json) => _$$UserImplFromJson(json);

  @override
  final int id;
  @override
  final String userName;
  @override
  final String firstName;
  @override
  final String lastName;

  @override
  String toString() {
    return 'User(id: $id, userName: $userName, firstName: $firstName, lastName: $lastName)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UserImpl &&
            (identical(other.id, id) || other.id == id) &&
            (identical(other.userName, userName) || other.userName == userName) &&
            (identical(other.firstName, firstName) || other.firstName == firstName) &&
            (identical(other.lastName, lastName) || other.lastName == lastName));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, id, userName, firstName, lastName);

  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$UserImplCopyWith<_$UserImpl> get copyWith => __$$UserImplCopyWithImpl<_$UserImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$UserImplToJson(
      this,
    );
  }
}

abstract class _User extends User {
  const factory _User({required final int id, required final String userName, required final String firstName, required final String lastName}) = _$UserImpl;
  const _User._() : super._();

  factory _User.fromJson(Map<String, dynamic> json) = _$UserImpl.fromJson;

  @override
  int get id;
  @override
  String get userName;
  @override
  String get firstName;
  @override
  String get lastName;

  /// Create a copy of User
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$UserImplCopyWith<_$UserImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/make_up/views/screens/make_up_profile_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/widgets/undertone_tip_sheet.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart';

class MakeUpProfileScreen extends HookConsumerWidget {
  const MakeUpProfileScreen({super.key});
  const MakeUpProfileScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'makeup-profile';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final selectedUndertone = useState<Undertone?>(null);
    final selectedMakeupColor = useState<Color?>(null);
    final undertoneVisible = useState<bool>(true);
    final makeupVisible = useState<bool>(true);

    return Scaffold(
      appBar: CustomAppBar(
        trailing: [
          TextButton(
            onPressed: () {},
            child: const Text(
              'Skip',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 24.h),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Your make up',
              style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.bold, color: Colors.white),
            ),
            8.verticalSpace,
            Text(
              'Find Peers who use similar make up colours.\nTap \u{1F441} icon to make private on your profile.',
              style: TextStyle(fontSize: 14.sp, color: Colors.grey),
            ),
            8.verticalSpace,
            const Divider(),
            8.verticalSpace,

            // Undertone
            Row(
              children: [
                Text('Undertone', style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white)),
                IconButton(
                  icon: Icon(
                    undertoneVisible.value ? Icons.visibility : Icons.visibility_off,
                    size: 18,
                    color: undertoneVisible.value ? Colors.white : Colors.grey,
                  ),
                  onPressed: () => undertoneVisible.value = !undertoneVisible.value,
                ),
              ],
            ),
            Row(
              children: [
                Text('Don’t know ', style: TextStyle(fontSize: 14.sp, color: Colors.grey)),
                TextButton(
                  style: TextButton.styleFrom(
                    padding: EdgeInsets.zero,
                    minimumSize: const Size(50, 30),
                    tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    alignment: Alignment.centerLeft,
                  ),
                  onPressed: () {
                    showModalBottomSheet(
                      context: context,
                      isScrollControlled: true,
                      backgroundColor: Colors.transparent,
                      builder: (_) => UndertoneTipSheet(
                        onSelection: (Undertone? selected) {
                          if (selected != null) {
                            selectedUndertone.value = selected;
                          }
                        },
                      ),
                    );
                  },
                  child: Text(
                    'your undertone?',
                    style: TextStyle(fontSize: 14.sp, color: Colors.green, fontWeight: FontWeight.w500),
                  ),
                ),
              ],
            ),
            8.verticalSpace,
            Row(
              children: Undertone.values.map((tone) {
                final isSelected = selectedUndertone.value == tone;
                return Expanded(
                  child: Padding(
                    padding: EdgeInsets.symmetric(horizontal: 4.w),
                    child: FilterChip(
                      label: Center(
                        child: Text(
                          tone.display,
                          style: TextStyle(fontSize: 14.sp, fontWeight: FontWeight.w500, color: Colors.white),
                        ),
                      ),
                      selected: isSelected,
                      onSelected: (bool selected) {
                        selectedUndertone.value = selected ? tone : null;
                      },
                      checkmarkColor: Colors.white,
                      selectedColor: Colors.green,
                      backgroundColor: Colors.transparent,
                      shape: const StadiumBorder(side: BorderSide(color: Colors.white)),
                      showCheckmark: isSelected,
                      visualDensity: VisualDensity.compact,
                    ),
                  ),
                );
              }).toList(),
            ),

            8.verticalSpace,
            const Divider(),
            8.verticalSpace,

            // Makeup colour blocks
            Row(
              children: [
                Text('Make up colour', style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white)),
                IconButton(
                  icon: Icon(
                    makeupVisible.value ? Icons.visibility : Icons.visibility_off,
                    size: 18,
                    color: makeupVisible.value ? Colors.white : Colors.grey,
                  ),
                  onPressed: () => makeupVisible.value = !makeupVisible.value,
                ),
              ],
            ),
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    16.verticalSpace,
                    _makeupShadeGroup(context, 'Light', [
                      const Color(0xFFfdedde),
                      const Color(0xFFfaeae0),
                      const Color(0xFFe7ccad),
                    ], selectedMakeupColor),
                    16.verticalSpace,
                    _makeupShadeGroup(context, 'Medium', [
                      const Color(0xFFecc3a1),
                      const Color(0xFFf1c087),
                      const Color(0xFFedaa6e),
                    ], selectedMakeupColor),
                    16.verticalSpace,
                    _makeupShadeGroup(context, 'Light medium', [
                      const Color(0xFFdba575),
                      const Color(0xFFd69364),
                      const Color(0xFFcb9156),
                    ], selectedMakeupColor),
                    16.verticalSpace,
                    _makeupShadeGroup(context, 'Dark', [
                      const Color(0xFF925825),
                      const Color(0xFF66361e),
                      const Color(0xFF43302b),
                    ], selectedMakeupColor),
                  ],
                ),
              ),
            ),

            // Continue button
            SizedBox(
              width: double.infinity,
              child: OutlinedButton(
                onPressed: selectedUndertone.value != null && selectedMakeupColor.value != null
                    ? () {
                  // proceed
                }
                    : null,
                child: const Text('Continue'),
              ),
            ),
            12.verticalSpace,
          ],
        ),
      ),
    );
  }

  Widget _makeupShadeGroup(BuildContext context, String label, List<Color> colors, ValueNotifier<Color?> selectedColor) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: TextStyle(fontSize: 14.sp, color: Colors.white70)),
        8.verticalSpace,
        Row(
          children: colors.map((color) {
            final isSelected = selectedColor.value == color;
            return Expanded(
              child: GestureDetector(
                onTap: () {
                  if (isSelected) {
                    selectedColor.value = null;
                  } else {
                    selectedColor.value = color;
                  }
                },
                child: Container(
                  height: 40.h,
                  margin: EdgeInsets.symmetric(horizontal: 4.w),
                  decoration: BoxDecoration(
                    color: color,
                    borderRadius: BorderRadius.circular(20.r),
                    border: isSelected ? Border.all(color: context.colorScheme.primary, width: 3) : null,
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/views/screens/avatar_upload_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/auth/views/widgets/name_and_username.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/controllers/avatar_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/widgets/avatar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/screens/fav_colour_screen.dart';

class AvatarUploadScreen extends HookConsumerWidget {
  const AvatarUploadScreen({super.key});
  const AvatarUploadScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'avatar-upload';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final avatarState = ref.watch(avatarControllerProvider);
    final curUser = ref.watch(authControllerProvider).valueOrNull;
    final showProgress = avatarState.pickedFile != null;
    final preferReal = useState<bool?>(null);
    useEffect(() {
      if (avatarState.uploadState.isLoading && preferReal.value == null) {
        preferReal.value = true;
      }
      if (avatarState.uploadState.hasError) {
        Future(() {
          if (!context.mounted) return;
          context.showTopSnackBarError('Upload avatar failed. Please try again');
        });
      }
      return;
    }, [avatarState]);

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: kDefaultScaffoldPadding(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            32.verticalSpace,
            Text.rich(
              TextSpan(
                text: 'To express the ',
                style: TextStyle(fontSize: 24.sp, color: Colors.white, fontWeight: FontWeight.bold),
                children: [
                  TextSpan(
                    text: 'Real Me',
                    style: TextStyle(color: context.colorScheme.primary),
                  ),
                  const TextSpan(text: ",\nI'd tap to...", style: TextStyle(fontStyle: FontStyle.italic, fontWeight: FontWeight.normal)),
                ],
              ),
              textAlign: TextAlign.center,
            ),
            32.verticalSpace,
            // Avatar row
            if (preferReal.value == null)
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Left: real picture (tap to upload)
                  Column(
                    children: [
                      Text(
                        'use my',
                        style: _labelStyle,
                      ),
                      Text(
                        'real picture',
                        style: _labelBoldItalicStyle,
                      ),
                      16.verticalSpace,
                      GestureDetector(
                        onTap: () async {
                          await ref.read(avatarControllerProvider.notifier).pickImage();
                          await ref.read(avatarControllerProvider.notifier).uploadAvatar();
                        },
                        child: Avatar(
                          showTextOverlay: showProgress,
                          isLoading: avatarState.uploadState.isLoading,
                          currentStep: 1,
                        ),
                      ),
                    ],
                  ),
                  Text('👈👉', style: TextStyle(fontSize: 20.sp, color: Colors.white)),
                  // Right: digital avatar placeholder
                  Column(
                    children: [
                      Text(
                        'create my',
                        style: _labelStyle,
                      ),
                      Text(
                        'digital image',
                        style: _labelBoldItalicStyle,
                      ),
                      16.verticalSpace,
                      GestureDetector(
                        onTap: () {},
                        child: const Avatar(
                          backgroundColor: Colors.amber,
                          useDigital: true,
                        ),
                      ),
                    ],
                  ),
                ],
              )
            else
              // Avatar
              GestureDetector(
                onTap: () async {
                  await ref.read(avatarControllerProvider.notifier).pickImage();
                  await ref.read(avatarControllerProvider.notifier).uploadAvatar();
                },
                child: Avatar(
                  showProgress: showProgress,
                  showTextOverlay: showProgress,
                  isLoading: avatarState.uploadState.isLoading,
                  currentStep: 1,
                ),
              ),
            16.verticalSpace,
            const NameAndUsername(),
            42.verticalSpace,
            Expanded(
              child: avatarState.uploadState.when(
                data: (_) {
                  if (avatarState.pickedFile == null) {
                    return Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        // So... avatar or pic?
                        Text.rich(
                          TextSpan(
                            text: 'So...',
                            style: TextStyle(fontSize: 24.sp, color: Colors.white),
                            children: [
                              TextSpan(
                                text: ' avatar ',
                                style: TextStyle(fontWeight: FontWeight.bold, color: context.colorScheme.primary),
                              ),
                              const TextSpan(text: 'or '),
                              TextSpan(
                                text: 'pic',
                                style: TextStyle(fontWeight: FontWeight.bold, color: context.colorScheme.primary),
                              ),
                              const TextSpan(
                                text: '?',
                                style: TextStyle(fontStyle: FontStyle.italic),
                              ),
                            ],
                          ),
                          textAlign: TextAlign.center,
                        ),
                        Text(
                          'Tap on image',
                          style: TextStyle(fontSize: 18.sp, color: Colors.grey),
                        ).animate(onPlay: (controller) => controller.repeat()).fade(duration: 500.ms).then(delay: 1000.ms).fadeOut(duration: 1000.ms),
                      ],
                    );
                  }
                  return Column(
                    children: [
                      Text('👀', style: TextStyle(fontSize: 52.sp, color: Colors.white)),
                      12.verticalSpace,
                      Text.rich(
                        const TextSpan(
                          children: [
                            TextSpan(text: 'Okay...', style: TextStyle(fontWeight: FontWeight.bold)),
                            TextSpan(text: ' we see you!', style: TextStyle(fontStyle: FontStyle.italic)),
                          ],
                        ),
                        style: TextStyle(fontSize: 24.sp, color: Colors.white),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  );
                },
                loading: () => const Column(),
                error: (err, _) => Column(
                  children: [
                    Text(
                      'Error uploading avatar: $err',
                      style: TextStyle(
                        fontSize: 18.sp,
                        fontWeight: FontWeight.w500,
                        color: context.colorScheme.error,
                      ),
                    ),
                  ],
                ),
              ),
            ),

            32.verticalSpace,
            if (avatarState.uploadState.hasValue && avatarState.pickedFile != null)
              SizedBox(
                width: double.infinity,
                child: FilledButton(
                  onPressed: () => context.goNamed(FavColourScreen.routeName),
                  child: const Text('Set My Colour'),
                ),
              ),
            12.verticalSpace,
          ],
        ),
      ),
    );
  }

  TextStyle get _labelStyle => TextStyle(
        fontSize: 16.sp,
        color: Colors.white70,
        fontWeight: FontWeight.w500,
      );
  TextStyle get _labelBoldItalicStyle => TextStyle(
        fontSize: 16.sp,
        color: Colors.white,
        fontWeight: FontWeight.bold,
        fontStyle: FontStyle.italic,
      );
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/views/ui_states/bio_state.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'bio_state.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

BioState _$BioStateFromJson(Map<String, dynamic> json) {
  return _BioState.fromJson(json);
}

/// @nodoc
mixin _$BioState {
  String? get bio => throw _privateConstructorUsedError;
  String? get archetype => throw _privateConstructorUsedError;
  IList<Insight> get insights => throw _privateConstructorUsedError;

  /// Serializes this BioState to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of BioState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $BioStateCopyWith<BioState> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $BioStateCopyWith<$Res> {
  factory $BioStateCopyWith(BioState value, $Res Function(BioState) then) =
      _$BioStateCopyWithImpl<$Res, BioState>;
  @useResult
  $Res call({String? bio, String? archetype, IList<Insight> insights});
}

/// @nodoc
class _$BioStateCopyWithImpl<$Res, $Val extends BioState>
    implements $BioStateCopyWith<$Res> {
  _$BioStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of BioState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? bio = freezed,
    Object? archetype = freezed,
    Object? insights = null,
  }) {
    return _then(_value.copyWith(
      bio: freezed == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String?,
      archetype: freezed == archetype
          ? _value.archetype
          : archetype // ignore: cast_nullable_to_non_nullable
              as String?,
      insights: null == insights
          ? _value.insights
          : insights // ignore: cast_nullable_to_non_nullable
              as IList<Insight>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$BioStateImplCopyWith<$Res>
    implements $BioStateCopyWith<$Res> {
  factory _$$BioStateImplCopyWith(
          _$BioStateImpl value, $Res Function(_$BioStateImpl) then) =
      __$$BioStateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String? bio, String? archetype, IList<Insight> insights});
}

/// @nodoc
class __$$BioStateImplCopyWithImpl<$Res>
    extends _$BioStateCopyWithImpl<$Res, _$BioStateImpl>
    implements _$$BioStateImplCopyWith<$Res> {
  __$$BioStateImplCopyWithImpl(
      _$BioStateImpl _value, $Res Function(_$BioStateImpl) _then)
      : super(_value, _then);

  /// Create a copy of BioState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? bio = freezed,
    Object? archetype = freezed,
    Object? insights = null,
  }) {
    return _then(_$BioStateImpl(
      bio: freezed == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String?,
      archetype: freezed == archetype
          ? _value.archetype
          : archetype // ignore: cast_nullable_to_non_nullable
              as String?,
      insights: null == insights
          ? _value.insights
          : insights // ignore: cast_nullable_to_non_nullable
              as IList<Insight>,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$BioStateImpl implements _BioState {
  const _$BioStateImpl(
      {this.bio, this.archetype, this.insights = const IListConst([])});

  factory _$BioStateImpl.fromJson(Map<String, dynamic> json) =>
      _$$BioStateImplFromJson(json);

  @override
  final String? bio;
  @override
  final String? archetype;
  @override
  @JsonKey()
  final IList<Insight> insights;

  @override
  String toString() {
    return 'BioState(bio: $bio, archetype: $archetype, insights: $insights)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BioStateImpl &&
            (identical(other.bio, bio) || other.bio == bio) &&
            (identical(other.archetype, archetype) ||
                other.archetype == archetype) &&
            const DeepCollectionEquality().equals(other.insights, insights));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, bio, archetype,
      const DeepCollectionEquality().hash(insights));

  /// Create a copy of BioState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$BioStateImplCopyWith<_$BioStateImpl> get copyWith =>
      __$$BioStateImplCopyWithImpl<_$BioStateImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$BioStateImplToJson(
      this,
    );
  }
}

abstract class _BioState implements BioState {
  const factory _BioState(
      {final String? bio,
      final String? archetype,
      final IList<Insight> insights}) = _$BioStateImpl;

  factory _BioState.fromJson(Map<String, dynamic> json) =
      _$BioStateImpl.fromJson;

  @override
  String? get bio;
  @override
  String? get archetype;
  @override
  IList<Insight> get insights;

  /// Create a copy of BioState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$BioStateImplCopyWith<_$BioStateImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/views/ui_states/fav_colour_state.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'fav_colour_state.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$FavColourState {
  String? get pickedColourHex => throw _privateConstructorUsedError;
  Color? get textColour => throw _privateConstructorUsedError; // Text colour for readability
  AsyncValue<void> get uploadState => throw _privateConstructorUsedError;

  /// Create a copy of FavColourState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $FavColourStateCopyWith<FavColourState> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $FavColourStateCopyWith<$Res> {
  factory $FavColourStateCopyWith(FavColourState value, $Res Function(FavColourState) then) = _$FavColourStateCopyWithImpl<$Res, FavColourState>;
  @useResult
  $Res call({String? pickedColourHex, Color? textColour, AsyncValue<void> uploadState});
}

/// @nodoc
class _$FavColourStateCopyWithImpl<$Res, $Val extends FavColourState> implements $FavColourStateCopyWith<$Res> {
  _$FavColourStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of FavColourState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? pickedColourHex = freezed,
    Object? textColour = freezed,
    Object? uploadState = null,
  }) {
    return _then(_value.copyWith(
      pickedColourHex: freezed == pickedColourHex
          ? _value.pickedColourHex
          : pickedColourHex // ignore: cast_nullable_to_non_nullable
              as String?,
      textColour: freezed == textColour
          ? _value.textColour
          : textColour // ignore: cast_nullable_to_non_nullable
              as Color?,
      uploadState: null == uploadState
          ? _value.uploadState
          : uploadState // ignore: cast_nullable_to_non_nullable
              as AsyncValue<void>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$FavColourStateImplCopyWith<$Res> implements $FavColourStateCopyWith<$Res> {
  factory _$$FavColourStateImplCopyWith(_$FavColourStateImpl value, $Res Function(_$FavColourStateImpl) then) = __$$FavColourStateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String? pickedColourHex, Color? textColour, AsyncValue<void> uploadState});
}

/// @nodoc
class __$$FavColourStateImplCopyWithImpl<$Res> extends _$FavColourStateCopyWithImpl<$Res, _$FavColourStateImpl> implements _$$FavColourStateImplCopyWith<$Res> {
  __$$FavColourStateImplCopyWithImpl(_$FavColourStateImpl _value, $Res Function(_$FavColourStateImpl) _then) : super(_value, _then);

  /// Create a copy of FavColourState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? pickedColourHex = freezed,
    Object? textColour = freezed,
    Object? uploadState = null,
  }) {
    return _then(_$FavColourStateImpl(
      pickedColourHex: freezed == pickedColourHex
          ? _value.pickedColourHex
          : pickedColourHex // ignore: cast_nullable_to_non_nullable
              as String?,
      textColour: freezed == textColour
          ? _value.textColour
          : textColour // ignore: cast_nullable_to_non_nullable
              as Color?,
      uploadState: null == uploadState
          ? _value.uploadState
          : uploadState // ignore: cast_nullable_to_non_nullable
              as AsyncValue<void>,
    ));
  }
}

/// @nodoc

class _$FavColourStateImpl implements _FavColourState {
  const _$FavColourStateImpl({this.pickedColourHex, this.textColour, this.uploadState = const AsyncValue<void>.data(null)});

  @override
  final String? pickedColourHex;
  @override
  final Color? textColour;
// Text colour for readability
  @override
  @JsonKey()
  final AsyncValue<void> uploadState;

  @override
  String toString() {
    return 'FavColourState(pickedColourHex: $pickedColourHex, textColour: $textColour, uploadState: $uploadState)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FavColourStateImpl &&
            (identical(other.pickedColourHex, pickedColourHex) || other.pickedColourHex == pickedColourHex) &&
            (identical(other.textColour, textColour) || other.textColour == textColour) &&
            (identical(other.uploadState, uploadState) || other.uploadState == uploadState));
  }

  @override
  int get hashCode => Object.hash(runtimeType, pickedColourHex, textColour, uploadState);

  /// Create a copy of FavColourState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$FavColourStateImplCopyWith<_$FavColourStateImpl> get copyWith => __$$FavColourStateImplCopyWithImpl<_$FavColourStateImpl>(this, _$identity);
}

abstract class _FavColourState implements FavColourState {
  const factory _FavColourState({final String? pickedColourHex, final Color? textColour, final AsyncValue<void> uploadState}) = _$FavColourStateImpl;

  @override
  String? get pickedColourHex;
  @override
  Color? get textColour; // Text colour for readability
  @override
  AsyncValue<void> get uploadState;

  /// Create a copy of FavColourState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$FavColourStateImplCopyWith<_$FavColourStateImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/views/screens/personality_card_swipe_screen.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_card_swiper/flutter_card_swiper.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/controllers/role_based_qa_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/views/ui_states/question_content.dart';
import 'package:peer_circle_app/features/multifaceted_profile/social_vibe/views/screens/social_vibe_screen.dart';
import 'package:peer_circle_app/gen/assets.gen.dart';

class PersonalityCardSwipeScreen extends HookConsumerWidget {
  const PersonalityCardSwipeScreen({super.key});
  const PersonalityCardSwipeScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'personality_card_swipe_screen';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final controller = useMemoized(() => CardSwiperController());
    final cards = Assets.personalityCards.values;
    final swipeDirection = useState<CardSwiperDirection?>(null);
    final result = useState<IList<bool?>>(List<bool?>.filled(cards.length, null).toIList());
    final questionContent = useState(questionList.first);

    useEffect(
      () {
        // 0-4, 5-9, 10-14
        // each will have a different question content
        final index = result.value.indexOf(null);
        if (index == -1) return; // all answered
        final questionIndex = index ~/ 5;
        questionContent.value = questionList[questionIndex];
        return;
      },
      [result.value],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 24.h),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              questionContent.value.title,
              style: TextStyle(fontSize: 22.sp, fontWeight: FontWeight.bold),
            ),
            8.h.verticalSpace,
            Text(
              questionContent.value.subtitle,
              style: TextStyle(fontSize: 16.sp, color: Colors.grey),
            ),
            24.h.verticalSpace,
            Expanded(
              child: Stack(
                children: [
                  CardSwiper(
                    controller: controller,
                    cardsCount: cards.length,
                    onSwipe: (previousIndex, currentIndex, direction) {
                      swipeDirection.value = null; // Reset after swipe
                      result.value = result.value.replace(previousIndex, direction == CardSwiperDirection.right);
                      return true;
                    },
                    onSwipeDirectionChange: (horizontalDirection, verticalDirection) {
                      // Only update for left/right swipes
                      if (horizontalDirection == CardSwiperDirection.left || horizontalDirection == CardSwiperDirection.right) {
                        swipeDirection.value = horizontalDirection;
                      } else {
                        swipeDirection.value = null; // Reset if no horizontal swipe
                      }
                    },
                    onUndo: (previousIndex, currentIndex, direction) {
                      swipeDirection.value = null;
                      result.value = result.value.replace(currentIndex, null);

                      return true;
                    },
                    numberOfCardsDisplayed: 5,
                    backCardOffset: const Offset(0, -30),
                    padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 30.h),
                    allowedSwipeDirection: const AllowedSwipeDirection.symmetric(horizontal: true),
                    cardBuilder: (context, index, horizontalThresholdPercentage, verticalThresholdPercentage) {
                      return _PersonalityCard(image: cards[index].image());
                    },
                    isLoop: false,
                    onEnd: () async {
                      // Submit QA data before navigating
                      final qaController = ref.read(roleBasedQAControllerProvider.notifier);
                      await qaController.submitQA(result.value);

                      final qaState = ref.read(roleBasedQAControllerProvider);
                      if (qaState.hasError && context.mounted) {
                        context.showTopSnackBarError('Error submitting personality data');
                        return;
                      }

                      if (context.mounted) {
                        context.goNamed(SocialVibeScreen.routeName);
                      }
                    },
                  ),
                  if (swipeDirection.value != null) _SwipeOverlay(direction: swipeDirection.value!),
                ],
              ),
            ),
            // tap to undo

            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  FloatingActionButton(
                    heroTag: 'undo-button',
                    backgroundColor: Colors.grey,
                    foregroundColor: Colors.white,
                    onPressed: controller.undo,
                    child: const Icon(Icons.rotate_left),
                  ),
                  FloatingActionButton(
                    heroTag: 'left-button',
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                    onPressed: () {
                      swipeDirection.value = CardSwiperDirection.left;
                      controller.swipe(CardSwiperDirection.left);
                    },
                    child: const Icon(Icons.close),
                  ),
                  FloatingActionButton(
                    heroTag: 'right-button',
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                    onPressed: () {
                      swipeDirection.value = CardSwiperDirection.right;
                      controller.swipe(CardSwiperDirection.right);
                    },
                    child: const Icon(Icons.check),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _PersonalityCard extends StatelessWidget {
  const _PersonalityCard({required this.image});
  final Widget image;

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16.r),
      child: image,
    );
  }
}

class _SwipeOverlay extends StatelessWidget {
  const _SwipeOverlay({required this.direction});
  final CardSwiperDirection direction;

  @override
  Widget build(BuildContext context) {
    final isRight = direction == CardSwiperDirection.right;
    final overlayText = isRight ? 'TOTALLY\nME' : 'NOT\nME';
    final borderColor = isRight ? Colors.lightGreenAccent : Colors.red;

    return Positioned(
      top: 20.h,
      left: isRight ? null : 20.w,
      right: isRight ? 20.w : null,
      child: AnimatedOpacity(
        duration: const Duration(milliseconds: 200),
        opacity: 1,
        child: Transform.rotate(
          angle: isRight ? -0.1 : 0.1,
          child: Container(
            constraints: BoxConstraints(
              minWidth: 160.r,
              minHeight: 160.r,
            ),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(32),
              border: Border.all(color: borderColor, width: 6),
              color: Colors.black.withValues(alpha: 0.2),
            ),
            child: Center(
              child: Text(
                overlayText,
                style: TextStyle(fontSize: 28.sp, fontWeight: FontWeight.bold, color: borderColor),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/social_vibe/views/screens/social_vibe_screen.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/auth/views/widgets/name_and_username.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/widgets/avatar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/controllers/bio_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart' as bio;
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/controllers/core_insights_feedback_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/controllers/role_based_qa_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/views/screens/skin_profile_screen.dart';

class SocialVibeScreen extends HookConsumerWidget {
  const SocialVibeScreen({super.key});
  const SocialVibeScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'social_vibe_screen';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final coreInsightsFeedbackController = ref.watch(coreInsightsFeedbackControllerProvider.notifier);
    final coreInsightsFeedbackState = ref.watch(coreInsightsFeedbackControllerProvider);

    // Get archetype and insights from role_based_qa response if available, otherwise fallback to bio response
    final roleBasedQAState = ref.watch(roleBasedQAControllerProvider);
    final bioState = ref.watch(bioControllerProvider);

    final archetype = roleBasedQAState.valueOrNull?.archetype ?? bioState.valueOrNull?.archetype;

    // Convert bio.Insight to role_based_qa Insight if needed
    final IList<Insight> insights;
    if (roleBasedQAState.valueOrNull?.insights != null) {
      insights = roleBasedQAState.valueOrNull!.insights;
    } else if (bioState.valueOrNull?.insights != null) {
      insights = bioState.valueOrNull!.insights
          .map((bioInsight) => Insight(type: bioInsight.type, text: bioInsight.text, check: bioInsight.check, connector: bioInsight.connector))
          .toIList();
    } else {
      insights = IList<Insight>();
    }
    final selectedInsights = useState<IMap<String, bool>>(
      IMap.fromEntries(
        bio.InsightType.values.map((e) => MapEntry(e.key, false)),
      ),
    );

    useEffect(() {
      if (coreInsightsFeedbackState.hasError) {
        context.showTopSnackBarError('Error submitting insights');
      }
      return;
    }, [coreInsightsFeedbackState]);

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: kDefaultScaffoldPadding(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text.rich(
              TextSpan(
                text: 'Your Social Vibe: ',
                style: TextStyle(fontSize: 22.sp, color: Colors.white),
                children: [
                  TextSpan(
                    text: archetype,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
              textAlign: TextAlign.left,
            ),
            Text(
              'Based on your personality card choices...',
              style: TextStyle(fontSize: 16.sp, color: Colors.grey),
              textAlign: TextAlign.left,
            ),
            16.verticalSpace,
            const Avatar(
              currentStep: 3,
              showProgress: true,
              showTextOverlay: true,
            ),
            // Name + handle
            16.verticalSpace,
            const NameAndUsername(),
            16.verticalSpace,
            Text(
              '👇',
              style: TextStyle(fontSize: 24.sp),
              textAlign: TextAlign.center,
            ),
            16.verticalSpace,
            Text(
              'Select insights that resonate with you',
              style: TextStyle(fontSize: 20.sp, fontWeight: FontWeight.w600, color: context.colorScheme.primary),
              textAlign: TextAlign.center,
            ),
            16.verticalSpace,
            Expanded(
              child: ListView.separated(
                itemCount: insights.length,
                separatorBuilder: (_, __) => 0.verticalSpace,
                itemBuilder: (context, index) {
                  final insight = insights[index];
                  final isSelected = selectedInsights.value[insight.type] ?? false;

                  return CheckboxListTile(
                    value: isSelected,
                    onChanged: (bool? newValue) {
                      selectedInsights.value = selectedInsights.value.update(
                        insight.type,
                        (value) => newValue ?? false,
                        ifAbsent: () => newValue ?? false,
                      );
                    },
                    contentPadding: EdgeInsets.zero,
                    controlAffinity: ListTileControlAffinity.leading,
                    activeColor: Colors.green,
                    checkColor: Colors.white,
                    tileColor: Colors.transparent,
                    side: const BorderSide(color: Colors.white),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.r)),
                    checkboxShape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(4.r)),
                    checkboxScaleFactor: 1.6,
                    title: Text.rich(
                      TextSpan(
                        text: insight.text,
                        style: TextStyle(
                          fontSize: 18.sp,
                          color: Colors.white,
                          fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                        ),
                        children: [
                          if (insight.connector.isNotEmpty)
                            TextSpan(
                              text: '... ${insight.connector}...',
                              style: TextStyle(
                                fontSize: 16.sp,
                                color: Colors.grey,
                                fontWeight: FontWeight.normal,
                              ),
                            ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
            // CTA Button
            roleBasedQAState.maybeWhen(
              loading: () => const SpinKitDualRing(
                color: Colors.green,
              ),
              orElse: () => SizedBox(
                width: double.infinity,
                child: FilledButton(
                  onPressed: () async {
                    await coreInsightsFeedbackController.submitInsights(selectedInsights.value.unlock);
                    final state = ref.read(coreInsightsFeedbackControllerProvider);
                    if (!state.hasError && context.mounted) {
                      // Navigate to the Skin Profile screen
                      context.goNamed(SkinProfileScreen.routeName);
                    }
                  },
                  style: FilledButton.styleFrom(
                    backgroundColor: Colors.green,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.r)),
                    minimumSize: Size(double.infinity, 52.h),
                  ),
                  child: Text('Continue My Journey', style: TextStyle(fontSize: 16.sp)),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/verify_code_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'verify_code_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

VerifyCodeRequest _$VerifyCodeRequestFromJson(Map<String, dynamic> json) {
  return _VerifyCodeRequest.fromJson(json);
}

/// @nodoc
mixin _$VerifyCodeRequest {
  @JsonKey(name: 'user_id')
  int get userId => throw _privateConstructorUsedError;
  String get code => throw _privateConstructorUsedError;

  /// Serializes this VerifyCodeRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of VerifyCodeRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $VerifyCodeRequestCopyWith<VerifyCodeRequest> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $VerifyCodeRequestCopyWith<$Res> {
  factory $VerifyCodeRequestCopyWith(VerifyCodeRequest value, $Res Function(VerifyCodeRequest) then) = _$VerifyCodeRequestCopyWithImpl<$Res, VerifyCodeRequest>;
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, String code});
}

/// @nodoc
class _$VerifyCodeRequestCopyWithImpl<$Res, $Val extends VerifyCodeRequest> implements $VerifyCodeRequestCopyWith<$Res> {
  _$VerifyCodeRequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of VerifyCodeRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? code = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      code: null == code
          ? _value.code
          : code // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$VerifyCodeRequestImplCopyWith<$Res> implements $VerifyCodeRequestCopyWith<$Res> {
  factory _$$VerifyCodeRequestImplCopyWith(_$VerifyCodeRequestImpl value, $Res Function(_$VerifyCodeRequestImpl) then) =
      __$$VerifyCodeRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, String code});
}

/// @nodoc
class __$$VerifyCodeRequestImplCopyWithImpl<$Res> extends _$VerifyCodeRequestCopyWithImpl<$Res, _$VerifyCodeRequestImpl>
    implements _$$VerifyCodeRequestImplCopyWith<$Res> {
  __$$VerifyCodeRequestImplCopyWithImpl(_$VerifyCodeRequestImpl _value, $Res Function(_$VerifyCodeRequestImpl) _then) : super(_value, _then);

  /// Create a copy of VerifyCodeRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? code = null,
  }) {
    return _then(_$VerifyCodeRequestImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      code: null == code
          ? _value.code
          : code // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$VerifyCodeRequestImpl implements _VerifyCodeRequest {
  _$VerifyCodeRequestImpl({@JsonKey(name: 'user_id') required this.userId, required this.code});

  factory _$VerifyCodeRequestImpl.fromJson(Map<String, dynamic> json) => _$$VerifyCodeRequestImplFromJson(json);

  @override
  @JsonKey(name: 'user_id')
  final int userId;
  @override
  final String code;

  @override
  String toString() {
    return 'VerifyCodeRequest(userId: $userId, code: $code)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$VerifyCodeRequestImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.code, code) || other.code == code));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, userId, code);

  /// Create a copy of VerifyCodeRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$VerifyCodeRequestImplCopyWith<_$VerifyCodeRequestImpl> get copyWith => __$$VerifyCodeRequestImplCopyWithImpl<_$VerifyCodeRequestImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$VerifyCodeRequestImplToJson(
      this,
    );
  }
}

abstract class _VerifyCodeRequest implements VerifyCodeRequest {
  factory _VerifyCodeRequest({@JsonKey(name: 'user_id') required final int userId, required final String code}) = _$VerifyCodeRequestImpl;

  factory _VerifyCodeRequest.fromJson(Map<String, dynamic> json) = _$VerifyCodeRequestImpl.fromJson;

  @override
  @JsonKey(name: 'user_id')
  int get userId;
  @override
  String get code;

  /// Create a copy of VerifyCodeRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$VerifyCodeRequestImplCopyWith<_$VerifyCodeRequestImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/create_user_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'create_user_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

CreateUserResponse _$CreateUserResponseFromJson(Map<String, dynamic> json) {
  return _CreateUserResponse.fromJson(json);
}

/// @nodoc
mixin _$CreateUserResponse {
  @JsonKey(name: 'user')
  int get userId => throw _privateConstructorUsedError;
  int get status => throw _privateConstructorUsedError;

  /// Serializes this CreateUserResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of CreateUserResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CreateUserResponseCopyWith<CreateUserResponse> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CreateUserResponseCopyWith<$Res> {
  factory $CreateUserResponseCopyWith(CreateUserResponse value, $Res Function(CreateUserResponse) then) =
      _$CreateUserResponseCopyWithImpl<$Res, CreateUserResponse>;
  @useResult
  $Res call({@JsonKey(name: 'user') int userId, int status});
}

/// @nodoc
class _$CreateUserResponseCopyWithImpl<$Res, $Val extends CreateUserResponse> implements $CreateUserResponseCopyWith<$Res> {
  _$CreateUserResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of CreateUserResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? status = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$CreateUserResponseImplCopyWith<$Res> implements $CreateUserResponseCopyWith<$Res> {
  factory _$$CreateUserResponseImplCopyWith(_$CreateUserResponseImpl value, $Res Function(_$CreateUserResponseImpl) then) =
      __$$CreateUserResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({@JsonKey(name: 'user') int userId, int status});
}

/// @nodoc
class __$$CreateUserResponseImplCopyWithImpl<$Res> extends _$CreateUserResponseCopyWithImpl<$Res, _$CreateUserResponseImpl>
    implements _$$CreateUserResponseImplCopyWith<$Res> {
  __$$CreateUserResponseImplCopyWithImpl(_$CreateUserResponseImpl _value, $Res Function(_$CreateUserResponseImpl) _then) : super(_value, _then);

  /// Create a copy of CreateUserResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? status = null,
  }) {
    return _then(_$CreateUserResponseImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CreateUserResponseImpl implements _CreateUserResponse {
  const _$CreateUserResponseImpl({@JsonKey(name: 'user') required this.userId, required this.status});

  factory _$CreateUserResponseImpl.fromJson(Map<String, dynamic> json) => _$$CreateUserResponseImplFromJson(json);

  @override
  @JsonKey(name: 'user')
  final int userId;
  @override
  final int status;

  @override
  String toString() {
    return 'CreateUserResponse(userId: $userId, status: $status)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateUserResponseImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.status, status) || other.status == status));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, userId, status);

  /// Create a copy of CreateUserResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CreateUserResponseImplCopyWith<_$CreateUserResponseImpl> get copyWith =>
      __$$CreateUserResponseImplCopyWithImpl<_$CreateUserResponseImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$CreateUserResponseImplToJson(
      this,
    );
  }
}

abstract class _CreateUserResponse implements CreateUserResponse {
  const factory _CreateUserResponse({@JsonKey(name: 'user') required final int userId, required final int status}) = _$CreateUserResponseImpl;

  factory _CreateUserResponse.fromJson(Map<String, dynamic> json) = _$CreateUserResponseImpl.fromJson;

  @override
  @JsonKey(name: 'user')
  int get userId;
  @override
  int get status;

  /// Create a copy of CreateUserResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CreateUserResponseImplCopyWith<_$CreateUserResponseImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data/bio_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'bio_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

BioRequest _$BioRequestFromJson(Map<String, dynamic> json) {
  return _BioRequest.fromJson(json);
}

/// @nodoc
mixin _$BioRequest {
  @JsonKey(name: 'user_id')
  int get userId => throw _privateConstructorUsedError;
  String get bio => throw _privateConstructorUsedError;

  /// Serializes this BioRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of BioRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $BioRequestCopyWith<BioRequest> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $BioRequestCopyWith<$Res> {
  factory $BioRequestCopyWith(BioRequest value, $Res Function(BioRequest) then) = _$BioRequestCopyWithImpl<$Res, BioRequest>;
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, String bio});
}

/// @nodoc
class _$BioRequestCopyWithImpl<$Res, $Val extends BioRequest> implements $BioRequestCopyWith<$Res> {
  _$BioRequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of BioRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? bio = null,
  }) {
    return _then(_value.copyWith(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      bio: null == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$BioRequestImplCopyWith<$Res> implements $BioRequestCopyWith<$Res> {
  factory _$$BioRequestImplCopyWith(_$BioRequestImpl value, $Res Function(_$BioRequestImpl) then) = __$$BioRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({@JsonKey(name: 'user_id') int userId, String bio});
}

/// @nodoc
class __$$BioRequestImplCopyWithImpl<$Res> extends _$BioRequestCopyWithImpl<$Res, _$BioRequestImpl> implements _$$BioRequestImplCopyWith<$Res> {
  __$$BioRequestImplCopyWithImpl(_$BioRequestImpl _value, $Res Function(_$BioRequestImpl) _then) : super(_value, _then);

  /// Create a copy of BioRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
    Object? bio = null,
  }) {
    return _then(_$BioRequestImpl(
      userId: null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as int,
      bio: null == bio
          ? _value.bio
          : bio // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$BioRequestImpl implements _BioRequest {
  const _$BioRequestImpl({@JsonKey(name: 'user_id') required this.userId, required this.bio});

  factory _$BioRequestImpl.fromJson(Map<String, dynamic> json) => _$$BioRequestImplFromJson(json);

  @override
  @JsonKey(name: 'user_id')
  final int userId;
  @override
  final String bio;

  @override
  String toString() {
    return 'BioRequest(userId: $userId, bio: $bio)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BioRequestImpl &&
            (identical(other.userId, userId) || other.userId == userId) &&
            (identical(other.bio, bio) || other.bio == bio));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, userId, bio);

  /// Create a copy of BioRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$BioRequestImplCopyWith<_$BioRequestImpl> get copyWith => __$$BioRequestImplCopyWithImpl<_$BioRequestImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$BioRequestImplToJson(
      this,
    );
  }
}

abstract class _BioRequest implements BioRequest {
  const factory _BioRequest({@JsonKey(name: 'user_id') required final int userId, required final String bio}) = _$BioRequestImpl;

  factory _BioRequest.fromJson(Map<String, dynamic> json) = _$BioRequestImpl.fromJson;

  @override
  @JsonKey(name: 'user_id')
  int get userId;
  @override
  String get bio;

  /// Create a copy of BioRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$BioRequestImplCopyWith<_$BioRequestImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/verify_code_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'verify_code_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

VerifyCodeResponse _$VerifyCodeResponseFromJson(Map<String, dynamic> json) {
  return _VerifyCodeResponse.fromJson(json);
}

/// @nodoc
mixin _$VerifyCodeResponse {
  bool get success => throw _privateConstructorUsedError;
  int get status => throw _privateConstructorUsedError;

  /// Serializes this VerifyCodeResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of VerifyCodeResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $VerifyCodeResponseCopyWith<VerifyCodeResponse> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $VerifyCodeResponseCopyWith<$Res> {
  factory $VerifyCodeResponseCopyWith(VerifyCodeResponse value, $Res Function(VerifyCodeResponse) then) =
      _$VerifyCodeResponseCopyWithImpl<$Res, VerifyCodeResponse>;
  @useResult
  $Res call({bool success, int status});
}

/// @nodoc
class _$VerifyCodeResponseCopyWithImpl<$Res, $Val extends VerifyCodeResponse> implements $VerifyCodeResponseCopyWith<$Res> {
  _$VerifyCodeResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of VerifyCodeResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? success = null,
    Object? status = null,
  }) {
    return _then(_value.copyWith(
      success: null == success
          ? _value.success
          : success // ignore: cast_nullable_to_non_nullable
              as bool,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$VerifyCodeResponseImplCopyWith<$Res> implements $VerifyCodeResponseCopyWith<$Res> {
  factory _$$VerifyCodeResponseImplCopyWith(_$VerifyCodeResponseImpl value, $Res Function(_$VerifyCodeResponseImpl) then) =
      __$$VerifyCodeResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({bool success, int status});
}

/// @nodoc
class __$$VerifyCodeResponseImplCopyWithImpl<$Res> extends _$VerifyCodeResponseCopyWithImpl<$Res, _$VerifyCodeResponseImpl>
    implements _$$VerifyCodeResponseImplCopyWith<$Res> {
  __$$VerifyCodeResponseImplCopyWithImpl(_$VerifyCodeResponseImpl _value, $Res Function(_$VerifyCodeResponseImpl) _then) : super(_value, _then);

  /// Create a copy of VerifyCodeResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? success = null,
    Object? status = null,
  }) {
    return _then(_$VerifyCodeResponseImpl(
      success: null == success
          ? _value.success
          : success // ignore: cast_nullable_to_non_nullable
              as bool,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$VerifyCodeResponseImpl implements _VerifyCodeResponse {
  _$VerifyCodeResponseImpl({required this.success, required this.status});

  factory _$VerifyCodeResponseImpl.fromJson(Map<String, dynamic> json) => _$$VerifyCodeResponseImplFromJson(json);

  @override
  final bool success;
  @override
  final int status;

  @override
  String toString() {
    return 'VerifyCodeResponse(success: $success, status: $status)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$VerifyCodeResponseImpl &&
            (identical(other.success, success) || other.success == success) &&
            (identical(other.status, status) || other.status == status));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, success, status);

  /// Create a copy of VerifyCodeResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$VerifyCodeResponseImplCopyWith<_$VerifyCodeResponseImpl> get copyWith =>
      __$$VerifyCodeResponseImplCopyWithImpl<_$VerifyCodeResponseImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$VerifyCodeResponseImplToJson(
      this,
    );
  }
}

abstract class _VerifyCodeResponse implements VerifyCodeResponse {
  factory _VerifyCodeResponse({required final bool success, required final int status}) = _$VerifyCodeResponseImpl;

  factory _VerifyCodeResponse.fromJson(Map<String, dynamic> json) = _$VerifyCodeResponseImpl.fromJson;

  @override
  bool get success;
  @override
  int get status;

  /// Create a copy of VerifyCodeResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$VerifyCodeResponseImplCopyWith<_$VerifyCodeResponseImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/widgets/drag_drop_template.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/draggable_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/widgets/color_container_with_avatar.dart';

class DragDropTemplate extends HookConsumerWidget {
  const DragDropTemplate({
    super.key,
    required this.title,
    required this.subtitle,
    required this.dataSet,
    required this.categoryKey,
    this.colorContainerHeight,
    this.bottomText,
    this.onNavForward,
    this.onSelectionChanged,
    this.onlySelectOne = true,
    this.isInstruction = false,
  });

  final String title;
  final Widget subtitle;
  final ISet<String> dataSet;
  final CategoryKey categoryKey;
  final double? colorContainerHeight;
  final String? bottomText;
  final Function()? onNavForward;
  final void Function(ISet<CategoryItem>)? onSelectionChanged;
  final bool onlySelectOne;
  final bool isInstruction;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final allSelectedData = ref.watch(dragDropDataControllerProvider);

    // Extract list of category item based on category key
    final selectedItems = allSelectedData[categoryKey.name] ?? ISet<CategoryItem>();
    final curFavColour = ref.watch(curColourProvider);

    // Unselected data is the difference between the data set and the selected items
    // The unselected items will be updated in useEffect
    final unSelectedData = useState<ISet<String>>(ISet());

    useEffect(() {
      unSelectedData.value = dataSet.difference(selectedItems.map((e) => e.label).toISet());
      Future(() {
        onSelectionChanged?.call(selectedItems);
      });
      return null;
    }, [allSelectedData]);

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: EdgeInsets.symmetric(horizontal: kDefaultHorizontalPadding.w),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: context.textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
                ),
                8.sizedBoxH,
                subtitle,
              ],
            ),
          ),
          16.sizedBoxH,
          Expanded(
            child: SizedBox(
              width: context.screenWidth,
              height: double.infinity,
              child: DragTarget<String>(
                onAcceptWithDetails: (item) {
                  ref.read(dragDropDataControllerProvider.notifier).removeData(categoryKey.name, item.data);
                },
                builder: (context, candidateData, rejectedData) {
                  return SingleChildScrollView(
                    child: Wrap(
                      spacing: 16.w,
                      runSpacing: 16.h,
                      children: [
                        for (final data in unSelectedData.value)
                          DraggableItem(
                            showIcon: false,
                            data: data,
                            visible: true,
                            onTap: null,
                          ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
          ColorContainerWithAvatar(
            avatarCurStep: 2,
            height: colorContainerHeight ?? 0.49.sh,
            child: Column(
              children: [
                Expanded(
                  child: DragTarget<String>(
                    onAcceptWithDetails: (item) {
                      if (!dataSet.contains(item.data)) {
                        return;
                      }
                      if (onlySelectOne && selectedItems.isNotEmpty && selectedItems.first.label != item.data) {
                        context.showTopSnackBarError('You can only select one');
                        return;
                      }
                      ref.read(dragDropDataControllerProvider.notifier).addData(categoryKey.name, item.data, true);
                    },
                    builder: (context, candidateData, rejectedData) {
                      return Center(
                        child: SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: Row(
                            spacing: 16.w,
                            children: [
                              for (final entry in selectedItems)
                                DraggableItem(
                                  showIcon: true,
                                  visible: entry.visible,
                                  onTap: () {
                                    ref.read(dragDropDataControllerProvider.notifier).toggleVisibility(categoryKey.name, entry.label);
                                  },
                                  data: entry.label,
                                ),
                              if (!isInstruction)
                                // show others
                                for (final entry in allSelectedData.entries)
                                  if (entry.key != categoryKey.name)
                                    for (final item in entry.value)
                                      DraggableItem(
                                        showIcon: true,
                                        visible: item.visible,
                                        onTap: () {
                                          ref.read(dragDropDataControllerProvider.notifier).toggleVisibility(entry.key, item.label);
                                        },
                                        data: item.label,
                                      ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
                Container(
                  height: 64.h,
                  padding: EdgeInsets.symmetric(horizontal: kDefaultHorizontalPadding.w, vertical: kDefaultVerticalPadding.h),
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      Align(
                        alignment: Alignment.bottomCenter,
                        child: Text(
                          bottomText ?? '',
                          style: context.textTheme.bodyLarge?.copyWith(color: curFavColour.textColour),
                        ),
                      ),
                      if (onNavForward != null)
                        Align(
                          alignment: Alignment.bottomRight,
                          child: IconButton(
                            padding: EdgeInsets.zero,
                            onPressed: () {
                              talker.info(selectedItems);
                              if (selectedItems.isEmpty) {
                                context.showTopSnackBarError('Please select at least one');
                                return;
                              }
                              onNavForward?.call();
                            },
                            icon: Icon(
                              Icons.arrow_forward_ios,
                              color: curFavColour.textColour,
                            ),
                          ),
                        )
                    ],
                  ),
                )
              ],
            ),
          ),
        ],
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/views/ui_states/avatar_state.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'avatar_state.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$AvatarState {
  /// Currently picked image (for local preview).
  XFile? get pickedFile => throw _privateConstructorUsedError;

  /// The async state for the upload request.
  AsyncValue<void> get uploadState => throw _privateConstructorUsedError;

  /// Create a copy of AvatarState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $AvatarStateCopyWith<AvatarState> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $AvatarStateCopyWith<$Res> {
  factory $AvatarStateCopyWith(AvatarState value, $Res Function(AvatarState) then) = _$AvatarStateCopyWithImpl<$Res, AvatarState>;
  @useResult
  $Res call({XFile? pickedFile, AsyncValue<void> uploadState});
}

/// @nodoc
class _$AvatarStateCopyWithImpl<$Res, $Val extends AvatarState> implements $AvatarStateCopyWith<$Res> {
  _$AvatarStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of AvatarState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? pickedFile = freezed,
    Object? uploadState = null,
  }) {
    return _then(_value.copyWith(
      pickedFile: freezed == pickedFile
          ? _value.pickedFile
          : pickedFile // ignore: cast_nullable_to_non_nullable
              as XFile?,
      uploadState: null == uploadState
          ? _value.uploadState
          : uploadState // ignore: cast_nullable_to_non_nullable
              as AsyncValue<void>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$AvatarStateImplCopyWith<$Res> implements $AvatarStateCopyWith<$Res> {
  factory _$$AvatarStateImplCopyWith(_$AvatarStateImpl value, $Res Function(_$AvatarStateImpl) then) = __$$AvatarStateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({XFile? pickedFile, AsyncValue<void> uploadState});
}

/// @nodoc
class __$$AvatarStateImplCopyWithImpl<$Res> extends _$AvatarStateCopyWithImpl<$Res, _$AvatarStateImpl> implements _$$AvatarStateImplCopyWith<$Res> {
  __$$AvatarStateImplCopyWithImpl(_$AvatarStateImpl _value, $Res Function(_$AvatarStateImpl) _then) : super(_value, _then);

  /// Create a copy of AvatarState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? pickedFile = freezed,
    Object? uploadState = null,
  }) {
    return _then(_$AvatarStateImpl(
      pickedFile: freezed == pickedFile
          ? _value.pickedFile
          : pickedFile // ignore: cast_nullable_to_non_nullable
              as XFile?,
      uploadState: null == uploadState
          ? _value.uploadState
          : uploadState // ignore: cast_nullable_to_non_nullable
              as AsyncValue<void>,
    ));
  }
}

/// @nodoc

class _$AvatarStateImpl implements _AvatarState {
  const _$AvatarStateImpl({this.pickedFile, this.uploadState = const AsyncValue<void>.data(null)});

  /// Currently picked image (for local preview).
  @override
  final XFile? pickedFile;

  /// The async state for the upload request.
  @override
  @JsonKey()
  final AsyncValue<void> uploadState;

  @override
  String toString() {
    return 'AvatarState(pickedFile: $pickedFile, uploadState: $uploadState)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AvatarStateImpl &&
            (identical(other.pickedFile, pickedFile) || other.pickedFile == pickedFile) &&
            (identical(other.uploadState, uploadState) || other.uploadState == uploadState));
  }

  @override
  int get hashCode => Object.hash(runtimeType, pickedFile, uploadState);

  /// Create a copy of AvatarState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AvatarStateImplCopyWith<_$AvatarStateImpl> get copyWith => __$$AvatarStateImplCopyWithImpl<_$AvatarStateImpl>(this, _$identity);
}

abstract class _AvatarState implements AvatarState {
  const factory _AvatarState({final XFile? pickedFile, final AsyncValue<void> uploadState}) = _$AvatarStateImpl;

  /// Currently picked image (for local preview).
  @override
  XFile? get pickedFile;

  /// The async state for the upload request.
  @override
  AsyncValue<void> get uploadState;

  /// Create a copy of AvatarState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AvatarStateImplCopyWith<_$AvatarStateImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/phone_number_input_screen.dart
```dart
import 'package:country_code_picker_plus/country_code_picker_plus.dart';
import 'package:country_codes/country_codes.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/signup_verification_screen.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';

final _formKey = GlobalKey<FormState>();

class PhoneNumberInputScreen extends HookConsumerWidget {
  const PhoneNumberInputScreen({super.key});
  const PhoneNumberInputScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'phone-number-input-screen';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final createUserState = ref.watch(createUserControllerProvider);
    final phoneNumberController = useTextEditingController();
    final isPhoneNumberValid = useState(false);
    final countryCode = useState('CA');
    final hasFocused = useState(true);
    void updateButtonState() {
      isPhoneNumberValid.value = phoneNumberController.text.length > 8;
    }

    useEffect(
      () {
        phoneNumberController.addListener(updateButtonState);
        return () => phoneNumberController.removeListener(updateButtonState);
      },
      [phoneNumberController],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Form(
              key: _formKey,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "What's your number?",
                    style: TextStyle(
                      fontSize: 24.sp,
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                  16.sizedBoxH,
                  CustomTextFormField(
                    autoFocus: true,
                    controller: phoneNumberController,
                    hintText: 'Phone Number',
                    onFocusChanged: (hasFocus) {
                      hasFocused.value = hasFocus;
                    },
                    keyboardType: TextInputType.phone,
                    prefixIcon: Padding(
                      padding: EdgeInsets.only(left: 16.w),
                      child: CountryCodePicker(
                        onChanged: (country) {
                          //   String name;
                          //
                          //   final String flagUri;
                          //
                          //   final String code;
                          //
                          //   final String dialCode;
                          //
                          //   Country(
                          //       {this.name = "", this.code = "", this.flagUri = "", this.dialCode = ""});
                          //
                          //   @override
                          //   String toString() => dialCode;
                          //
                          //   String toLongString() => "$dialCode ${toCountryStringOnly()}";
                          //
                          //   String toCountryStringOnly() {
                          //     return '$_cleanName';
                          //   }
                          //
                          //   String? get _cleanName {
                          //     return name.replaceAll(RegExp(r'[[\]]'), '').split(',').first;
                          //   }
                          talker.info(
                            'name ${country.name}\n code ${country.code}\n dialCode ${country.dialCode}\n flagUri ${country.flagUri}\n longString ${country.toLongString()}\n countryStringOnly ${country.toCountryStringOnly()}',
                          );
                          countryCode.value = country.code;
                        },
                        dialogBackgroundColor: context.colorScheme.surface,
                        dialogTextStyle: TextStyle(
                          color: context.colorScheme.onSurface,
                          fontSize: 16.sp,
                        ),
                        searchStyle: TextStyle(
                          color: context.colorScheme.onInverseSurface,
                          fontSize: 16.sp,
                        ),
                        padding: EdgeInsets.zero,
                        initialSelection: countryCode.value,
                        textStyle: hasFocused.value
                            ? TextStyle(
                                color: context.colorScheme.onInverseSurface,
                                fontSize: 16.sp,
                                fontWeight: FontWeight.w500,
                              )
                            : TextStyle(
                                color: context.colorScheme.onSurface,
                                fontSize: 16.sp,
                                fontWeight: FontWeight.w500,
                              ),
                        icon: const Icon(Icons.arrow_drop_down),
                        iconEnabledColor: hasFocused.value ? context.colorScheme.onInverseSurface : context.colorScheme.onSurface,
                      ),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your phone number';
                      }
                      if (value.length < 9) {
                        return 'Please enter a valid phone number';
                      }
                      return null;
                    },
                  ),
                ],
              ),
            ),
            if (createUserState.hasError)
              Text(
                'Create user failed: ${createUserState.errorMessage}',
                style: TextStyle(
                  color: context.colorScheme.error,
                  fontSize: 16.sp,
                ),
              ),
            OutlinedButton(
              onPressed: isPhoneNumberValid.value && !createUserState.isLoading
                  ? () async {
                      if (_formKey.currentState?.validate() != true) return;
                      final dialCode = CountryCodes.detailsFromAlpha2(countryCode.value).dialCode?.replaceAll('+', '');
                      if (dialCode == null) {
                        talker.error('dialCode is null');
                        return;
                      }
                      final phoneNumber = '$dialCode${phoneNumberController.text}';
                      ref.read(createUserControllerProvider.notifier).updatePhoneNumber(phoneNumber);

                      await ref.read(createUserControllerProvider.notifier).createUser();
                      final userState = ref.read(createUserControllerProvider);
                      if (!context.mounted) return;
                      if (userState.isSuccess) {
                        context.goNamed(SignUpVerificationScreen.routeName);
                      }
                    }
                  : null,
              child: createUserState.isLoading ? const CircularProgressIndicator() : const Text('Send code'),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/views/ui_states/question_content.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'question_content.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

QuestionContent _$QuestionContentFromJson(Map<String, dynamic> json) {
  return _QuestionContent.fromJson(json);
}

/// @nodoc
mixin _$QuestionContent {
  String get title => throw _privateConstructorUsedError;
  String get subtitle => throw _privateConstructorUsedError;

  /// Serializes this QuestionContent to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of QuestionContent
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $QuestionContentCopyWith<QuestionContent> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $QuestionContentCopyWith<$Res> {
  factory $QuestionContentCopyWith(QuestionContent value, $Res Function(QuestionContent) then) = _$QuestionContentCopyWithImpl<$Res, QuestionContent>;
  @useResult
  $Res call({String title, String subtitle});
}

/// @nodoc
class _$QuestionContentCopyWithImpl<$Res, $Val extends QuestionContent> implements $QuestionContentCopyWith<$Res> {
  _$QuestionContentCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of QuestionContent
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? title = null,
    Object? subtitle = null,
  }) {
    return _then(_value.copyWith(
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as String,
      subtitle: null == subtitle
          ? _value.subtitle
          : subtitle // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$QuestionContentImplCopyWith<$Res> implements $QuestionContentCopyWith<$Res> {
  factory _$$QuestionContentImplCopyWith(_$QuestionContentImpl value, $Res Function(_$QuestionContentImpl) then) = __$$QuestionContentImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String title, String subtitle});
}

/// @nodoc
class __$$QuestionContentImplCopyWithImpl<$Res> extends _$QuestionContentCopyWithImpl<$Res, _$QuestionContentImpl>
    implements _$$QuestionContentImplCopyWith<$Res> {
  __$$QuestionContentImplCopyWithImpl(_$QuestionContentImpl _value, $Res Function(_$QuestionContentImpl) _then) : super(_value, _then);

  /// Create a copy of QuestionContent
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? title = null,
    Object? subtitle = null,
  }) {
    return _then(_$QuestionContentImpl(
      title: null == title
          ? _value.title
          : title // ignore: cast_nullable_to_non_nullable
              as String,
      subtitle: null == subtitle
          ? _value.subtitle
          : subtitle // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$QuestionContentImpl implements _QuestionContent {
  const _$QuestionContentImpl({required this.title, required this.subtitle});

  factory _$QuestionContentImpl.fromJson(Map<String, dynamic> json) => _$$QuestionContentImplFromJson(json);

  @override
  final String title;
  @override
  final String subtitle;

  @override
  String toString() {
    return 'QuestionContent(title: $title, subtitle: $subtitle)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$QuestionContentImpl &&
            (identical(other.title, title) || other.title == title) &&
            (identical(other.subtitle, subtitle) || other.subtitle == subtitle));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, title, subtitle);

  /// Create a copy of QuestionContent
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$QuestionContentImplCopyWith<_$QuestionContentImpl> get copyWith => __$$QuestionContentImplCopyWithImpl<_$QuestionContentImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$QuestionContentImplToJson(
      this,
    );
  }
}

abstract class _QuestionContent implements QuestionContent {
  const factory _QuestionContent({required final String title, required final String subtitle}) = _$QuestionContentImpl;

  factory _QuestionContent.fromJson(Map<String, dynamic> json) = _$QuestionContentImpl.fromJson;

  @override
  String get title;
  @override
  String get subtitle;

  /// Create a copy of QuestionContent
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$QuestionContentImplCopyWith<_$QuestionContentImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/error_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'error_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

ErrorResponse _$ErrorResponseFromJson(Map<String, dynamic> json) {
  return _ErrorResponse.fromJson(json);
}

/// @nodoc
mixin _$ErrorResponse {
  String get error => throw _privateConstructorUsedError;
  int get status => throw _privateConstructorUsedError;

  /// Serializes this ErrorResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of ErrorResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $ErrorResponseCopyWith<ErrorResponse> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $ErrorResponseCopyWith<$Res> {
  factory $ErrorResponseCopyWith(ErrorResponse value, $Res Function(ErrorResponse) then) = _$ErrorResponseCopyWithImpl<$Res, ErrorResponse>;
  @useResult
  $Res call({String error, int status});
}

/// @nodoc
class _$ErrorResponseCopyWithImpl<$Res, $Val extends ErrorResponse> implements $ErrorResponseCopyWith<$Res> {
  _$ErrorResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of ErrorResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? error = null,
    Object? status = null,
  }) {
    return _then(_value.copyWith(
      error: null == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as String,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$ErrorResponseImplCopyWith<$Res> implements $ErrorResponseCopyWith<$Res> {
  factory _$$ErrorResponseImplCopyWith(_$ErrorResponseImpl value, $Res Function(_$ErrorResponseImpl) then) = __$$ErrorResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String error, int status});
}

/// @nodoc
class __$$ErrorResponseImplCopyWithImpl<$Res> extends _$ErrorResponseCopyWithImpl<$Res, _$ErrorResponseImpl> implements _$$ErrorResponseImplCopyWith<$Res> {
  __$$ErrorResponseImplCopyWithImpl(_$ErrorResponseImpl _value, $Res Function(_$ErrorResponseImpl) _then) : super(_value, _then);

  /// Create a copy of ErrorResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? error = null,
    Object? status = null,
  }) {
    return _then(_$ErrorResponseImpl(
      error: null == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as String,
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$ErrorResponseImpl implements _ErrorResponse {
  const _$ErrorResponseImpl({required this.error, required this.status});

  factory _$ErrorResponseImpl.fromJson(Map<String, dynamic> json) => _$$ErrorResponseImplFromJson(json);

  @override
  final String error;
  @override
  final int status;

  @override
  String toString() {
    return 'ErrorResponse(error: $error, status: $status)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ErrorResponseImpl &&
            (identical(other.error, error) || other.error == error) &&
            (identical(other.status, status) || other.status == status));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, error, status);

  /// Create a copy of ErrorResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$ErrorResponseImplCopyWith<_$ErrorResponseImpl> get copyWith => __$$ErrorResponseImplCopyWithImpl<_$ErrorResponseImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$ErrorResponseImplToJson(
      this,
    );
  }
}

abstract class _ErrorResponse implements ErrorResponse {
  const factory _ErrorResponse({required final String error, required final int status}) = _$ErrorResponseImpl;

  factory _ErrorResponse.fromJson(Map<String, dynamic> json) = _$ErrorResponseImpl.fromJson;

  @override
  String get error;
  @override
  int get status;

  /// Create a copy of ErrorResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$ErrorResponseImplCopyWith<_$ErrorResponseImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data/category_item.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'category_item.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

CategoryItem _$CategoryItemFromJson(Map<String, dynamic> json) {
  return _CategoryItem.fromJson(json);
}

/// @nodoc
mixin _$CategoryItem {
  String get label => throw _privateConstructorUsedError;
  bool get visible => throw _privateConstructorUsedError;

  /// Serializes this CategoryItem to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of CategoryItem
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CategoryItemCopyWith<CategoryItem> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CategoryItemCopyWith<$Res> {
  factory $CategoryItemCopyWith(CategoryItem value, $Res Function(CategoryItem) then) = _$CategoryItemCopyWithImpl<$Res, CategoryItem>;
  @useResult
  $Res call({String label, bool visible});
}

/// @nodoc
class _$CategoryItemCopyWithImpl<$Res, $Val extends CategoryItem> implements $CategoryItemCopyWith<$Res> {
  _$CategoryItemCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of CategoryItem
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? label = null,
    Object? visible = null,
  }) {
    return _then(_value.copyWith(
      label: null == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$CategoryItemImplCopyWith<$Res> implements $CategoryItemCopyWith<$Res> {
  factory _$$CategoryItemImplCopyWith(_$CategoryItemImpl value, $Res Function(_$CategoryItemImpl) then) = __$$CategoryItemImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String label, bool visible});
}

/// @nodoc
class __$$CategoryItemImplCopyWithImpl<$Res> extends _$CategoryItemCopyWithImpl<$Res, _$CategoryItemImpl> implements _$$CategoryItemImplCopyWith<$Res> {
  __$$CategoryItemImplCopyWithImpl(_$CategoryItemImpl _value, $Res Function(_$CategoryItemImpl) _then) : super(_value, _then);

  /// Create a copy of CategoryItem
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? label = null,
    Object? visible = null,
  }) {
    return _then(_$CategoryItemImpl(
      label: null == label
          ? _value.label
          : label // ignore: cast_nullable_to_non_nullable
              as String,
      visible: null == visible
          ? _value.visible
          : visible // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CategoryItemImpl implements _CategoryItem {
  const _$CategoryItemImpl({required this.label, required this.visible});

  factory _$CategoryItemImpl.fromJson(Map<String, dynamic> json) => _$$CategoryItemImplFromJson(json);

  @override
  final String label;
  @override
  final bool visible;

  @override
  String toString() {
    return 'CategoryItem(label: $label, visible: $visible)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CategoryItemImpl &&
            (identical(other.label, label) || other.label == label) &&
            (identical(other.visible, visible) || other.visible == visible));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, label, visible);

  /// Create a copy of CategoryItem
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CategoryItemImplCopyWith<_$CategoryItemImpl> get copyWith => __$$CategoryItemImplCopyWithImpl<_$CategoryItemImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$CategoryItemImplToJson(
      this,
    );
  }
}

abstract class _CategoryItem implements CategoryItem {
  const factory _CategoryItem({required final String label, required final bool visible}) = _$CategoryItemImpl;

  factory _CategoryItem.fromJson(Map<String, dynamic> json) = _$CategoryItemImpl.fromJson;

  @override
  String get label;
  @override
  bool get visible;

  /// Create a copy of CategoryItem
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CategoryItemImplCopyWith<_$CategoryItemImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/login_request.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'login_request.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

LoginRequest _$LoginRequestFromJson(Map<String, dynamic> json) {
  return _LoginRequest.fromJson(json);
}

/// @nodoc
mixin _$LoginRequest {
  String get username => throw _privateConstructorUsedError;
  String get password => throw _privateConstructorUsedError;

  /// Serializes this LoginRequest to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $LoginRequestCopyWith<LoginRequest> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $LoginRequestCopyWith<$Res> {
  factory $LoginRequestCopyWith(LoginRequest value, $Res Function(LoginRequest) then) = _$LoginRequestCopyWithImpl<$Res, LoginRequest>;
  @useResult
  $Res call({String username, String password});
}

/// @nodoc
class _$LoginRequestCopyWithImpl<$Res, $Val extends LoginRequest> implements $LoginRequestCopyWith<$Res> {
  _$LoginRequestCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? username = null,
    Object? password = null,
  }) {
    return _then(_value.copyWith(
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$LoginRequestImplCopyWith<$Res> implements $LoginRequestCopyWith<$Res> {
  factory _$$LoginRequestImplCopyWith(_$LoginRequestImpl value, $Res Function(_$LoginRequestImpl) then) = __$$LoginRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String username, String password});
}

/// @nodoc
class __$$LoginRequestImplCopyWithImpl<$Res> extends _$LoginRequestCopyWithImpl<$Res, _$LoginRequestImpl> implements _$$LoginRequestImplCopyWith<$Res> {
  __$$LoginRequestImplCopyWithImpl(_$LoginRequestImpl _value, $Res Function(_$LoginRequestImpl) _then) : super(_value, _then);

  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? username = null,
    Object? password = null,
  }) {
    return _then(_$LoginRequestImpl(
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$LoginRequestImpl implements _LoginRequest {
  _$LoginRequestImpl({required this.username, required this.password});

  factory _$LoginRequestImpl.fromJson(Map<String, dynamic> json) => _$$LoginRequestImplFromJson(json);

  @override
  final String username;
  @override
  final String password;

  @override
  String toString() {
    return 'LoginRequest(username: $username, password: $password)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LoginRequestImpl &&
            (identical(other.username, username) || other.username == username) &&
            (identical(other.password, password) || other.password == password));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, username, password);

  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$LoginRequestImplCopyWith<_$LoginRequestImpl> get copyWith => __$$LoginRequestImplCopyWithImpl<_$LoginRequestImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$LoginRequestImplToJson(
      this,
    );
  }
}

abstract class _LoginRequest implements LoginRequest {
  factory _LoginRequest({required final String username, required final String password}) = _$LoginRequestImpl;

  factory _LoginRequest.fromJson(Map<String, dynamic> json) = _$LoginRequestImpl.fromJson;

  @override
  String get username;
  @override
  String get password;

  /// Create a copy of LoginRequest
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$LoginRequestImplCopyWith<_$LoginRequestImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/views/screens/fav_colour_screen.dart
```dart
import 'package:animated_emoji/emoji.dart';
import 'package:animated_emoji/emojis.g.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/drag_drop_guide_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/fav_colour_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/ui_states/fav_colour_state.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/widgets/color_container_with_avatar.dart';

class FavColourScreen extends HookConsumerWidget {
  const FavColourScreen({super.key});
  const FavColourScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'fav-colour';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final favColourController = ref.watch(favColourControllerProvider.notifier);
    final favColourState = ref.watch(favColourControllerProvider);

    useEffect(
      () {
        if (favColourState.uploadState.hasError) {
          Future(() {
            if (!context.mounted) return;
            context.showTopSnackBarError('Save colour failed. Please try again');
          });
        }
        return;
      },
      [favColourState],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Stack(
        alignment: Alignment.bottomCenter,
        children: [
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: 0.6.sh,
              // top left and top right circle border
              decoration: BoxDecoration(
                color: favColourState.pickedColourHex != null ? Color(int.parse(favColourState.pickedColourHex!)) : null,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(32.r),
                  topRight: Radius.circular(32.r),
                ),
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: ColorContainerWithAvatar(
              avatarCurStep: favColourState.pickedColourHex != null ? 2 : 1,
              height: 0.8.sh,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  if (favColourState.pickedColourHex == null)
                    RichText(
                      text: TextSpan(
                        text: 'If I were a colour,',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: favColourState.textColour ?? Colors.white,
                          fontSize: context.textTheme.titleLarge?.fontSize,
                        ),
                        children: const [
                          TextSpan(
                            text: " I'd pick...",
                            style: TextStyle(
                              fontWeight: FontWeight.w400,
                            ),
                          ),
                        ],
                      ),
                    )
                  else
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          'Feels right ',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: favColourState.textColour ?? Colors.white,
                            fontSize: context.textTheme.titleLarge?.fontSize,
                          ),
                        ),
                        const AnimatedEmoji(
                          AnimatedEmojis.sparkles,
                          source: AnimatedEmojiSource.asset,
                        ),
                      ],
                    ),
                  32.sizedBoxH,
                  _ColourSelectionGrid(
                    favColourController: favColourController,
                    favColourState: favColourState,
                  ),
                ],
              ),
            ),
          ),
          if (favColourState.textColour != null)
            Positioned(
              bottom: 0,
              right: 0,
              child: Padding(
                padding: kDefaultScaffoldPadding(),
                child: favColourState.uploadState.isLoading
                    ? CircularProgressIndicator(
                        color: favColourState.textColour,
                      )
                    : TextButton.icon(
                        style: TextButton.styleFrom(
                          foregroundColor: favColourState.textColour,
                          iconColor: favColourState.textColour,
                        ),
                        onPressed: () async {
                          await favColourController.saveFavouriteColour();
                          final uploadState = ref.read(favColourControllerProvider).uploadState;
                          if (uploadState is AsyncData && context.mounted) {
                            context.goNamed(DragDropGuideScreen.routeName);
                          }
                        },
                        label: const Text(
                          'DRAG & DROP 101',
                        ),
                        icon: const Icon(Icons.keyboard_tab),
                      ).animate(onPlay: (controller) => controller.repeat()).fade(duration: 500.ms).then(delay: 1000.ms).fadeOut(duration: 1000.ms),
              ),
            ),
        ],
      ),
    );
  }
}

class _ColourSelectionGrid extends StatelessWidget {
  const _ColourSelectionGrid({
    required this.favColourController,
    required this.favColourState,
  });

  final FavColourController favColourController;
  final FavColourState favColourState;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 48.r),
      child: Wrap(
        spacing: 10.r,
        runSpacing: 10.h,
        alignment: WrapAlignment.center,
        children: colourOptions.map((colourOption) {
          final isSelected = colourOption.colourHex == favColourState.pickedColourHex;
          return GestureDetector(
            onTap: () {
              favColourController.updateSelectedColour(colourOption.colourHex);
            },
            child: Container(
              width: 32.r,
              height: 32.r,
              decoration: BoxDecoration(
                color: Color(int.parse(colourOption.colourHex)),
                shape: BoxShape.circle,
                border: isSelected ? Border.all(color: Colors.white, width: 4) : Border.all(color: Colors.white),
              ),
            ),
          );
        }).toList(),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/views/screens/emotion_qa_screen.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/views/screens/bio_input_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/controllers/emotional_qa_controller.dart';

class EmotionalQAScreen extends HookConsumerWidget {
  const EmotionalQAScreen({super.key});
  const EmotionalQAScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'emotional-qa';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final controller = ref.watch(emotionalQAControllerProvider.notifier);
    final controllerState = ref.watch(emotionalQAControllerProvider);
    const questions = [
      'Do you tend to reflect on things a lot?',
      'Do your family & friends shape how you see yourself?',
      'Do your values define who you are?',
      'How do changes in what you own or afford affect your self-esteem?',
      'What gets you excited to be part of a community?'
    ];
    const options = [
      ['Rarely', 'Occasionally', 'Moderately', 'Often', 'Constantly'],
      ['Not at all – I decide.', 'Occasionally – but mostly me.', 'Moderately', 'Often', 'Constantly'],
      [
        'Not at all – My values don’t define me.',
        'Slightly – They matter a little, but not much.',
        'Moderately – They influence me, but not fully.',
        'Very much – They strongly define me.',
        'Completely – My values make me who I am.'
      ],
      [
        'Stressed out – My stuff defines me.',
        'A bit concerned – It matters, but not everything.',
        'Indifferent – My worth isn’t tied to things.',
        'Positive – Change helps me grow.',
        'Adaptable – I express myself in new ways.'
      ],
      [
        'Financial rewards',
        'People care as much as I do.',
        'Growing together',
        'Doing something that makes me happy',
        'Being around people who truly support me'
      ]
    ];

    final curQuestionIndex = useState(0);
    final answers = useState(<int?>[null, null, null, null, null].toIList());
    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            20.h.verticalSpace,
            Text(
              'How I see the world? 🌍',
              style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.bold),
            ),
            8.h.verticalSpace,
            Text(
              'Let’s map how I experience life—in just 5 quick Qs!',
              style: TextStyle(fontSize: 16.sp, color: Colors.grey),
            ),
            24.h.verticalSpace,
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  20.h.verticalSpace,
                  Text(
                    '${curQuestionIndex.value + 1}. ${questions[curQuestionIndex.value]}',
                    style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.w600),
                  ),
                  16.h.verticalSpace,
                  for (int optionIndex = 0; optionIndex < options[curQuestionIndex.value].length; optionIndex++) ...[
                    GestureDetector(
                      onTap: () {
                        answers.value = answers.value.replace(curQuestionIndex.value, optionIndex);
                      },
                      child: Container(
                        height: 75.h,
                        padding: EdgeInsets.symmetric(vertical: 14.h, horizontal: 16.w),
                        margin: EdgeInsets.only(bottom: 12.h),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: answers.value[curQuestionIndex.value] == optionIndex ? context.colorScheme.primary : Colors.grey,
                            width: 2,
                          ),
                          borderRadius: BorderRadius.circular(12.r),
                          color: context.colorScheme.surface,
                        ),
                        child: Row(
                          children: [
                            Icon(
                              answers.value[curQuestionIndex.value] == optionIndex ? Icons.radio_button_checked : Icons.radio_button_off,
                              color: answers.value[curQuestionIndex.value] == optionIndex ? context.colorScheme.primary : Colors.grey,
                            ),
                            10.w.horizontalSpace,
                            Expanded(
                              child: Text(
                                options[curQuestionIndex.value][optionIndex],
                                style: TextStyle(fontSize: 16.sp, color: Colors.white),
                                softWrap: true,
                                overflow: TextOverflow.visible,
                              ),
                            )
                          ],
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
            if (controllerState is AsyncLoading)
              const Center(child: CircularProgressIndicator())
            else
              ElevatedButton(
                onPressed: answers.value[curQuestionIndex.value] == null
                    ? null
                    : () async {
                        if (curQuestionIndex.value < questions.length - 1) {
                          curQuestionIndex.value++;
                        } else {
                          if (answers.value.any((element) => element == null)) {
                            context.showTopSnackBarError('Please answer all questions');
                            return;
                          }
                          final noNullAnswers = answers.value.map((e) => e!).toList();
                          await controller.submitQA(noNullAnswers);
                          if (!controllerState.hasError && context.mounted) {
                            context.goNamed(BioInputScreen.routeName);
                          }
                        }
                      },
                style: ElevatedButton.styleFrom(
                  backgroundColor: context.colorScheme.primary,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.r)),
                  minimumSize: Size(double.infinity, 50.h),
                ),
                child: curQuestionIndex.value < questions.length - 1 ? const Text('NEXT') : const Text('ALL SET? LET’S GO'),
              ),
            16.h.verticalSpace,
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_response.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'core_insights_feedback_response.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

CoreInsightsFeedbackResponse _$CoreInsightsFeedbackResponseFromJson(Map<String, dynamic> json) {
  return _CoreInsightsFeedbackResponse.fromJson(json);
}

/// @nodoc
mixin _$CoreInsightsFeedbackResponse {
  int get status => throw _privateConstructorUsedError;

  /// Serializes this CoreInsightsFeedbackResponse to a JSON map.
  Map<String, dynamic> toJson() => throw _privateConstructorUsedError;

  /// Create a copy of CoreInsightsFeedbackResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $CoreInsightsFeedbackResponseCopyWith<CoreInsightsFeedbackResponse> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $CoreInsightsFeedbackResponseCopyWith<$Res> {
  factory $CoreInsightsFeedbackResponseCopyWith(CoreInsightsFeedbackResponse value, $Res Function(CoreInsightsFeedbackResponse) then) =
      _$CoreInsightsFeedbackResponseCopyWithImpl<$Res, CoreInsightsFeedbackResponse>;
  @useResult
  $Res call({int status});
}

/// @nodoc
class _$CoreInsightsFeedbackResponseCopyWithImpl<$Res, $Val extends CoreInsightsFeedbackResponse> implements $CoreInsightsFeedbackResponseCopyWith<$Res> {
  _$CoreInsightsFeedbackResponseCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of CoreInsightsFeedbackResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
  }) {
    return _then(_value.copyWith(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$CoreInsightsFeedbackResponseImplCopyWith<$Res> implements $CoreInsightsFeedbackResponseCopyWith<$Res> {
  factory _$$CoreInsightsFeedbackResponseImplCopyWith(_$CoreInsightsFeedbackResponseImpl value, $Res Function(_$CoreInsightsFeedbackResponseImpl) then) =
      __$$CoreInsightsFeedbackResponseImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int status});
}

/// @nodoc
class __$$CoreInsightsFeedbackResponseImplCopyWithImpl<$Res> extends _$CoreInsightsFeedbackResponseCopyWithImpl<$Res, _$CoreInsightsFeedbackResponseImpl>
    implements _$$CoreInsightsFeedbackResponseImplCopyWith<$Res> {
  __$$CoreInsightsFeedbackResponseImplCopyWithImpl(_$CoreInsightsFeedbackResponseImpl _value, $Res Function(_$CoreInsightsFeedbackResponseImpl) _then)
      : super(_value, _then);

  /// Create a copy of CoreInsightsFeedbackResponse
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? status = null,
  }) {
    return _then(_$CoreInsightsFeedbackResponseImpl(
      status: null == status
          ? _value.status
          : status // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc
@JsonSerializable()
class _$CoreInsightsFeedbackResponseImpl implements _CoreInsightsFeedbackResponse {
  const _$CoreInsightsFeedbackResponseImpl({required this.status});

  factory _$CoreInsightsFeedbackResponseImpl.fromJson(Map<String, dynamic> json) => _$$CoreInsightsFeedbackResponseImplFromJson(json);

  @override
  final int status;

  @override
  String toString() {
    return 'CoreInsightsFeedbackResponse(status: $status)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$CoreInsightsFeedbackResponseImpl && (identical(other.status, status) || other.status == status));
  }

  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  int get hashCode => Object.hash(runtimeType, status);

  /// Create a copy of CoreInsightsFeedbackResponse
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CoreInsightsFeedbackResponseImplCopyWith<_$CoreInsightsFeedbackResponseImpl> get copyWith =>
      __$$CoreInsightsFeedbackResponseImplCopyWithImpl<_$CoreInsightsFeedbackResponseImpl>(this, _$identity);

  @override
  Map<String, dynamic> toJson() {
    return _$$CoreInsightsFeedbackResponseImplToJson(
      this,
    );
  }
}

abstract class _CoreInsightsFeedbackResponse implements CoreInsightsFeedbackResponse {
  const factory _CoreInsightsFeedbackResponse({required final int status}) = _$CoreInsightsFeedbackResponseImpl;

  factory _CoreInsightsFeedbackResponse.fromJson(Map<String, dynamic> json) = _$CoreInsightsFeedbackResponseImpl.fromJson;

  @override
  int get status;

  /// Create a copy of CoreInsightsFeedbackResponse
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CoreInsightsFeedbackResponseImplCopyWith<_$CoreInsightsFeedbackResponseImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/signup_verification_screen.dart
```dart
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/controllers/verify_code_controller.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_request.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/sign_up_success.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';

void useInterval(VoidCallback callback, Duration delay) {
  final savedCallback = useRef(callback);
  savedCallback.value = callback;

  useEffect(
    () {
      final timer = Timer.periodic(delay, (_) => savedCallback.value());
      return timer.cancel;
    },
    [delay],
  );
}

class SignUpVerificationScreen extends HookConsumerWidget {
  const SignUpVerificationScreen({super.key});
  const SignUpVerificationScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'signup-verification';

  static final _otpFormKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final otpControllers = List.generate(4, (_) => useTextEditingController());
    final focusNodes = List.generate(4, (_) => useFocusNode());
    final hasEnteredOtp = useState(false);
    final counter = useState(60);

    void updateHasEnteredOtp() {
      hasEnteredOtp.value = otpControllers.every((controller) => controller.text.isNotEmpty);
    }

    useInterval(
      () {
        if (counter.value > 0) {
          counter.value--;
        }
      },
      const Duration(seconds: 1),
    );

    useEffect(
      () {
        for (final controller in otpControllers) {
          controller.addListener(updateHasEnteredOtp);
        }
        return () {
          for (final controller in otpControllers) {
            controller.removeListener(updateHasEnteredOtp);
          }
        };
      },
      [otpControllers],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Form(
              key: _otpFormKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('We sent you a code', style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.bold)),
                  16.sizedBoxH,
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: List.generate(4, (index) {
                      return SizedBox(
                        width: 72.w,
                        child: CustomTextFormField(
                          centerText: true,
                          focusNode: focusNodes[index],
                          controller: otpControllers[index],
                          validator: null,
                          keyboardType: TextInputType.number,
                          autoFocus: index == 0,
                          showSuffix: false,
                          onChanged: (value) {
                            if (value.isNotEmpty && index < otpControllers.length - 1) {
                              focusNodes[index + 1].requestFocus();
                            } else {
                              focusNodes[index].unfocus();
                            }
                          },
                        ),
                      );
                    }),
                  ),
                  20.sizedBoxH,
                  if (counter.value == 0)
                    Center(
                      child: InkWell(
                        onTap: () {
                          counter.value = 60;
                        },
                        child: Text(
                          'Resend Code',
                          style: TextStyle(
                            fontWeight: FontWeight.w500,
                            fontSize: 12.sp,
                            color: context.colorScheme.primary,
                          ),
                        ),
                      ),
                    )
                  else
                    Center(
                      child: RichText(
                        text: TextSpan(
                          text: 'Resend code',
                          style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w500),
                          children: [
                            TextSpan(
                              text: ' in ',
                              style: TextStyle(color: context.colorScheme.onSurfaceVariant),
                            ),
                            TextSpan(
                              text: '${counter.value}',
                              style: TextStyle(color: context.colorScheme.primary),
                            ),
                            TextSpan(
                              text: ' s',
                              style: TextStyle(color: context.colorScheme.onSurfaceVariant),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            OutlinedButton(
              onPressed: hasEnteredOtp.value
                  ? () async {
                      if (_otpFormKey.currentState?.validate() != true) return;

                      final userId = ref.read(createUserControllerProvider).createUserResponse!.userId;
                      final code = otpControllers.map((c) => c.text).join();

                      final result = await ref.read(verifyCodeProvider(VerifyCodeRequest(userId: userId, code: code)).future);
                      if (!context.mounted) return;
                      if (result) {
                        final createUserState = ref.read(createUserControllerProvider);
                        final username = createUserState.userName;
                        final password = createUserState.password;
                        if (username == null || password == null) {
                          talker.warning('Username or password is null after signing up');
                          return;
                        }
                        ref.read(authControllerProvider.notifier).signIn(LoginRequest(username: username, password: password));
                        context.goNamed(SignUpSuccessScreen.routeName);
                        return;
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text('Invalid code. Please try again.')),
                        );
                      }
                    }
                  : null,
              child: const Text('Verify'),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/views/widgets/avatar.dart
```dart
import 'dart:io';
import 'dart:math';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/constants/constants.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/controllers/current_avatar.dart';
import 'package:peer_circle_app/gen/assets.gen.dart';

class Avatar extends HookConsumerWidget {
  const Avatar({
    super.key,
    this.isLoading = false,
    this.avatarSize = kAvatarSize,
    this.currentStep = 0,
    this.showProgress = false,
    this.showTextOverlay = false,
    this.backgroundColor,
    this.useDigital = false,
  });

  final bool isLoading;
  final double avatarSize;
  final int currentStep;
  final bool showProgress;
  final bool showTextOverlay;
  final Color? backgroundColor;
  final bool useDigital;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final curAvatar = ref.watch(currentAvatarProvider);

    return Padding(
      padding: EdgeInsets.all(16.0.r),
      child: SizedBox(
        width: avatarSize.r,
        height: avatarSize.r,
        child: Stack(
          alignment: Alignment.center,
          children: [
            // Arc Progress
            if (showProgress && !isLoading)
              CustomPaint(
                size: Size(avatarSize.r, avatarSize.r),
                painter: _ArcProgressPainter(
                  currentStep: currentStep,
                ),
              ),

            Container(
              width: avatarSize.r,
              height: avatarSize.r,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(
                  color: Colors.white,
                  width: 2.r,
                ),
              ),
              child: Opacity(
                opacity: isLoading ? 0.2 : 1,
                child: useDigital
                    ? CircleAvatar(
                        radius: 50.r,
                        backgroundImage: Assets.images.baseAvatar.image().image,
                        backgroundColor: backgroundColor ?? context.colorScheme.surfaceDim,
                      )
                    : CircleAvatar(
                        radius: 50.r,
                        backgroundImage: curAvatar != null
                            ? kIsWeb
                                ? NetworkImage(curAvatar.path)
                                : Image.file(File(curAvatar.path)).image
                            : null,
                        backgroundColor: backgroundColor ?? context.colorScheme.surfaceDim,
                        child: curAvatar == null
                            ? Icon(
                                Icons.person,
                                size: 50.r,
                                color: context.colorScheme.onSurface,
                              )
                            : null,
                      ),
              ),
            ),

            // "Who I am?" text overlay
            if (showTextOverlay && !isLoading)
              Positioned(
                bottom: 20.h,
                child: Container(
                  decoration: BoxDecoration(
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.5),
                        blurRadius: 8,
                      ),
                    ],
                  ),
                  child: Text(
                    'Who I am?',
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),

            // Loading indicator
            if (isLoading)
              Positioned(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SpinKitFadingCircle(
                      size: 32.r,
                      color: context.colorScheme.primary,
                    ),
                    Text(
                      'Uploading!',
                      style: TextStyle(
                        fontSize: 14.sp,
                        fontWeight: FontWeight.bold,
                        color: context.colorScheme.primary,
                        fontStyle: FontStyle.italic,
                        shadows: [
                          Shadow(
                            color: Colors.black.withValues(alpha: 0.6),
                            blurRadius: 4,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }
}

class _ArcProgressPainter extends CustomPainter {
  _ArcProgressPainter({
    required this.currentStep,
  });

  final int currentStep;

  @override
  void paint(Canvas canvas, Size size) {
    final strokeWidth = 10.0.r;
    final radius = size.width / 2;

    const arcAngle = (2 * pi) / kOnboardingTotalSteps;
    final arcPadding = 8.r;
    final rect = Rect.fromCircle(
      center: Offset(radius, radius),
      radius: radius + strokeWidth / 2 + arcPadding,
    );

    final basePaint = Paint()
      ..color = Colors.transparent
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth
      ..strokeCap = StrokeCap.round;

    final activePaint = Paint()
      ..shader = const SweepGradient(
        colors: [
          Color(0xFF58B90A),
          Color(0xffA5FF32),
        ],
        transform: GradientRotation(-pi / 2 - pi / 6), // match arc start
      ).createShader(rect)
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth
      ..strokeCap = StrokeCap.round;

    // 👉 Amount of angle we need to subtract per cap
    final capOffsetAngle = strokeWidth / rect.width * 2 * pi / 2;

    var start = -pi / 2 - pi / 6;
    for (var i = 0; i < kOnboardingTotalSteps; i++) {
      final paint = i < currentStep ? activePaint : basePaint;

      // Subtract a bit on both sides of the arc to make room for rounded ends
      final adjustedArc = arcAngle - capOffsetAngle + 0.05;

      canvas.drawArc(
        rect,
        start + capOffsetAngle / 2,
        adjustedArc,
        false,
        paint,
      );

      start += arcAngle;
    }
  }

  @override
  bool shouldRepaint(covariant _ArcProgressPainter oldDelegate) {
    return oldDelegate.currentStep != currentStep;
  }
}

const kAvatarSize = 120.0;

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/views/screens/profile_completion_screen.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/auth/views/widgets/name_and_username.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/widgets/avatar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/controllers/bio_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/controllers/core_insights_feedback_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/views/screens/personality_card_swipe_screen.dart';

class ProfileCompletionScreen extends HookConsumerWidget {
  const ProfileCompletionScreen({super.key});
  const ProfileCompletionScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'profile-completion';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final coreInsightsFeedbackController = ref.watch(coreInsightsFeedbackControllerProvider.notifier);
    final coreInsightsFeedbackState = ref.watch(coreInsightsFeedbackControllerProvider);
    final archetype = ref.watch(bioControllerProvider.select((value) => value.value?.archetype));
    final insights = ref.watch(bioControllerProvider.select((value) => value.value?.insights)) ?? IList();
    final selectedInsights = useState<IMap<String, bool>>(
      IMap.fromEntries(
        InsightType.values.map((e) => MapEntry(e.key, false)),
      ),
    );

    useEffect(() {
      if (coreInsightsFeedbackState.hasError) {
        context.showTopSnackBarError('Error submitting insights');
      }
      return;
    }, [coreInsightsFeedbackState]);

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: kDefaultScaffoldPadding(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text.rich(
              TextSpan(
                text: 'We see a... ',
                style: TextStyle(fontSize: 22.sp, color: Colors.white),
                children: [
                  TextSpan(
                    text: archetype,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ],
              ),
              textAlign: TextAlign.left,
            ),
            Text(
              'Your profile shows us so far...',
              style: TextStyle(fontSize: 16.sp, color: Colors.grey),
              textAlign: TextAlign.left,
            ),
            16.verticalSpace,
            const Avatar(
              currentStep: 3,
              showProgress: true,
              showTextOverlay: true,
            ),
            // Name + handle
            16.verticalSpace,
            const NameAndUsername(),
            16.verticalSpace,
            Text(
              '👇',
              style: TextStyle(fontSize: 24.sp),
              textAlign: TextAlign.center,
            ),
            16.verticalSpace,
            Text(
              'Tap what clicks!',
              style: TextStyle(fontSize: 20.sp, fontWeight: FontWeight.w600, color: context.colorScheme.primary),
              textAlign: TextAlign.center,
            ),
            16.verticalSpace,
            Expanded(
              child: ListView.separated(
                itemCount: insights.length,
                separatorBuilder: (_, __) => 0.verticalSpace,
                itemBuilder: (context, index) {
                  final insight = insights[index];
                  final isSelected = selectedInsights.value[insight.type] ?? false;

                  return CheckboxListTile(
                    value: isSelected,
                    onChanged: (bool? newValue) {
                      selectedInsights.value = selectedInsights.value.update(
                        insight.type,
                        (value) => newValue ?? false,
                        ifAbsent: () => newValue ?? false,
                      );
                    },
                    contentPadding: EdgeInsets.zero,
                    controlAffinity: ListTileControlAffinity.leading,
                    activeColor: Colors.green,
                    checkColor: Colors.white,
                    tileColor: Colors.transparent,
                    side: const BorderSide(color: Colors.white),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.r)),
                    checkboxShape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(4.r)),
                    checkboxScaleFactor: 1.6,
                    title: Text.rich(
                      TextSpan(
                        text: insight.text,
                        style: TextStyle(
                          fontSize: 18.sp,
                          color: Colors.white,
                          fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                        ),
                        children: [
                          if (insight.connector.isNotEmpty)
                            TextSpan(
                              text: '... ${insight.connector}...',
                              style: TextStyle(
                                fontSize: 16.sp,
                                color: Colors.grey,
                                fontWeight: FontWeight.normal,
                              ),
                            ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
            // CTA Button
            coreInsightsFeedbackState.maybeWhen(
              loading: () => const SpinKitDualRing(
                color: Colors.green,
              ),
              orElse: () => SizedBox(
                        width: double.infinity,
                        child: FilledButton(
                          onPressed: () async {
                            await coreInsightsFeedbackController.submitInsights(selectedInsights.value.unlock);
                            final state = ref.read(coreInsightsFeedbackControllerProvider);
                            if (!state.hasError && context.mounted) {
                              context.goNamed(PersonalityCardSwipeScreen.routeName);
                            }
                          },
                          style: FilledButton.styleFrom(
                            backgroundColor: Colors.green,
                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.r)),
                            minimumSize: Size(double.infinity, 52.h),
                          ),
                          child: Text('Discover My Social Energy', style: TextStyle(fontSize: 16.sp)),
                        ),
                      ),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/navigation_history/navigation_state.freezed.dart
```dart
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'navigation_state.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$NavigationState {
  IList<String> get history => throw _privateConstructorUsedError;
  IList<String> get popped => throw _privateConstructorUsedError;

  /// Create a copy of NavigationState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $NavigationStateCopyWith<NavigationState> get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $NavigationStateCopyWith<$Res> {
  factory $NavigationStateCopyWith(NavigationState value, $Res Function(NavigationState) then) = _$NavigationStateCopyWithImpl<$Res, NavigationState>;
  @useResult
  $Res call({IList<String> history, IList<String> popped});
}

/// @nodoc
class _$NavigationStateCopyWithImpl<$Res, $Val extends NavigationState> implements $NavigationStateCopyWith<$Res> {
  _$NavigationStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of NavigationState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? history = null,
    Object? popped = null,
  }) {
    return _then(_value.copyWith(
      history: null == history
          ? _value.history
          : history // ignore: cast_nullable_to_non_nullable
              as IList<String>,
      popped: null == popped
          ? _value.popped
          : popped // ignore: cast_nullable_to_non_nullable
              as IList<String>,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$NavigationStateImplCopyWith<$Res> implements $NavigationStateCopyWith<$Res> {
  factory _$$NavigationStateImplCopyWith(_$NavigationStateImpl value, $Res Function(_$NavigationStateImpl) then) = __$$NavigationStateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({IList<String> history, IList<String> popped});
}

/// @nodoc
class __$$NavigationStateImplCopyWithImpl<$Res> extends _$NavigationStateCopyWithImpl<$Res, _$NavigationStateImpl>
    implements _$$NavigationStateImplCopyWith<$Res> {
  __$$NavigationStateImplCopyWithImpl(_$NavigationStateImpl _value, $Res Function(_$NavigationStateImpl) _then) : super(_value, _then);

  /// Create a copy of NavigationState
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? history = null,
    Object? popped = null,
  }) {
    return _then(_$NavigationStateImpl(
      history: null == history
          ? _value.history
          : history // ignore: cast_nullable_to_non_nullable
              as IList<String>,
      popped: null == popped
          ? _value.popped
          : popped // ignore: cast_nullable_to_non_nullable
              as IList<String>,
    ));
  }
}

/// @nodoc

class _$NavigationStateImpl extends _NavigationState {
  const _$NavigationStateImpl({this.history = const IListConst([]), this.popped = const IListConst([])}) : super._();

  @override
  @JsonKey()
  final IList<String> history;
  @override
  @JsonKey()
  final IList<String> popped;

  @override
  String toString() {
    return 'NavigationState(history: $history, popped: $popped)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NavigationStateImpl &&
            const DeepCollectionEquality().equals(other.history, history) &&
            const DeepCollectionEquality().equals(other.popped, popped));
  }

  @override
  int get hashCode => Object.hash(runtimeType, const DeepCollectionEquality().hash(history), const DeepCollectionEquality().hash(popped));

  /// Create a copy of NavigationState
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NavigationStateImplCopyWith<_$NavigationStateImpl> get copyWith => __$$NavigationStateImplCopyWithImpl<_$NavigationStateImpl>(this, _$identity);
}

abstract class _NavigationState extends NavigationState {
  const factory _NavigationState({final IList<String> history, final IList<String> popped}) = _$NavigationStateImpl;
  const _NavigationState._() : super._();

  @override
  IList<String> get history;
  @override
  IList<String> get popped;

  /// Create a copy of NavigationState
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NavigationStateImplCopyWith<_$NavigationStateImpl> get copyWith => throw _privateConstructorUsedError;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_in_flow/sign_in_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/constants/assets.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';

class SignInScreen extends HookConsumerWidget {
  const SignInScreen({super.key});
  const SignInScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const String routeName = 'sign-in';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Text controllers using flutter_hooks
    final userController = useTextEditingController();
    final passwordController = useTextEditingController();

    // Track if we should show or hide the password
    final obscureText = useState(true);

    // Access your AuthController
    final authNotifier = ref.read(authControllerProvider.notifier);
    final authState = ref.watch(authControllerProvider);

    // A form key to validate the Form below
    final formKey = useRef(GlobalKey<FormState>());

    // Manage enabling/disabling of the "Login" button
    final isButtonEnabled = useState(false);

    // A callback to re-check if the form is valid
    void validateForm() {
      // If the form is valid, enable the button
      isButtonEnabled.value = formKey.value.currentState?.validate() ?? false;
    }

    // Validate whenever user or password changes
    useEffect(
      () {
        userController.addListener(validateForm);
        passwordController.addListener(validateForm);
        return () {
          userController.removeListener(validateForm);
          passwordController.removeListener(validateForm);
        };
      },
      [userController, passwordController],
    );

    // Show snack bar if login failed
    useEffect(
      () {
        if (authState.hasError) {
          Future(() {
            if (!context.mounted) return;
            context.showTopSnackBarError('Login failed. Please try again');
          });
        }
        return;
      },
      [authState],
    );

    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        appBar: const CustomAppBar(),
        body: Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Form portion
              Form(
                key: formKey.value,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SizedBox(height: 15),
                    Hero(
                      tag: 'welcome-back',
                      child: Row(
                        children: [
                          Material(
                            child: Text(
                              'Welcome back',
                              style: context.textTheme.displaySmall,
                            ),
                          ),
                          8.sizedBoxW,
                          Image.asset(
                            wavingHandIcon,
                            height: 32.h,
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 15),
                    Hero(
                      tag: 'username',
                      child: Material(
                        child: CustomTextFormField(
                          autoFocus: true,
                          controller: userController,
                          hintText: 'Username',
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter a username';
                            }
                            return null;
                          },
                        ),
                      ),
                    ),
                    const SizedBox(height: 15),
                    Hero(
                      tag: 'password',
                      child: Material(
                        child: CustomTextFormField(
                          controller: passwordController,
                          obscureText: obscureText.value,
                          hintText: 'Password',
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please enter a password';
                            }
                            return null;
                          },
                          suffixIcon: GestureDetector(
                            onTap: () => obscureText.value = !obscureText.value,
                            child: Icon(
                              obscureText.value ? Icons.visibility_off_outlined : Icons.visibility_outlined,
                              color: context.colorScheme.onInverseSurface,
                            ),
                          ),
                        ),
                      ),
                    ),
                    Hero(
                      tag: 'forgot-password',
                      child: Container(
                        alignment: Alignment.centerRight,
                        child: TextButton(
                          onPressed: () {},
                          style: TextButton.styleFrom(
                            padding: EdgeInsets.zero,
                          ),
                          child: const Text('Forgot password?'),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              if (authState.isLoading)
                const LinearProgressIndicator()
              else
                FilledButton(
                  // Disable the button if username/password is invalid
                  onPressed: isButtonEnabled.value
                      ? () async {
                          if (formKey.value.currentState?.validate() ?? false) {
                            final loginRequest = LoginRequest(
                              username: userController.text,
                              password: passwordController.text,
                            );
                            await authNotifier.signIn(loginRequest);
                          }
                        }
                      : null,
                  child: const Text('Login'),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/skin/views/screens/skin_profile_screen.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart';

class SkinProfileScreen extends HookConsumerWidget {
  const SkinProfileScreen({super.key});
  const SkinProfileScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'skin-profile';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final selectedSkinType = useState<SkinType?>(null);
    final selectedConcerns = useState<ISet<SkinConcern>>(ISet());
    final skinTypeVisible = useState<bool>(true);
    final skinConcernVisible = useState<bool>(true);

    return Scaffold(
      appBar: CustomAppBar(
        trailing: [
          TextButton(
            onPressed: () {},
            child: const Text(
              'Skip',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 24.h),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Your skin',
              style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.bold, color: Colors.white),
            ),
            8.verticalSpace,
            Text(
              'Find Peers who have a similar skin profile.\nTap 👁 icon to make private on your profile.',
              style: TextStyle(fontSize: 14.sp, color: Colors.grey),
            ),
            8.verticalSpace,
            const Divider(),
            24.verticalSpace,

            // Skin type
            Row(
              children: [
                Text('Skin type', style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white)),
                IconButton(
                  icon: Icon(
                    skinTypeVisible.value ? Icons.visibility : Icons.visibility_off,
                    size: 18,
                    color: skinTypeVisible.value ? Colors.white : Colors.grey,
                  ),
                  onPressed: () {
                    skinTypeVisible.value = !skinTypeVisible.value;
                  },
                ),
              ],
            ),
            12.verticalSpace,
            Wrap(
              spacing: 8.w,
              runSpacing: 8.h,
              children: SkinType.values.map((type) {
                final isSelected = selectedSkinType.value == type;
                return FilterChip(
                  label: Text(
                    type.display,
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  selected: isSelected,
                  onSelected: (isSelected) {
                    if (isSelected) {
                      selectedSkinType.value = type;
                    } else {
                      selectedSkinType.value = null;
                    }
                  },
                  checkmarkColor: Colors.white,
                  selectedColor: Colors.green,
                  backgroundColor: Colors.transparent,
                  shape: const StadiumBorder(
                    side: BorderSide(color: Colors.white),
                  ),
                  showCheckmark: isSelected,
                  visualDensity: VisualDensity.compact,
                );
              }).toList(),
            ),
            8.verticalSpace,
            const Divider(),
            24.verticalSpace,

            // Skin concerns
            Row(
              children: [
                Text('Skin concerns', style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white)),
                IconButton(
                  icon: Icon(
                    skinConcernVisible.value ? Icons.visibility : Icons.visibility_off,
                    size: 18,
                    color: skinConcernVisible.value ? Colors.white : Colors.grey,
                  ),
                  onPressed: () {
                    skinConcernVisible.value = !skinConcernVisible.value;
                  },
                ),
              ],
            ),
            12.verticalSpace,
            Wrap(
              spacing: 8.w,
              runSpacing: 8.h,
              children: SkinConcern.values.map((concern) {
                final isSelected = selectedConcerns.value.contains(concern);
                return FilterChip(
                  label: Text(
                    concern.display,
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  selected: isSelected,
                  onSelected: (_) {
                    selectedConcerns.value = isSelected ? selectedConcerns.value.remove(concern) : selectedConcerns.value.add(concern);
                  },
                  checkmarkColor: Colors.white,
                  selectedColor: Colors.green,
                  backgroundColor: Colors.transparent,
                  shape: const StadiumBorder(
                    side: BorderSide(color: Colors.white),
                  ),
                  showCheckmark: isSelected,
                  visualDensity: VisualDensity.compact,
                );
              }).toList(),
            ),

            const Spacer(),

            // Continue button
            SizedBox(
              width: double.infinity,
              child: OutlinedButton(
                onPressed: selectedSkinType.value != null
                    ? () {
                  // proceed
                }
                    : null,
                child: const Text(
                  'Continue',
                ),
              ),
            ),
            12.verticalSpace,
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/hair/views/screens/hair_profile_screen.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart';

class HairProfileScreen extends HookConsumerWidget {
  const HairProfileScreen({super.key});
  const HairProfileScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'hair-profile';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final selectedHairTypes = useState<ISet<HairType>>(ISet());
    final selectedConcerns = useState<ISet<HairConcern>>(ISet());
    final hairTypeVisible = useState<bool>(true);
    final hairConcernVisible = useState<bool>(true);

    return Scaffold(
      appBar: CustomAppBar(
        trailing: [
          TextButton(
            onPressed: () {},
            child: const Text(
              'Skip',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 24.h),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Your hair',
              style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.bold, color: Colors.white),
            ),
            8.verticalSpace,
            Text(
              'Find Peers who have a similar hair profile.\nTap 👁 icon to make private on your profile.',
              style: TextStyle(fontSize: 14.sp, color: Colors.grey),
            ),
            8.verticalSpace,
            const Divider(),
            24.verticalSpace,

            // Hair type
            Row(
              children: [
                Text('Hair type', style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white)),
                IconButton(
                  icon: Icon(
                    hairTypeVisible.value ? Icons.visibility : Icons.visibility_off,
                    size: 18,
                    color: hairTypeVisible.value ? Colors.white : Colors.grey,
                  ),
                  onPressed: () => hairTypeVisible.value = !hairTypeVisible.value,
                ),
              ],
            ),
            12.verticalSpace,
            Wrap(
              spacing: 8.w,
              runSpacing: 8.h,
              children: HairType.values.map((type) {
                final isSelected = selectedHairTypes.value.contains(type);
                return FilterChip(
                  label: Text(
                    type.display,
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  selected: isSelected,
                  onSelected: (_) {
                    selectedHairTypes.value = isSelected
                        ? selectedHairTypes.value.remove(type)
                        : selectedHairTypes.value.add(type);
                  },
                  checkmarkColor: Colors.white,
                  selectedColor: Colors.green,
                  backgroundColor: Colors.transparent,
                  shape: const StadiumBorder(
                    side: BorderSide(color: Colors.white),
                  ),
                  showCheckmark: isSelected,
                  visualDensity: VisualDensity.compact,
                );
              }).toList(),
            ),

            8.verticalSpace,
            const Divider(),
            24.verticalSpace,

            // Hair concerns
            Row(
              children: [
                Text('Hair concerns', style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white)),
                IconButton(
                  icon: Icon(
                    hairConcernVisible.value ? Icons.visibility : Icons.visibility_off,
                    size: 18,
                    color: hairConcernVisible.value ? Colors.white : Colors.grey,
                  ),
                  onPressed: () => hairConcernVisible.value = !hairConcernVisible.value,
                ),
              ],
            ),
            12.verticalSpace,
            Wrap(
              spacing: 8.w,
              runSpacing: 8.h,
              children: HairConcern.values.map((concern) {
                final isSelected = selectedConcerns.value.contains(concern);
                return FilterChip(
                  label: Text(
                    concern.display,
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.w500,
                      color: Colors.white,
                    ),
                  ),
                  selected: isSelected,
                  onSelected: (_) {
                    selectedConcerns.value = isSelected
                        ? selectedConcerns.value.remove(concern)
                        : selectedConcerns.value.add(concern);
                  },
                  checkmarkColor: Colors.white,
                  selectedColor: Colors.green,
                  backgroundColor: Colors.transparent,
                  shape: const StadiumBorder(
                    side: BorderSide(color: Colors.white),
                  ),
                  showCheckmark: isSelected,
                  visualDensity: VisualDensity.compact,
                );
              }).toList(),
            ),

            const Spacer(),

            // Continue button
            SizedBox(
              width: double.infinity,
              child: OutlinedButton(
                onPressed: selectedHairTypes.value.isNotEmpty
                    ? () {
                  // proceed
                }
                    : null,
                child: const Text(
                  'Continue',
                ),
              ),
            ),
            12.verticalSpace,
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/onboarding_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/welcome_signup_screen.dart';

final List<OnboardingScreenModel> list = [
  OnboardingScreenModel(
    imagePath: 'assets/images/onboarding_1.png',
    message: 'Snapshot the Real You! Shape your beauty & wellness experience.',
    title: 'Create a Peer Snapshot',
  ),
  OnboardingScreenModel(
    imagePath: 'assets/images/onboarding_2.png',
    message: 'Find your vibe or curate a real crew in your own happy place unique to the real you. No judgment here.',
    title: 'Curate A Circle Of Kindred Spirits',
  ),
  OnboardingScreenModel(
    imagePath: 'assets/images/onboarding_3.png',
    message: 'Chat about your passions, culture & quirks with people who accept the real you. No hiding, just openness.',
    title: 'Chats That Go Beyond, “Hey!”',
  ),
];

class OnboardingScreen extends HookConsumerWidget {
  const OnboardingScreen({super.key});
  const OnboardingScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'onboarding-screen';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final pageController = usePageController();
    final currentPage = useState(0);

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Expanded(
              child: PageView.builder(
                controller: pageController,
                onPageChanged: (index) {
                  currentPage.value = index;
                },
                itemCount: list.length,
                itemBuilder: (context, index) {
                  return _OnboardingBody(model: list[index]);
                },
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: List.generate(list.length, (index) {
                return AnimatedContainer(
                  duration: const Duration(milliseconds: 300),
                  margin: const EdgeInsets.symmetric(horizontal: 5),
                  height: 12.h,
                  width: currentPage.value == index ? 12 : 8,
                  decoration: BoxDecoration(
                    color: currentPage.value == index ? primaryAppColor : whiteColor,
                    shape: BoxShape.circle,
                  ),
                );
              }),
            ),
            20.sizedBoxH,
            // CustomButton(
            //   buttonText: 'Continue',
            //   borderRadius: 30.h,
            //   buttonHeight: 45.h,
            //   buttonColor: transparentColor,
            //   onTap: () {
            //     // if no more page, go to welcome sign up screen
            //     if (currentPage.value == list.length - 1) {
            //       context.goNamed(WelcomeSignUpScreen.routeName);
            //     } else {
            //       pageController.nextPage(
            //         duration: const Duration(milliseconds: 300),
            //         curve: Curves.easeIn,
            //       );
            //     }
            //   },
            //   textStyle: whiteFontSize15Bold(),
            //   borderSideColor: whiteColor,
            //   borderSideWidth: 1,
            // ),
            OutlinedButton(
              onPressed: () {
                // if no more page, go to welcome sign up screen
                if (currentPage.value == list.length - 1) {
                  context.goNamed(WelcomeSignUpScreen.routeName);
                } else {
                  pageController.nextPage(
                    duration: const Duration(milliseconds: 300),
                    curve: Curves.easeIn,
                  );
                }
              },
              child: const Text('Continue'),
            ),
            20.sizedBoxH,
          ],
        ),
      ),
    );
  }
}

class _OnboardingBody extends HookConsumerWidget {
  const _OnboardingBody({required this.model});

  final OnboardingScreenModel model;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Padding(
      padding: EdgeInsets.all(30.h),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Expanded(child: Image.asset(model.imagePath!)),
          20.sizedBoxH,
          Column(
            children: [
              Text(
                model.title!,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontWeight: FontWeight.w400,
                  fontSize: 26.sp,
                  color: whiteColor,
                ),
              ),
              Text(
                model.message!,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontWeight: FontWeight.w400,
                  fontSize: 16.sp,
                  color: onboardingScreenGreyTextColor,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class OnboardingScreenModel {
  OnboardingScreenModel({
    required this.title,
    required this.message,
    required this.imagePath,
  });
  String? title;
  String? message;
  String? imagePath;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/birthday_input_screen.dart
```dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/core/functions/date_formatters.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/create_password_screen.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';

final _formKey = GlobalKey<FormState>();

class BirthdayInputScreen extends HookConsumerWidget {
  const BirthdayInputScreen({super.key});
  const BirthdayInputScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'birthday-input-screen';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final initialDateTime = DateTime(2004, 12, 31);
    final createUserController = ref.read(createUserControllerProvider.notifier);
    final createUserState = ref.watch(createUserControllerProvider);
    final birthdayController = useTextEditingController(text: DateFormat('yyyy-MM-dd').format(initialDateTime));
    final birthdayFormatted = useState('2004-12-31');
    final isButtonEnabled = useState(false);
    void updateButtonState() {
      isButtonEnabled.value = birthdayController.text.isNotEmpty;
    }

    useEffect(
      () {
        birthdayController.addListener(updateButtonState);
        return () => birthdayController.removeListener(updateButtonState);
      },
      [birthdayController],
    );

    // if username not inputted, reroute
    // useEffect(
    //   () {
    //     if (createUserState.firstName == null || createUserState.lastName == null) {
    //       Future(() {
    //         if (!context.mounted) return;
    //         context.goNamed(ChangeUserNameScreen.routeName);
    //       });
    //     }
    //     return;
    //   },
    //   [],
    // );

    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: const CustomAppBar(),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          32.sizedBoxH,
          Expanded(
            child: Padding(
              padding: EdgeInsets.symmetric(horizontal: 16.w),
              child: Form(
                key: _formKey,
                autovalidateMode: AutovalidateMode.onUserInteraction,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Hi @${createUserState.firstName},',
                      style: TextStyle(
                        fontSize: 28.sp,
                        fontWeight: FontWeight.w700,
                      ),
                    ),
                    4.sizedBoxH,
                    Text(
                      "What's your birthday?",
                      style: TextStyle(
                        fontSize: 24.sp,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    16.sizedBoxH,
                    Text(
                      'You can change your username later in the settings if you wish to',
                      style: context.textTheme.labelMedium,
                    ),
                    32.sizedBoxH,
                    CustomTextFormField(
                      autoFocus: true,
                      controller: birthdayController,
                      readOnly: true,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter your birthday';
                        }
                        return null;
                      },
                      hintText: 'Your date of birth',
                      showSuffix: false,
                    ),
                    24.sizedBoxH,
                  ],
                ),
              ),
            ),
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 16.w),
                child: OutlinedButton(
                  onPressed: isButtonEnabled.value
                      ? () {
                          if (_formKey.currentState?.validate() ?? false) {
                            createUserController.updateDOB(birthdayFormatted.value);
                            context.goNamed(CreatePasswordScreen.routeName);
                          }
                        }
                      : null,
                  child: const Text('Continue'),
                ),
              ),
              32.sizedBoxH,
              Container(
                height: 216.h,
                color: context.colorScheme.surfaceDim,
                child: CupertinoTheme(
                  data: CupertinoThemeData(brightness: context.theme.brightness),
                  child: CupertinoDatePicker(
                    minimumDate: DateTime(1900),
                    maximumDate: DateTime(2004, 12, 31),
                    initialDateTime: initialDateTime,
                    mode: CupertinoDatePickerMode.date,
                    backgroundColor: Colors.transparent,
                    onDateTimeChanged: (newDate) {
                      birthdayFormatted.value = formatDate(newDate.toString());
                      birthdayController.text = birthdayFormatted.value;
                    },
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/constants/assets.dart
```dart
const profileCardImage1 = 'assets/images/profile_card_image1.png';
const profileCardImage2 = 'assets/images/profile_card_image2.png';
const profileCardImage3 = 'assets/images/profile_card_image3.png';
const beautyWellnessCard1 = 'assets/images/beauty_wellness_card_1.png';
const beautyWellnessCard2 = 'assets/images/beauty_wellness_card_2.png';
const beautyWellnessCard3 = 'assets/images/beauty_wellness_card_3.png';
const beautyWellnessCard4 = 'assets/images/beauty_wellness_card_4.png';
const beautyWellnessCard5 = 'assets/images/beauty_wellness_card_5.png';

const beautyWellnessCard1_1 = 'assets/images/beauty_wellness_card_1.1.png';
const beautyWellnessCard1_2 = 'assets/images/beauty_wellness_card_1.2.png';
const beautyWellnessCard1_3 = 'assets/images/beauty_wellness_card_1.3.png';
const beautyWellnessCard1_4 = 'assets/images/beautyWellnessCard1_4.png';
const beautyWellnessCard1_5 = 'assets/images/beautyWellnessCard1_5.png';

const beautyWellnessCard2_1 = 'assets/images/beautyWellnessCard2_1.png';
const beautyWellnessCard2_2 = 'assets/images/beautyWellnessCard2_2.png';
const beautyWellnessCard2_3 = 'assets/images/beautyWellnessCard2_3.png';

const beautyWellnessLiterallyMeContainer = 'assets/images/literally_me_container_image.png';
const beautyWellnessNopeContainer = 'assets/images/nope_container_image.png';
const personIconImage = 'assets/images/person_icon_image.png';
const handEmojies = 'assets/images/hand_emojies.png';
const yourMakeUpScreenImage1 = 'assets/images/your_make_up_screen_image_1.png';
const yourMakeUpScreenImage2 = 'assets/images/your_make_up_screen_image_2.png';
const yourMakeUpScreenImage3 = 'assets/images/your_make_up_screen_image_3.png';
const beThereWhenItMattersDialogImage = 'assets/images/be_there_when_it_matters_dialog_image.png';

const selectImage1 = 'assets/images/select_image_1.png';
const selectImage2 = 'assets/images/select_image_2.png';
const selectImage3 = 'assets/images/select_image_3.png';

const discoverImage1 = 'assets/images/discover_image.png';
const discoverImage2 = 'assets/images/discover_image_2.png';

const selectChatImage1 = 'assets/images/select_chat_image_1.png';
const selectChatImage2 = 'assets/images/select_chat_image_2.png';
const selectChatImage3 = 'assets/images/select_chat_image_3.png';
const selectChatImage4 = 'assets/images/select_chat_image_4.png';
const selectChatImage5 = 'assets/images/select_chat_image_5.png';
const selectChatImage6 = 'assets/images/select_chat_image_6.png';
const selectChatImage7 = 'assets/images/select_chat_image_7.png';
const selectChatImage8 = 'assets/images/select_chat_image_8.png';
const selectChatImage9 = 'assets/images/select_chat_image_9.png';

const peerCircleExpandedImage = 'assets/images/peer_circle_expanded_image.png';

const testAvatar = 'assets/images/test_avatar.png';

const faceIDIcon = 'assets/icons/face_id_icon.png';
const clearIcon = 'assets/icons/clear_icon.png';
const visibilityIcon = 'assets/icons/visible_icon.png';
const visibilityOffIcon = 'assets/icons/visibility_off_icon.png';
const wavingHandIcon = 'assets/icons/waving_hand_icon.png';
const checkIconRounded = 'assets/icons/check_icon_rounded.png';
const handSwipeIcon = 'assets/icons/hand_swipe_icon.png';
const homeIcon = 'assets/icons/home.png';
const selectedHomeIcon = 'assets/icons/selected_home_icon.png';
const selectedSearchIcon = 'assets/icons/selected_search_icon.png';
const searchIcon = 'assets/icons/search.png';
const heartIcon = 'assets/icons/heart.png';

const favouriteIcon = 'assets/icons/Heart.png';
const homeFeedPinIcon = 'assets/icons/home_feed_pin_icon.png';
const peopleIcon = 'assets/icons/people_icon.png';
const threeDotsIconForHomeFeed = 'assets/icons/three_dots_icon_for_home_feed.png';
const likeIcon = 'assets/icons/like_icon.png';

const chatIcon = 'assets/icons/chat_icon.png';

const shareIcon = 'assets/icons/share_icon.png';
const feedChatCameraIcon = 'assets/icons/feed_chat_camera_icon.png';
const personPlusIcon = 'assets/icons/person_add_icon.png';
const clearIconWhiteBackground = 'assets/icons/clear_icon_white_background.png';

const selectedHeartIcon = 'assets/icons/selected_heart_icon.png';

const selectNewEraIcon = 'assets/icons/select_new_era_icon.png';
const circularUploadIcon = 'assets/icons/circular_upload_photo_icon.png';
const homeFeedMessageIconSmall = 'assets/icons/home_feed_message_icon_small.png';

const logo = 'assets/logo/logo.png';
const fullLogo = 'assets/logo/full_logo.png';

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/screens/drag_drop_guide_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/pronoun_drag_drop_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/drag_drop_template.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/widgets/color_container_with_avatar.dart';

class DragDropGuideScreen extends HookConsumerWidget {
  const DragDropGuideScreen({super.key});
  const DragDropGuideScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'drag-drop-guide';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bottomText = useState('Drag it home 🎯');
    final showContinueButton = useState(false);
    final initialText = RichText(
      text: TextSpan(
        children: [
          TextSpan(text: 'Press the green ', style: context.textTheme.bodyMedium),
          TextSpan(
            text: "'Real Me' ",
            style: context.textTheme.bodyMedium?.copyWith(
              fontWeight: FontWeight.bold,
              fontStyle: FontStyle.italic,
            ),
          ),
          TextSpan(text: 'circle, then drag & drop it onto your profile!', style: context.textTheme.bodyMedium),
        ],
      ),
    );
    final subtitleWidget = useState<Widget>(initialText);

    final textColour = ref.watch(curColourProvider.select((value) => value.textColour));
    final isFinished = useState(false);
    const categoryKey = CategoryKey.guide;
    if (isFinished.value) {
      return Scaffold(
        appBar: const CustomAppBar(),
        body: Align(
          alignment: Alignment.bottomCenter,
          child: ColorContainerWithAvatar(
            avatarCurStep: 2,
            height: 0.7.sh,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'All set 🔥',
                        style: context.textTheme.titleLarge?.copyWith(color: textColour),
                      ),
                      16.sizedBoxH,
                      Icon(
                        Icons.check_circle,
                        size: 50.sp,
                        color: textColour,
                      )
                    ],
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: Padding(
                    padding: EdgeInsets.only(right: kDefaultHorizontalPadding.w),
                    child: Directionality(
                      textDirection: TextDirection.rtl,
                      child: TextButton.icon(
                        onPressed: () {
                          ref.read(dragDropDataControllerProvider.notifier).clearData();
                          context.goNamed(PronounDragDropScreen.routeName);
                        },
                        icon: Icon(
                          Icons.arrow_back_ios,
                          color: textColour,
                        ),
                        label: Text(
                          "LET'S TALK PRONOUNS",
                          style: context.textTheme.labelLarge?.copyWith(color: textColour),
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }
    return DragDropTemplate(
      key: const Key('drag_drop_guide_screen'),
      title: 'Drag & drop 101',
      subtitle: subtitleWidget.value,
      bottomText: bottomText.value,
      dataSet: categoryKey.items,
      categoryKey: categoryKey,
      onSelectionChanged: (selectedData) {
        if (selectedData.isNotEmpty) {
          bottomText.value = 'Just for me 🤫';
          subtitleWidget.value = Text(
            'Your space, your rules! Tap 👁 to make it private.',
            style: context.textTheme.bodyMedium,
          );

          if (!selectedData.first.visible) {
            showContinueButton.value = true;
            bottomText.value = 'Click the arrow button to continue';
          }
        } else {
          showContinueButton.value = false;
          bottomText.value = 'Drag it home 🎯';
          subtitleWidget.value = initialText;
        }
      },
      isInstruction: true,
      onNavForward: showContinueButton.value
          ? () {
              isFinished.value = true;
            }
          : null,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/views/widgets/profile_overview.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/widgets/avatar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/controllers/bio_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart';

class ProfilePreview extends HookConsumerWidget {
  const ProfilePreview();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bio = ref.watch(bioControllerProvider.select((value) => value.value?.bio));
    final curFavColour = ref.watch(curColourProvider.select((value) => value.colour));
    final curUser = ref.watch(authControllerProvider).valueOrNull;
    final dragDropData = ref.watch(dragDropDataControllerProvider);
    final pronoun = useState<String?>(null);

    useEffect(
      () {
        String? chosenPronoun;
        // = dragDropData[CategoryKey.pronouns.name]?.firstWhere((element) => element.visible)?.label;
        if (dragDropData.containsKey(CategoryKey.pronouns.name)) {
          if (dragDropData[CategoryKey.pronouns.name]!.any((element) => element.visible)) {
            chosenPronoun = dragDropData[CategoryKey.pronouns.name]!.firstWhere((element) => element.visible).label;
          }
        }
        Future(() {
          if (chosenPronoun != null && chosenPronoun != notTelling) {
            pronoun.value = chosenPronoun;
          } else {
            pronoun.value = null;
          }
        });
        return;
      },
      [dragDropData],
    );

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(16.w),
      decoration: BoxDecoration(
        color: context.colorScheme.surface,
        borderRadius: BorderRadius.circular(20.r),
        border: Border.all(color: curFavColour, width: 8),
      ),
      child: Column(
        children: [
          const Avatar(
            showProgress: true,
            currentStep: 3,
          ),
          8.verticalSpace,
          Text(
            '@${curUser?.userName}',
            style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.bold, color: Colors.white),
          ),
          Text(
            pronoun.value ?? '',
            style: TextStyle(fontSize: 14.sp, color: Colors.grey),
          ),
          8.verticalSpace,
          Text(
            bio ?? '',
            textAlign: TextAlign.center,
            style: TextStyle(fontSize: 14.sp, color: Colors.white),
          ),
          16.verticalSpace,
          const AboutMeSection(),
        ],
      ),
    );
  }
}

class AboutMeSection extends HookConsumerWidget {
  const AboutMeSection();

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final dragDropData = ref.watch(dragDropDataControllerProvider);
    final aboutMeTags = useState(<String>[]);

    useEffect(() {
      Future(() {
        aboutMeTags.value = dragDropData.values.expand((e) => e).where((element) => element.visible).map((e) => e.label).toList();
      });
      return;
    }, [dragDropData]);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          'About Me',
          style: TextStyle(fontSize: 16.sp, fontWeight: FontWeight.bold, color: Colors.white),
        ),
        8.h.verticalSpace,
        Wrap(
          spacing: 8.w,
          runSpacing: 8.h,
          children: [
            for (final tag in aboutMeTags.value) Tag(text: tag),
          ],
        ),
      ],
    );
  }
}

class Tag extends HookConsumerWidget {
  const Tag({required this.text});

  final String text;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12.w, vertical: 6.h),
      decoration: BoxDecoration(
        color: Colors.white.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(20.r),
      ),
      child: Text(
        text,
        style: TextStyle(fontSize: 14.sp, color: Colors.white),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/screens/overview_drag_drop_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/controllers/physical_core_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/draggable_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/views/screens/emotion_qa_screen.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/widgets/color_container_with_avatar.dart';

class OverviewDragDropScreen extends HookConsumerWidget {
  const OverviewDragDropScreen({super.key});
  const OverviewDragDropScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'overview-drag-drop';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final allSelectedData = ref.watch(dragDropDataControllerProvider);
    final curFavColour = ref.watch(curColourProvider);
    final physicalCoreController = ref.watch(physicalCoreControllerProvider.notifier);
    final physicalCoreControllerState = ref.watch(physicalCoreControllerProvider);

    // print error when state is error
    useEffect(
      () {
        if (physicalCoreControllerState.hasError) {
          Future(() {
            if (!context.mounted) return;
            context.showTopSnackBarError('Something went wrong, please try again');
          });
        }
        return;
      },
      [physicalCoreControllerState],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: EdgeInsets.symmetric(horizontal: kDefaultHorizontalPadding.w),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Who I am, at a glance',
                  style: context.textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
                ),
                8.sizedBoxH,
                const Text('This is my outer self so far—now, time to go deeper!'),
              ],
            ),
          ),
          16.sizedBoxH,
          Expanded(
            child: SizedBox(
              width: context.screenWidth,
              height: double.infinity,
            ),
          ),
          ColorContainerWithAvatar(
            avatarCurStep: 3,
            height: 0.7.sh,
            child: Column(
              children: [
                Expanded(
                  child: Center(
                    child: SingleChildScrollView(
                      child: Wrap(
                        spacing: 16.w,
                        runSpacing: 16.h,
                        children: [
                          for (final entry in allSelectedData.entries)
                            for (final item in entry.value)
                              CircleContainer(
                                showIcon: true,
                                visible: item.visible,
                                onTap: () {
                                  ref.read(dragDropDataControllerProvider.notifier).toggleVisibility(entry.key, item.label);
                                },
                                child: Center(
                                  child: DefaultTextStyle(
                                    style: TextStyle(
                                      color: Colors.black,
                                      fontSize: 16.r,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    child: Text(
                                      item.label, // Display the item name
                                      textAlign: TextAlign.center,
                                    ),
                                  ),
                                ),
                              ),
                        ],
                      ),
                    ),
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: physicalCoreControllerState.isLoading
                      ? const CircularProgressIndicator()
                      : Directionality(
                          textDirection: TextDirection.rtl,
                          child: TextButton.icon(
                            onPressed: () async {
                              await physicalCoreController.submitData();
                              if (!ref.read(physicalCoreControllerProvider).hasError && context.mounted) {
                                context.goNamed(EmotionalQAScreen.routeName);
                              }
                            },
                            label: Text(
                              'MY INNER SELF',
                              style: context.textTheme.bodyMedium?.copyWith(
                                color: curFavColour.textColour,
                              ),
                            ),
                            icon: Icon(
                              Icons.arrow_back_ios,
                              color: curFavColour.textColour,
                            ),
                          ),
                        ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/welcome_signin_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/height_space.dart';
import 'package:peer_circle_app/core/common_widgets/read_only_container_textfield.dart';
import 'package:peer_circle_app/core/constants/assets.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_in_flow/sign_in_screen.dart';

class WelcomeSignInScreen extends HookConsumerWidget {
  const WelcomeSignInScreen({super.key});
  const WelcomeSignInScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'welcome-signin';
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        body: SafeArea(
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 20.w),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const _ScreenUI(),
                Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    SizedBox(
                      width: double.infinity,
                      child: FilledButton(
                        child: const Text('Login'),
                        onPressed: () {},
                      ),
                    ),
                    8.sizedBoxH,
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          "Don't have an account?",
                          style: context.textTheme.labelMedium,
                        ),
                        TextButton(
                          child: const Text('Sign up'),
                          onPressed: () => context.goNamed(WelcomeSignInScreen.routeName),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class _ScreenUI extends StatelessWidget {
  const _ScreenUI();

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        25.sizedBoxH,
        Center(
          child: Image.asset(
            fullLogo,
            height: 100.h,
          ),
        ),
        40.sizedBoxH,
        Hero(
          tag: 'welcome-back',
          child: Row(
            children: [
              Material(
                child: Text(
                  'Welcome back',
                  style: context.textTheme.titleLarge,
                ),
              ),
              4.sizedBoxW,
              Image.asset(
                wavingHandIcon,
                height: 24.h,
              ),
            ],
          ),
        ),
        5.sizedBoxH,
        Text(
          'We’re happy to see you again! Log in to\nyour Peer Circle App account.',
          style: context.textTheme.labelMedium,
        ),
        HeightSpace(10.h),
        Hero(
          tag: 'username',
          child: ReadOnlyContainerTextField(
            hintText: 'Enter your username',
            onTap: () => context.goNamed(SignInScreen.routeName),
          ),
        ),
        HeightSpace(10.h),
        Hero(
          tag: 'password',
          child: ReadOnlyContainerTextField(
            onTap: () => context.goNamed(SignInScreen.routeName),
            hintText: 'Password',
          ),
        ),
        Hero(
          tag: 'forgot-password',
          child: Container(
            alignment: Alignment.centerRight,
            child: TextButton(
              onPressed: () {},
              style: TextButton.styleFrom(
                padding: EdgeInsets.zero,
              ),
              child: const Text('Forgot password?'),
            ),
          ),
        ),
        // 30.h.sizedBox,
        // Center(
        //   child: Column(
        //     children: [
        //       Container(
        //         height: 44.h,
        //         width: 44.h,
        //         decoration: const BoxDecoration(
        //           color: Color(0xFFE1E1E1),
        //           shape: BoxShape.circle,
        //         ),
        //         child: Center(
        //           child: Image.asset(
        //             faceIDIcon,
        //             height: 24.h,
        //             color: const Color(0xFF8E8E93),
        //           ),
        //         ),
        //       ),
        //       10.h.sizedBox,
        //       Text(
        //         'Login with biometrics',
        //         style: whiteFontSize12Regular(),
        //       ),
        //     ],
        //   ),
        // ),

        //const Spacer(),
      ],
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/controllers/verify_code_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'verify_code_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$verifyCodeHash() => r'97ef2835b85126b43080e3237c4f9c896819f993';

/// Copied from Dart SDK
class _SystemHash {
  _SystemHash._();

  static int combine(int hash, int value) {
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + value);
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + ((0x0007ffff & hash) << 10));
    return hash ^ (hash >> 6);
  }

  static int finish(int hash) {
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + ((0x03ffffff & hash) << 3));
    // ignore: parameter_assignments
    hash = hash ^ (hash >> 11);
    return 0x1fffffff & (hash + ((0x00003fff & hash) << 15));
  }
}

/// See also [verifyCode].
@ProviderFor(verifyCode)
const verifyCodeProvider = VerifyCodeFamily();

/// See also [verifyCode].
class VerifyCodeFamily extends Family<AsyncValue<bool>> {
  /// See also [verifyCode].
  const VerifyCodeFamily();

  /// See also [verifyCode].
  VerifyCodeProvider call(
    VerifyCodeRequest request,
  ) {
    return VerifyCodeProvider(
      request,
    );
  }

  @override
  VerifyCodeProvider getProviderOverride(
    covariant VerifyCodeProvider provider,
  ) {
    return call(
      provider.request,
    );
  }

  static const Iterable<ProviderOrFamily>? _dependencies = null;

  @override
  Iterable<ProviderOrFamily>? get dependencies => _dependencies;

  static const Iterable<ProviderOrFamily>? _allTransitiveDependencies = null;

  @override
  Iterable<ProviderOrFamily>? get allTransitiveDependencies => _allTransitiveDependencies;

  @override
  String? get name => r'verifyCodeProvider';
}

/// See also [verifyCode].
class VerifyCodeProvider extends AutoDisposeFutureProvider<bool> {
  /// See also [verifyCode].
  VerifyCodeProvider(
    VerifyCodeRequest request,
  ) : this._internal(
          (ref) => verifyCode(
            ref as VerifyCodeRef,
            request,
          ),
          from: verifyCodeProvider,
          name: r'verifyCodeProvider',
          debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$verifyCodeHash,
          dependencies: VerifyCodeFamily._dependencies,
          allTransitiveDependencies: VerifyCodeFamily._allTransitiveDependencies,
          request: request,
        );

  VerifyCodeProvider._internal(
    super._createNotifier, {
    required super.name,
    required super.dependencies,
    required super.allTransitiveDependencies,
    required super.debugGetCreateSourceHash,
    required super.from,
    required this.request,
  }) : super.internal();

  final VerifyCodeRequest request;

  @override
  Override overrideWith(
    FutureOr<bool> Function(VerifyCodeRef provider) create,
  ) {
    return ProviderOverride(
      origin: this,
      override: VerifyCodeProvider._internal(
        (ref) => create(ref as VerifyCodeRef),
        from: from,
        name: null,
        dependencies: null,
        allTransitiveDependencies: null,
        debugGetCreateSourceHash: null,
        request: request,
      ),
    );
  }

  @override
  AutoDisposeFutureProviderElement<bool> createElement() {
    return _VerifyCodeProviderElement(this);
  }

  @override
  bool operator ==(Object other) {
    return other is VerifyCodeProvider && other.request == request;
  }

  @override
  int get hashCode {
    var hash = _SystemHash.combine(0, runtimeType.hashCode);
    hash = _SystemHash.combine(hash, request.hashCode);

    return _SystemHash.finish(hash);
  }
}

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
mixin VerifyCodeRef on AutoDisposeFutureProviderRef<bool> {
  /// The parameter `request` of this provider.
  VerifyCodeRequest get request;
}

class _VerifyCodeProviderElement extends AutoDisposeFutureProviderElement<bool> with VerifyCodeRef {
  _VerifyCodeProviderElement(super.provider);

  @override
  VerifyCodeRequest get request => (origin as VerifyCodeProvider).request;
}
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/create_password_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/phone_number_input_screen.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';
import 'package:peer_circle_app/features/auth/views/widgets/password_validation_indicator_row.dart';

final _formKey = GlobalKey<FormState>();

class CreatePasswordScreen extends HookConsumerWidget {
  const CreatePasswordScreen({super.key});
  const CreatePasswordScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'create-password-screen';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final createUserController = ref.read(createUserControllerProvider.notifier);
    final passwordController = useTextEditingController();
    final isEightCharacters = useState(false);
    final hasSpecialCharacter = useState(false);
    final hasLetterAndNumber = useState(false);
    final obscureText = useState(true);
    final isButtonEnabled = useState(false);
    void updateValidation() {
      final value = passwordController.text;
      isEightCharacters.value = value.length >= 8;
      hasSpecialCharacter.value = value.contains(RegExp(r'[@\$!%*#?&]'));
      hasLetterAndNumber.value = value.contains(RegExp('[A-Za-z]')) && value.contains(RegExp(r'\d'));
      isButtonEnabled.value = isEightCharacters.value && hasSpecialCharacter.value && hasLetterAndNumber.value;
    }

    useEffect(
      () {
        passwordController.addListener(updateValidation);
        return () => passwordController.removeListener(updateValidation);
      },
      [passwordController],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Form(
              key: _formKey,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Create a password',
                    style: TextStyle(
                      fontSize: 24.sp,
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                  32.sizedBoxH,
                  CustomTextFormField(
                    autoFocus: true,
                    controller: passwordController,
                    obscureText: obscureText.value,
                    hintText: 'Password',
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your password';
                      }
                      return null;
                    },
                    suffixIcon: GestureDetector(
                      onTap: () => obscureText.value = !obscureText.value,
                      child: Icon(
                        obscureText.value ? Icons.visibility_off_outlined : Icons.visibility_outlined,
                        color: context.colorScheme.onInverseSurface,
                      ),
                    ),
                  ),
                  32.sizedBoxH,
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      PasswordValidationIndicatorRow(
                        text: '8 characters',
                        isValid: isEightCharacters.value,
                      ),
                      PasswordValidationIndicatorRow(
                        text: '1 letter & 1 number',
                        isValid: hasLetterAndNumber.value,
                      ),
                    ],
                  ),
                  8.sizedBoxH,
                  PasswordValidationIndicatorRow(
                    text: '1 special character (e.g. #\$!)',
                    isValid: hasSpecialCharacter.value,
                  ),
                ],
              ),
            ),
            OutlinedButton(
              onPressed: isButtonEnabled.value
                  ? () {
                      if (_formKey.currentState?.validate() ?? false) {
                        createUserController.updatePassword(passwordController.text);
                        context.goNamed(PhoneNumberInputScreen.routeName);
                      }
                    }
                  : null,
              child: const Text('Continue'),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/router_notifier.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:peer_circle_app/core/common_widgets/home_screen.dart';
import 'package:peer_circle_app/core/common_widgets/splash_screen.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/core/mock_config/config.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/auth/views/screens/get_started_or_login_welcome_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_in_flow/sign_in_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/welcome_signin_screen.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'router_notifier.g.dart';

/// This notifier is meant to implement the [Listenable] our [GoRouter] needs.
///
/// We aim to trigger redirects whenever needed.
/// This is done by calling our (only) listener everytime we want to notify stuff.
/// This allows to centralize global redirecting logic in this class.
/// In this simple case, we just listen to auth changes.
///
/// SIDE NOTE.
/// This might look overcomplicated at a first glance;
/// Instead, this method aims to follow some good some good practices:
///   1. It doesn't require us to pipe down any `ref` parameter
///   2. It works as a complete replacement for [ChangeNotifier] (it's a [Listenable] implementation)
///   3. It allows for listening to multiple providers if needed (we do have a [Ref] now!)
@Riverpod(keepAlive: true)
class RouterNotifier extends _$RouterNotifier implements Listenable {
  VoidCallback? _onRouteChange;
  late bool _authenticated; // Useful for our global redirect function
  late bool _mockMode;
  @override
  void build() {
    _mockMode = ref.watch(mockModeNotifierProvider);
    _authenticated = ref.watch(authControllerProvider).valueOrNull != null;
    talker.warning('RouterNotifier build');
    listenSelf((_, __) {
      // One could write more conditional logic for when to call redirection
      _onRouteChange?.call();
    });
  }

  /// Redirects the user when our authentication changes
  // ignore: avoid_build_context_in_providers
  Future<String?> redirect(BuildContext _, GoRouterState state) async {
    // When in mock mode, we don't want to redirect anywhere
    if (_mockMode) {
      return null;
    }

    // Check if user currently in auth path
    // for example
    // /auth/
    // /auth/welcome-signin
    // /auth/log-in
    // etc.
    final atAuth = state.uri.toString().contains('/auth');
    if (!_authenticated && !atAuth) {
      return '/auth/${GetStartedOrLoginWelcomeScreen.routeName}';
    }

    // redirect to home after sign in successfully from sign in screen
    final atSignIn = state.uri.toString().contains(SignInScreen.routeName) || state.uri.toString().contains(WelcomeSignInScreen.routeName);
    if (_authenticated && atSignIn) {
      return '/${HomeScreen.routeName}';
    }

    final atSplash = state.uri.toString().endsWith(SplashScreen.routeName);
    if (_authenticated && atSplash) {
      return '/${HomeScreen.routeName}';
    }
    return null;
  }

  /// Adds [GoRouter]'s listener as specified by its [Listenable].
  /// [GoRouteInformationProvider] uses this method on creation to handle its
  /// internal [ChangeNotifier].
  /// Check out the internal implementation of [GoRouter] and
  /// [GoRouteInformationProvider] to see this in action.
  @override
  void addListener(VoidCallback listener) {
    _onRouteChange = listener;
  }

  /// Removes [GoRouter]'s listener as specified by its [Listenable].
  /// [GoRouteInformationProvider] uses this method when disposing,
  /// so that it removes its callback when destroyed.
  /// Check out the internal implementation of [GoRouter] and
  /// [GoRouteInformationProvider] to see this in action.
  @override
  void removeListener(VoidCallback listener) {
    _onRouteChange = null;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/make_up/views/widgets/undertone_jewelry_tip_sheet.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/widgets/sheet_button.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/widgets/undertone_clothes_tip_sheet.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart';
import 'package:peer_circle_app/gen/assets.gen.dart';

class UndertoneJewelryTipSheet extends StatelessWidget {
  const UndertoneJewelryTipSheet({super.key, required this.onSelection});
  final Function(Undertone?) onSelection;

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.7,
      maxChildSize: 0.9,
      minChildSize: 0.5,
      builder: (context, scrollController) {
        return Container(
          decoration: BoxDecoration(
            color: Colors.black,
            borderRadius: BorderRadius.vertical(top: Radius.circular(24.r)),
            image: DecorationImage(
              image: Assets.images.yourMakeUpScreenImage2.provider(),
              fit: BoxFit.cover,
              alignment: Alignment.topCenter,
            ),
          ),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withValues(alpha: 0.65),
              borderRadius: BorderRadius.vertical(top: Radius.circular(24.r)),
            ),
            padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 32.h),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Center(
                  child: Text(
                    'FIND YOUR UNDERTONE',
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.bold,
                      color: Colors.white70,
                      letterSpacing: 1.2,
                    ),
                  ),
                ),
                16.verticalSpace,
                Text(
                  'Jewelry Comparison',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 20.sp,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                16.verticalSpace,
                Text.rich(
                  TextSpan(
                    text: 'Which color of jewelry ',
                    style: TextStyle(color: Colors.white, fontSize: 14.sp),
                    children: [
                      TextSpan(
                        text: 'blends in ',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(
                        text: 'with my skin color: ',
                      ),
                      TextSpan(
                        text: 'gold ',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(text: 'or '),
                      TextSpan(
                        text: 'silver',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(text: '?'),
                    ],
                  ),
                  textAlign: TextAlign.center,
                ),
                32.verticalSpace,
                SheetButton(
                  'Gold',
                  onTap: () {
                    Navigator.pop(context);
                    onSelection(Undertone.warm);
                  },
                ),
                12.verticalSpace,
                SheetButton(
                  'Silver',
                  onTap: () {
                    Navigator.pop(context);
                    onSelection(Undertone.cool);
                  },
                ),
                12.verticalSpace,
                SheetButton(
                  'Neither',
                  onTap: () {
                    Navigator.pop(context);
                    onSelection(Undertone.neutral);
                  },
                ),
                12.verticalSpace,
                SheetButton(
                  "I don't know",
                  onTap: () {
                    Navigator.pop(context);
                    showModalBottomSheet(
                      context: context,
                      isScrollControlled: true,
                      backgroundColor: Colors.transparent,
                      builder: (_) => UndertoneClothesTipSheet(
                        onSelection: onSelection,
                      ),
                    );
                  },
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/make_up/views/widgets/undertone_tip_sheet.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/widgets/sheet_button.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/widgets/undertone_jewelry_tip_sheet.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart';
import 'package:peer_circle_app/gen/assets.gen.dart';

class UndertoneTipSheet extends StatelessWidget {
  const UndertoneTipSheet({super.key, required this.onSelection});
  final Function(Undertone?) onSelection;
  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.7,
      maxChildSize: 0.9,
      minChildSize: 0.5,
      builder: (context, scrollController) {
        return Container(
          decoration: BoxDecoration(
            color: Colors.black,
            borderRadius: BorderRadius.vertical(top: Radius.circular(24.r)),
            image: DecorationImage(
              image: Assets.images.yourMakeUpScreenImage1.provider(),
              fit: BoxFit.cover,
              alignment: Alignment.topCenter,
            ),
          ),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withValues(alpha: 0.65),
              borderRadius: BorderRadius.vertical(top: Radius.circular(24.r)),
            ),
            padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 32.h),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Center(
                  child: Text(
                    'FIND YOUR UNDERTONE',
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.bold,
                      color: Colors.white70,
                      letterSpacing: 1.2,
                    ),
                  ),
                ),
                16.verticalSpace,
                Text(
                  'Look at the Skin on Your Neck',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 20.sp,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                16.verticalSpace,
                Text.rich(
                  TextSpan(
                    text: 'Do you see ',
                    style: TextStyle(color: Colors.white, fontSize: 14.sp),
                    children: [
                      TextSpan(
                        text: 'warmth, golden ',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(
                        text: 'or ',
                      ),
                      TextSpan(
                        text: 'yellow',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(
                        text: '?\nTip: Look beyond the skin’s redness',
                      ),
                    ],
                  ),
                  textAlign: TextAlign.center,
                ),
                32.verticalSpace,
                SheetButton(
                  'Yes',
                  onTap: () {
                    Navigator.pop(context); // Close first sheet
                    onSelection(Undertone.warm);
                  },
                ),
                12.verticalSpace,
                SheetButton(
                  'No',
                  onTap: () {
                    Navigator.pop(context); // Close first sheet
                    showModalBottomSheet(
                      context: context,
                      isScrollControlled: true,
                      backgroundColor: Colors.transparent,
                      builder: (_) => UndertoneJewelryTipSheet(
                        onSelection: onSelection,
                      ),
                    );
                  },
                ),
                12.verticalSpace,
                SheetButton(
                  'I Don’t Know',
                  onTap: () {
                    Navigator.pop(context); // Close first sheet
                    showModalBottomSheet(
                      context: context,
                      isScrollControlled: true,
                      backgroundColor: Colors.transparent,
                      builder: (_) => UndertoneJewelryTipSheet(
                        onSelection: onSelection,
                      ),
                    );
                  },
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/mock_config/config.dart
```dart
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/router/router.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'config.g.dart';

@riverpod
class MockModeNotifier extends _$MockModeNotifier {
  @override
  bool build() => kDebugMode;

  void toggle() => state = !state;
}

class MockSliverListTile extends HookConsumerWidget {
  const MockSliverListTile({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final mockMode = ref.watch(mockModeNotifierProvider);
    return SliverToBoxAdapter(
      child: ListTile(
        key: const Key('mock-mode'),
        title: const Text('Mock Mode'),
        subtitle: Text(mockMode ? 'Enabled' : 'Disabled'),
        trailing: Switch(
          value: mockMode,
          onChanged: (value) => ref.read(mockModeNotifierProvider.notifier).toggle(),
        ),
      ),
    );
  }
}

class MockRouteNavigation extends HookConsumerWidget {
  const MockRouteNavigation({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final router = ref.watch(routerProvider); // Access the GoRouter instance
    final routes = _extractRoutes(router);
    return SliverToBoxAdapter(
      child: ListTile(
        title: const Text(
          'Quick Navigation:',
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
        subtitle: DropdownButton<String>(
          isExpanded: true,
          hint: const Text('Select a route'),
          items: routes
              .map(
                (route) => DropdownMenuItem(
                  value: route,
                  child: Text(route),
                ),
              )
              .toList(),
          onChanged: (route) {
            if (route != null) {
              router.go(route);
            }
          },
        ),
      ),
    );
  }

  List<String> _extractRoutes(GoRouter router) {
    final routePaths = <String>[];

    void traverseRoutes(List<RouteBase> routes, String basePath) {
      for (final route in routes) {
        if (route is GoRoute) {
          final fullPath = '$basePath/${route.path}'.replaceAll('//', '/');
          routePaths.add(fullPath);
          if (route.routes.isNotEmpty) {
            traverseRoutes(route.routes, fullPath);
          }
        }
      }
    }

    traverseRoutes(router.configuration.routes, '');
    return routePaths.reversed.toList();
  }
}

class MockLogin extends HookConsumerWidget {
  const MockLogin({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final authController = ref.watch(authControllerProvider);
    return SliverToBoxAdapter(
      child: ListTile(
        key: const Key('mock-login'),
        title: const Text('Quick Login'),
        subtitle: Text(authController.isLoading ? 'Loading...' : '${authController.value}'),
        onTap: () {
          ref.read(authControllerProvider.notifier).signIn(LoginRequest(username: 'nam', password: 'nam'));
        },
      ),
    );
  }
}

class MockLogout extends HookConsumerWidget {
  const MockLogout({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final authController = ref.watch(authControllerProvider);
    return SliverToBoxAdapter(
      child: ListTile(
        key: const Key('mock-logout'),
        title: const Text('Quick Logout'),
        subtitle: Text(authController.isLoading ? 'Loading...' : '${authController.value}'),
        onTap: () {
          ref.read(authControllerProvider.notifier).signOut();
        },
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/change_username_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/birthday_input_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/name_input_screen.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';

final _formKey = GlobalKey<FormState>();

class ChangeUserNameScreen extends HookConsumerWidget {
  const ChangeUserNameScreen({super.key});
  const ChangeUserNameScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'change-user-name';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final createUserController = ref.read(createUserControllerProvider.notifier);
    final createUserState = ref.watch(createUserControllerProvider);
    final initialUserName = '${createUserState.firstName}${createUserState.lastName}';
    final userNameController = useTextEditingController(text: initialUserName);
    final isButtonEnabled = useState(false);
    void updateButtonState() {
      isButtonEnabled.value = userNameController.text.isNotEmpty;
    }

    useEffect(
      () {
        userNameController.addListener(updateButtonState);
        return () {
          userNameController.removeListener(updateButtonState);
        };
      },
      [userNameController],
    );

    useEffect(
      () {
        // if initialUserName is null route back to nameinput
        if (createUserState.firstName == null || createUserState.lastName == null) {
          Future(() {
            if (!context.mounted) return;
            context.goNamed(NameInputScreen.routeName);
          });
        }
        return;
      },
      [],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Form(
              key: _formKey,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Your username',
                    style: TextStyle(
                      fontSize: 24.sp,
                      fontWeight: FontWeight.w700,
                    ),
                  ),
                  Text(
                    'You can change your username later in the settings if you wish to',
                    style: context.textTheme.labelLarge,
                  ),
                  16.sizedBoxH,
                  CustomTextFormField(
                    autoFocus: true,
                    controller: userNameController,
                    hintText: initialUserName,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Please enter your user name';
                      }
                      return null;
                    },
                    prefix: const Text('@ '),
                  ),
                  16.sizedBoxH,
                ],
              ),
            ),
            OutlinedButton(
              onPressed: isButtonEnabled.value
                  ? () {
                      if (_formKey.currentState?.validate() ?? false) {
                        // Update provider
                        createUserController.updateUserName(
                          userNameController.text,
                        );
                        // Proceed next step
                        context.goNamed(BirthdayInputScreen.routeName);
                      }
                    }
                  : null,
              child: const Text('Continue'),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/name_input_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/text_style_constants.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/change_username_screen.dart';
import 'package:peer_circle_app/features/auth/views/widgets/custom_text_field.dart';

final _formKey = GlobalKey<FormState>();

class NameInputScreen extends HookConsumerWidget {
  const NameInputScreen({super.key});
  const NameInputScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'name-input';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final createUserController = ref.read(createUserControllerProvider.notifier);
    final createUserState = ref.watch(createUserControllerProvider);
    final firstNameController = useTextEditingController(text: createUserState.firstName);
    final lastNameController = useTextEditingController(text: createUserState.lastName);
    final isButtonEnabled = useState(false);
    void updateButtonState() {
      isButtonEnabled.value = firstNameController.text.isNotEmpty && lastNameController.text.isNotEmpty;
    }

    useEffect(
      () {
        firstNameController.addListener(updateButtonState);
        lastNameController.addListener(updateButtonState);
        return () {
          firstNameController.removeListener(updateButtonState);
          lastNameController.removeListener(updateButtonState);
        };
      },
      [firstNameController, lastNameController],
    );

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Tell us your name',
                    style: whiteFontSize24Bold(),
                  ),
                  16.sizedBoxH,
                  Hero(
                    tag: 'first',
                    child: Material(
                      child: CustomTextFormField(
                        autoFocus: true,
                        controller: firstNameController,
                        hintText: 'First name',
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your first name';
                          }
                          return null;
                        },
                      ),
                    ),
                  ),
                  16.sizedBoxH,
                  Hero(
                    tag: 'second',
                    child: Material(
                      child: CustomTextFormField(
                        controller: lastNameController,
                        hintText: 'Last name',
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter your last name';
                          }
                          return null;
                        },
                      ),
                    ),
                  ),
                ],
              ),
            ),
            OutlinedButton(
              onPressed: isButtonEnabled.value
                  ? () {
                      if (_formKey.currentState?.validate() ?? false) {
                        // Update provider
                        createUserController.updateName(
                          firstName: firstNameController.text,
                          lastName: lastNameController.text,
                        );
                        // Proceed next step
                        context.goNamed(ChangeUserNameScreen.routeName);
                      }
                    }
                  : null,
              child: const Text('Continue'),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/widgets/custom_text_field.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/clear_icon.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';

class CustomTextFormField extends HookConsumerWidget {
  const CustomTextFormField({
    super.key,
    required this.controller,
    this.hintText,
    required this.validator,
    this.prefix,
    this.readOnly = false,
    this.onTap,
    this.obscureText,
    this.suffixIcon,
    this.showSuffix = true,
    this.keyboardType,
    this.prefixIcon,
    this.autoFocus = false,
    this.onFocusChanged,
    this.onChanged,
    this.focusNode,
    this.centerText = false,
    this.inputFormatters,
  });
  final TextEditingController controller;
  final String? hintText;
  final String? Function(String?)? validator;
  final Widget? prefix;
  final bool readOnly;
  final VoidCallback? onTap;
  final Widget? suffixIcon;
  final bool? obscureText;
  final bool showSuffix;
  final TextInputType? keyboardType;
  final Widget? prefixIcon;
  final bool autoFocus;
  final ValueChanged<bool>? onFocusChanged;
  final ValueChanged<String>? onChanged;
  final FocusNode? focusNode;
  final bool centerText;
  final List<TextInputFormatter>? inputFormatters;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final isFocused = useState(false);
    final textStyle = isFocused.value
        ? TextStyle(
            color: context.colorScheme.onInverseSurface,
            fontSize: 16.sp,
            fontWeight: FontWeight.w500,
          )
        : TextStyle(
            color: context.colorScheme.onSurface,
            fontSize: 16.sp,
            fontWeight: FontWeight.w500,
          );

    return Focus(
      onFocusChange: (hasFocus) {
        isFocused.value = hasFocus;
        onFocusChanged?.call(hasFocus);
      },
      child: TextFormField(
        textAlign: centerText ? TextAlign.center : TextAlign.start,
        focusNode: focusNode,
        keyboardType: keyboardType,
        controller: controller,
        autofocus: autoFocus,
        inputFormatters: inputFormatters,
        style: textStyle,
        onChanged: onChanged,
        autovalidateMode: AutovalidateMode.onUserInteraction,
        decoration: InputDecoration(
          fillColor: isFocused.value ? context.colorScheme.inverseSurface : context.colorScheme.surfaceDim,
          hintText: hintText,
          contentPadding: EdgeInsets.symmetric(horizontal: 16.0.w, vertical: 12.0.h),
          suffixIconConstraints: BoxConstraints(
            minWidth: 40.w,
            maxWidth: 40.w,
            minHeight: 24.h,
            maxHeight: 24.h,
          ),
          suffixIcon: showSuffix && isFocused.value
              ? suffixIcon ??
                  Padding(
                    padding: EdgeInsets.only(right: 8.0.w),
                    child: Center(
                      child: InkWell(
                        onTap: () => controller.clear(),
                        child: const ClearIcon(),
                      ),
                    ),
                  )
              : null,
          suffixStyle: textStyle,
          prefix: prefix,
          prefixStyle: textStyle,
          prefixIcon: prefixIcon,
        ),
        // only validate after focus
        validator: validator,
        readOnly: readOnly,
        onTap: onTap,
        obscureText: obscureText ?? false,
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart
```dart
// Defining skin types as a Dart enum
enum SkinType {
  normal,
  dry,
  oily,
  combination;

  String get value {
    switch (this) {
      case SkinType.normal:
        return 'Normal';
      case SkinType.dry:
        return 'Dry';
      case SkinType.oily:
        return 'Oily';
      case SkinType.combination:
        return 'Combination';
    }
  }

  String get display => value;
}

// Defining skin concerns as a Dart enum
enum SkinConcern {
  acneBlemishes,
  largePores,
  discoloration,
  unevenSkintone,
  dryDull,
  eczema,
  rosacea;

  String get value {
    switch (this) {
      case SkinConcern.acneBlemishes:
        return 'Acne Blemishes';
      case SkinConcern.largePores:
        return 'Large Pores';
      case SkinConcern.discoloration:
        return 'Discoloration';
      case SkinConcern.unevenSkintone:
        return 'Uneven Skintone';
      case SkinConcern.dryDull:
        return 'Dry Dull';
      case SkinConcern.eczema:
        return 'Eczema';
      case SkinConcern.rosacea:
        return 'Rosacea';
    }
  }

  String get display {
    switch (this) {
      case SkinConcern.acneBlemishes:
        return 'Acne / Blemishes';
      case SkinConcern.dryDull:
        return 'Dry / Dull';
      default:
        return value;
    }
  }

}

// Defining hair types as a Dart enum
enum HairType {
  straight,
  thin,
  thick,
  fine,
  wavy,
  curly;

  String get value {
    switch (this) {
      case HairType.straight:
        return 'Straight';
      case HairType.thin:
        return 'Thin';
      case HairType.thick:
        return 'Thick';
      case HairType.fine:
        return 'Fine';
      case HairType.wavy:
        return 'Wavy';
      case HairType.curly:
        return 'Curly';
    }
  }
  String get display => value;
}

// Defining hair concerns as a Dart enum
enum HairConcern {
  oilyScalp,
  dryBrittle,
  damaged,
  splitEnds,
  dandruff,
  frizz,
  hairLoss,
  breakage,
  greasyHair;

  String get value {
    switch (this) {
      case HairConcern.oilyScalp:
        return 'Oily Scalp';
      case HairConcern.dryBrittle:
        return 'Dry Brittle';
      case HairConcern.damaged:
        return 'Damaged';
      case HairConcern.splitEnds:
        return 'Split Ends';
      case HairConcern.dandruff:
        return 'Dandruff';
      case HairConcern.frizz:
        return 'Frizz';
      case HairConcern.hairLoss:
        return 'Hair Loss';
      case HairConcern.breakage:
        return 'Breakage';
      case HairConcern.greasyHair:
        return 'Greasy Hair';
    }
  }

  String get display {
    switch (this) {
      case HairConcern.dryBrittle:
        return 'Dry / Brittle';
      default:
        return value;
    }
  }
}

// Defining undertones as a Dart enum
enum Undertone {
  cool,
  warm,
  neutral;

  String get value {
    switch (this) {
      case Undertone.cool:
        return 'Cool';
      case Undertone.warm:
        return 'Warm';
      case Undertone.neutral:
        return 'Neutral';
    }
  }

  String get display => value;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/welcome_signup_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';
import 'package:peer_circle_app/core/app_style/text_style_constants.dart';
import 'package:peer_circle_app/core/common_widgets/height_space.dart';
import 'package:peer_circle_app/core/common_widgets/read_only_container_textfield.dart';
import 'package:peer_circle_app/core/constants/assets.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/name_input_screen.dart';

class WelcomeSignUpScreen extends HookConsumerWidget {
  const WelcomeSignUpScreen({super.key});
  const WelcomeSignUpScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const String routeName = 'welcome-signup';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      body: SafeArea(
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 20.h),
          child: Column(
            children: [
              Expanded(child: _ScreenUI()),
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  const OutlinedButton(
                    onPressed: null,
                    child: Text(
                      'Continue',
                    ),
                  ),
                  20.sizedBoxH,
                  Text(
                    'By continuing you agree to Peer Circle App’s',
                    style: secondaryLabelColorFontSize12W500(),
                    textAlign: TextAlign.center,
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Terms of Use ',
                        style: TextStyle(
                          fontSize: 12.h,
                          decoration: TextDecoration.underline,
                          color: whiteColor,
                        ),
                      ),
                      Text(
                        'and ',
                        style: secondaryLabelColorFontSize12W500(),
                      ),
                      Text(
                        'Privacy Policy.',
                        style: TextStyle(
                          fontSize: 12.sp,
                          decoration: TextDecoration.underline,
                          color: whiteColor,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _ScreenUI extends HookConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Center(
          child: Image.asset(
            fullLogo,
            height: 100.h,
          ),
        ),
        40.sizedBoxH,
        Text(
          'Welcome to the Peer Circle App',
          style: context.textTheme.titleLarge,
        ),
        10.sizedBoxH,
        Text(
          'Tell us your name to start creating\nyour Peer Circle App account.',
          style: context.textTheme.labelMedium,
        ),
        HeightSpace(20.h),
        Hero(
          tag: 'first',
          child: ReadOnlyContainerTextField(
            hintText: 'First name',
            onTap: () => context.goNamed(NameInputScreen.routeName),
          ),
        ),
        HeightSpace(17.h),
        Hero(
          tag: 'second',
          child: ReadOnlyContainerTextField(
            hintText: 'Last name',
            onTap: () => context.goNamed(NameInputScreen.routeName),
          ),
        ),
      ],
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/controllers/fav_colour_controller.dart
```dart
import 'package:flutter/material.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/models/repositories/fav_colour_repository.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/views/ui_states/fav_colour_state.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'fav_colour_controller.g.dart';

final List<ColourOption> colourOptions = [
  ColourOption(name: 'Petal Pink', colourHex: '0xFFEA728A', textColour: Colors.white),
  ColourOption(name: 'Hot Pink', colourHex: '0xFFEC4899', textColour: Colors.white),
  ColourOption(name: 'Red', colourHex: '0xFFDC143C', textColour: Colors.white),
  ColourOption(name: 'Yellow', colourHex: '0xFFF5CE62', textColour: Colors.black),
  ColourOption(name: 'Orange', colourHex: '0xFFF59311', textColour: Colors.black),
  ColourOption(name: 'Pan Purple', colourHex: '0xFF668EF2', textColour: Colors.white),
  ColourOption(name: 'Navy', colourHex: '0xFF2B427B', textColour: Colors.white),
  ColourOption(name: 'Forest Green', colourHex: '0xFF31732F', textColour: Colors.white),
  ColourOption(name: 'Gold', colourHex: '0xFFA38331', textColour: Colors.black),
  ColourOption(name: 'Lead (Dark Grey/Black)', colourHex: '0xFF212121', textColour: Colors.white),
];

@riverpod
class FavColourController extends _$FavColourController {
  @override
  FavColourState build() {
    return const FavColourState();
  }

  /// Updates the selected colour in the state
  void updateSelectedColour(String colourHex) {
    // if is loading do nothing
    if (state.uploadState is AsyncLoading) return;
    // clear upload state
    state = state.copyWith(uploadState: const AsyncValue.data(null));
    final selectedOption = colourOptions.firstWhere(
      (option) => option.colourHex == colourHex,
    );
    ref.read(curColourProvider.notifier).updateSelectedColour(selectedOption);
    state = state.copyWith(
      pickedColourHex: selectedOption.colourHex,
      textColour: selectedOption.textColour,
    );
  }

  /// Saves the selected colour to the backend
  Future<void> saveFavouriteColour() async {
    final colourHex = state.pickedColourHex;
    if (colourHex == null) return; // No colour selected, do nothing
    final colourName = colourOptions.firstWhere((option) => option.colourHex == colourHex).name;
    // Set loading state
    state = state.copyWith(uploadState: const AsyncValue.loading());

    // Attempt to save colour
    final result = await AsyncValue.guard(() async {
      final repository = ref.read(favColourRepositoryProvider);
      await repository.saveFavouriteColour(colourName);
    });

    // Update the state with success or error
    state = state.copyWith(uploadState: result);
  }
}

class ColourOption {
  ColourOption({required this.name, required this.colourHex, required this.textColour});
  final String name;
  final String colourHex;
  final Color textColour;

  Color get colour => Color(int.parse(colourHex));
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/make_up/views/widgets/undertone_clothes_tip_sheet.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/make_up/views/widgets/sheet_button.dart';
import 'package:peer_circle_app/features/multifaceted_profile/skin/models/data/skin_hair_undertone_enum.dart';
import 'package:peer_circle_app/gen/assets.gen.dart';

class UndertoneClothesTipSheet extends StatelessWidget {
  const UndertoneClothesTipSheet({super.key, required this.onSelection});
  final Function(Undertone?) onSelection;

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableSheet(
      initialChildSize: 0.7,
      maxChildSize: 0.9,
      minChildSize: 0.5,
      builder: (context, scrollController) {
        return Container(
          decoration: BoxDecoration(
            color: Colors.black,
            borderRadius: BorderRadius.vertical(top: Radius.circular(24.r)),
            image: DecorationImage(
              image: Assets.images.yourMakeUpScreenImage3.provider(),
              fit: BoxFit.cover,
              alignment: Alignment.topCenter,
            ),
          ),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withValues(alpha: 0.65),
              borderRadius: BorderRadius.vertical(top: Radius.circular(24.r)),
            ),
            padding: EdgeInsets.symmetric(horizontal: 24.w, vertical: 32.h),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.end,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Center(
                  child: Text(
                    'FIND YOUR UNDERTONE',
                    style: TextStyle(
                      fontSize: 14.sp,
                      fontWeight: FontWeight.bold,
                      color: Colors.white70,
                      letterSpacing: 1.2,
                    ),
                  ),
                ),
                16.verticalSpace,
                Text(
                  'Clothes that Blend-In',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 20.sp,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                16.verticalSpace,
                Text.rich(
                  TextSpan(
                    text: 'Which clothing color ',
                    style: TextStyle(color: Colors.white, fontSize: 14.sp),
                    children: [
                      TextSpan(
                        text: 'blends in ',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(text: '& doesn’t '),
                      TextSpan(
                        text: 'contrast ',
                        style: TextStyle(color: context.colorScheme.primary, fontWeight: FontWeight.w600),
                      ),
                      const TextSpan(text: 'with my skin color?'),
                    ],
                  ),
                  textAlign: TextAlign.center,
                ),
                32.verticalSpace,
                SheetButton(
                  'Dark Brown / Beige',
                  // warm
                  onTap: () {
                    Navigator.pop(context);
                    onSelection(Undertone.warm);
                  },
                ),
                12.verticalSpace,
                SheetButton(
                  'White / Grey',
                  // cool
                  onTap: () {
                    Navigator.pop(context);
                    onSelection(Undertone.cool);
                  },
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/views/screens/bio_input_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/controllers/bio_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/views/screens/profile_completion_screen.dart';

class BioInputScreen extends HookConsumerWidget {
  const BioInputScreen({super.key});
  const BioInputScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'bio-input';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bioController = useTextEditingController();
    final bioSubmitController = ref.watch(bioControllerProvider.notifier);
    final bioState = ref.watch(bioControllerProvider);
    final isButtonEnabled = useState(false);

    void updateButtonState() {
      isButtonEnabled.value = bioController.text.trim().isNotEmpty;
    }

    useEffect(() {
      bioController.addListener(updateButtonState);
      return () => bioController.removeListener(updateButtonState);
    }, [bioController]);

    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 16.w),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            20.h.verticalSpace,
            Text(
              'A quick detail about me',
              style: TextStyle(fontSize: 24.sp, fontWeight: FontWeight.bold),
            ),
            8.h.verticalSpace,
            Text(
              'Drop a vibe or a fun fact—whatever makes you, YOU.',
              style: TextStyle(fontSize: 16.sp, color: Colors.grey),
            ),
            24.h.verticalSpace,
            TextFormField(
              controller: bioController,
              maxLines: 5,
              decoration: const InputDecoration(
                hintText: 'i.e. Lowkey chaotic, highkey thriving ✨ | Music = my love language 🎶',
                hintStyle: TextStyle(color: Colors.grey),
                filled: true,
                fillColor: Color(0xFF4d4d4d),
              ),
            ),
            const Spacer(),
            ElevatedButton(
              onPressed: isButtonEnabled.value && bioState is! AsyncLoading
                  ? () async {
                      bioSubmitController.submitBio(bioController.text.trim());
                      final _ = await ref.read(bioControllerProvider.future);
                      if (!context.mounted) return;
                      if (ref.read(bioControllerProvider).hasError) {
                        return;
                      }
                      context.goNamed(ProfileCompletionScreen.routeName);
                    }
                  : null,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.r)),
                minimumSize: Size(double.infinity, 50.h),
              ),
              child: bioState is AsyncLoading ? const CircularProgressIndicator(color: Colors.white) : const Text('Save & Continue'),
            ),
            16.h.verticalSpace,
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/controllers/create_user_controller.dart
```dart
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_request.dart';
import 'package:peer_circle_app/features/auth/models/repositories/auth_repository.dart';
import 'package:peer_circle_app/features/auth/views/ui_states/create_user_state.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'create_user_controller.g.dart';

@Riverpod(keepAlive: true)
class CreateUserController extends _$CreateUserController {
  @override
  CreateUserState build() {
    return const CreateUserState();
  }

  Future<void> createUser() async {
    talker.debug('Create User');
    state = state.copyWith(status: CreateUserStatus.loading);
    try {
      _validate();

      final request = CreateUserRequest(
        firstName: state.firstName!,
        lastName: state.lastName!,
        userName: state.userName!,
        password: state.password!,
        dOB: state.dOB!,
        phoneNumber: state.phoneNumber!,
      );

      final response = await ref.read(authRepositoryProvider).createUser(request);

      state = state.copyWith(status: CreateUserStatus.success, createUserResponse: response);
    } catch (e) {
      state = state.copyWith(status: CreateUserStatus.error, errorMessage: e.toString());
    }
  }

  void _validate() {
    if (state.firstName == null || state.firstName!.isEmpty) {
      throw Exception('First Name is required');
    } else if (state.lastName == null || state.lastName!.isEmpty) {
      throw Exception('Last Name is required');
    } else if (state.userName == null || state.userName!.isEmpty) {
      throw Exception('User Name is required');
    } else if (state.password == null || state.password!.isEmpty) {
      throw Exception('Password is required');
    } else if (state.dOB == null || state.dOB!.isEmpty) {
      throw Exception('Date of Birth is required');
    } else if (state.phoneNumber == null || state.phoneNumber!.isEmpty) {
      throw Exception('Phone Number is required');
    }
  }

  void updatePassword(String password) {
    state = state.copyWith(password: password, status: CreateUserStatus.collecting);
  }

  void updateLastName(String lastName) {
    state = state.copyWith(lastName: lastName, status: CreateUserStatus.collecting);
  }

  void updateDOB(String dOB) {
    state = state.copyWith(dOB: dOB, status: CreateUserStatus.collecting);
  }

  void updatePhoneNumber(String phoneNumber) {
    state = state.copyWith(phoneNumber: phoneNumber, status: CreateUserStatus.collecting);
  }

  void updateName({required String firstName, required String lastName}) {
    state = state.copyWith(firstName: firstName, lastName: lastName, status: CreateUserStatus.collecting);
  }

  void updateUserName(String userName) {
    state = state.copyWith(userName: userName, status: CreateUserStatus.collecting);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/check_circle_outlined_painter.dart
```dart
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';

class CheckCircleOutlinedPainter extends CustomPainter {
  CheckCircleOutlinedPainter(this.fraction)
      : circlePaint = Paint()
          ..color = primaryAppColor
          ..style = PaintingStyle.stroke
          ..strokeWidth = 6.0,
        checkPaint = Paint()
          ..color = primaryAppColor
          ..style = PaintingStyle.stroke
          ..strokeWidth = 8.0
          ..strokeCap = StrokeCap.round
          ..strokeJoin = StrokeJoin.round;
  final double fraction;
  final Paint circlePaint;
  final Paint checkPaint;

  @override
  void paint(Canvas canvas, Size size) {
    // draw the circle path
    final circlePath = Path();
    circlePath.addArc(
      Rect.fromCenter(
        center: Offset(size.width / 2, size.height / 2),
        width: size.width,
        height: size.height,
      ),
      -pi / 2,
      pi * 2 * fraction,
    );

    // draw the check mark path
    final checkPath = Path();
    final x1 = size.width * (1 / 4);
    final y1 = size.height * (1 / 2);
    final x2 = size.width * (5 / 12);
    final y2 = size.height * (3 / 4.5);
    final x3 = size.width * (3 / 4);
    final y3 = size.height * (1 / 3);

    if (fraction < 0.5) {
      // draw the first part of the check mark
      final t = fraction * 2;
      final x = x1 + (x2 - x1) * t;
      final y = y1 + (y2 - y1) * t;
      checkPath.moveTo(x1, y1);
      checkPath.lineTo(x, y);
    } else {
      // draw the second part of the check mark
      final t = (fraction - 0.5) * 2;
      final x = x2 + (x3 - x2) * t;
      final y = y2 + (y3 - y2) * t;
      checkPath.moveTo(x1, y1);
      checkPath.lineTo(x2, y2);
      checkPath.lineTo(x, y);
    }

    // draw the paths on canvas
    canvas.drawPath(circlePath, circlePaint);
    canvas.drawPath(checkPath, checkPaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/sign_up_flow/sign_up_success.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/auth/controllers/create_user_controller.dart';
import 'package:peer_circle_app/features/auth/views/ui_states/create_user_state.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/screens/peer_snapshot_screen.dart';

class SignUpSuccessScreen extends HookConsumerWidget {
  const SignUpSuccessScreen({super.key});
  const SignUpSuccessScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const String routeName = 'sign-up-success';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final username = ref.watch(createUserControllerProvider.select((CreateUserState value) => value.userName));

    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.surface,
      body: SafeArea(
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.w, vertical: 32.h),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Expanded(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      height: 120.h,
                      width: 120.h,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        border: Border.all(
                          color: const Color(0xFF9EDB6E),
                          width: 4.w,
                        ),
                      ),
                      child: Icon(
                        Icons.check,
                        size: 60.h,
                        color: const Color(0xFF9EDB6E),
                      ),
                    ),
                    SizedBox(height: 40.h),
                    Text(
                      "You're all set!",
                      style: TextStyle(
                        color: const Color(0xFF9EDB6E),
                        fontSize: 24.sp,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    SizedBox(height: 16.h),
                    Text(
                      "@$username, your account is created.\nIt's time to show the real you!",
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16.sp,
                      ),
                    ),
                  ],
                ),
              ),
              // continue
              OutlinedButton(
                onPressed: () {
                  context.goNamed(PeerSnapshotScreen.routeName);
                },
                child: const Text('Continue'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/controllers/role_based_qa_controller.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/repositories/role_based_qa_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'role_based_qa_controller.g.dart';

@riverpod
class RoleBasedQAController extends _$RoleBasedQAController {
  @override
  AsyncValue<RoleBasedQAResponse?> build() {
    return const AsyncValue.data(null);
  }

  /// Submits role-based QA data to the backend
  ///
  /// [answers] is a list of boolean values representing the user's answers
  /// to the personality card questions
  Future<void> submitQA(IList<bool?> answers) async {
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      final repository = ref.read(roleBasedQARepositoryProvider);
      final userId = await ref.read(authControllerProvider.selectAsync((value) => value?.id));
      if (userId == null) {
        throw Exception('User id is null');
      }

      // Convert the boolean answers to the required format
      // Group answers into sets of 5 (as per the UI)
      final qaEntries = <RoleBasedQAEntry>[];

      for (var i = 0; i < answers.length; i += 5) {
        if (i + 4 < answers.length) {
          qaEntries.add(
            RoleBasedQAEntry(
              question: (i ~/ 5) + 1, // Question number (1-based)
              answer1: answers[i] == true ? 1 : 0,
              answer2: answers[i + 1] == true ? 1 : 0,
              answer3: answers[i + 2] == true ? 1 : 0,
              answer4: answers[i + 3] == true ? 1 : 0,
              answer5: answers[i + 4] == true ? 1 : 0,
            ),
          );
        }
      }

      final request = RoleBasedQARequest(
        userId: userId,
        qa: qaEntries,
      );

      return await repository.submitQA(request);
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/widgets/draggable_item.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class DraggableItem extends StatelessWidget {
  const DraggableItem({
    required this.showIcon,
    required this.visible,
    required this.onTap,
    required this.data,
  });
  final bool showIcon;
  final bool visible;
  final Function()? onTap;
  final String data;
  @override
  Widget build(BuildContext context) {
    final textStyle = TextStyle(
      color: Colors.black,
      fontSize: 16.r,
      fontWeight: FontWeight.bold,
    );

    final textWidget = Center(
      child: DefaultTextStyle(
        style: textStyle,
        child: Text(
          data,
          textAlign: TextAlign.center,
        ),
      ),
    );

    return Draggable<String>(
      data: data,
      feedback: CircleContainer(
        opacity: 0.6,
        showIcon: showIcon,
        visible: visible,
        child: textWidget,
      ),
      childWhenDragging: Container(),
      child: CircleContainer(
        onTap: onTap,
        showIcon: showIcon,
        visible: visible,
        child: textWidget,
      ),
    );
  }
}

class CircleContainer extends StatelessWidget {
  const CircleContainer({
    this.child,
    this.opacity = 1.0,
    required this.showIcon,
    required this.visible,
    this.onTap,
  });
  final Widget? child;
  final double opacity;
  final bool showIcon;
  final bool visible;
  final Function()? onTap;
  @override
  Widget build(BuildContext context) {
    const circleHeight = 110.0;

    return Opacity(
      opacity: opacity,
      child: Container(
        height: circleHeight.r,
        width: circleHeight.r,
        decoration: BoxDecoration(
          color: visible ? Colors.green : Colors.green.withValues(alpha: 0.2),
          borderRadius: BorderRadius.circular(100),
        ),
        child: child == null
            ? null
            : Stack(
                children: [
                  child!,
                  if (showIcon)
                    Positioned(
                      bottom: 0,
                      right: 0,
                      child: GestureDetector(
                        onTap: onTap,
                        child: Icon(
                          visible ? Icons.visibility : Icons.visibility_off,
                          color: visible ? Colors.white : Colors.white.withValues(alpha: 0.2),
                        ),
                      ),
                    ),
                ],
              ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/views/widgets/color_container_with_avatar.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/widgets/avatar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart';

class ColorContainerWithAvatar extends HookConsumerWidget {
  const ColorContainerWithAvatar({
    super.key,
    required this.height,
    this.child,
    required this.avatarCurStep,
  });
  final double height;
  final Widget? child;
  final int avatarCurStep;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final curUser = ref.watch(authControllerProvider).valueOrNull;
    final curFavColour = ref.watch(curColourProvider);

    return SizedBox(
      height: height,
      child: Stack(
        children: [
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              height: height - kAvatarSize.r / 2,
              decoration: BoxDecoration(
                color: Color(int.parse(curFavColour.colourHex.replaceFirst('#', '0xff'))),
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(32.r),
                  topRight: Radius.circular(32.r),
                ),
              ),
            ),
          ),
          Positioned(
            top: 0,
            left: 0,
            right: 0,
            child: SizedBox(
              height: height,
              child: Column(
                children: [
                  Avatar(
                    showProgress: true,
                    currentStep: avatarCurStep,
                  ),
                  16.sizedBoxH,
                  Text(
                    curUser?.fullName ?? 'Full Name',
                    style: TextStyle(
                      fontSize: 16.sp,
                      fontWeight: FontWeight.w600,
                      color: curFavColour.textColour,
                    ),
                  ),
                  Text(
                    '@${curUser?.userName ?? 'username'}',
                    style: TextStyle(
                      fontSize: 16.sp,
                      color: curFavColour.textColour,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                  if (child != null) Expanded(child: child!),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/app_style/color_constants.dart
```dart
import 'package:flutter/material.dart';

const primaryAppColor = Color(0xFF52BF4E);
const feedBackErrorColor = Color(0xFFFF2D55);
const secondaryLabelColor = Color(0xFF94949A);
const whiteColor = Color(0xFFFFFFFF);
const onboardingScreenGreyTextColor = Color(0xFF848484);
const scaffoldBackgroundColor = Color(0xFF121212);
const surfaceColor = Color(0xFF212121);
const greyButtonColor = Color(0xFF242424);
const inactiveTextFieldFillColor = Color(0xFF4D4D4D);
const activeTextFieldFillColor = Color(0xFFFFFFFF);
const activeOutlineButtonBorderColor = Color(0xFFFFFFFF);
const textFieldFillColorOption2 = Color(0x3D6F7278);
const textFieldFillColor = Color(0xFF1B1B1B);
const transparentColor = Colors.transparent;
const inactiveOutlinedButtonBorderColor = Color(0xFF323334);
const greyButtonTextColor = Color(0xFF525252);
const hintTextColor = Color(0xFFC8C8C8);
const hintTextColorOption2 = Color(0x4DF2F2F2);
const dividerColor = Color(0xFF262627);
const purplecolor = Color(0xFF302d38);
//Make Up Colors for auth/presentation/screens/your_makeup_screen.dart
const makeUpColor1 = Color(0xFFFDEDDE);
const makeUpColor2 = Color(0xFFFAEAE0);
const makeUpColor3 = Color(0xFFE7CCAD);
const makeUpColor4 = Color(0xFFECC3A1);
const makeUpColor5 = Color(0xFFF1C087);
const makeUpColor6 = Color(0xFFEDAA6E);
const makeUpColor7 = Color(0xFFDBA575);
const makeUpColor8 = Color(0xFFD69364);
const makeUpColor9 = Color(0xFFCB9156);
const makeUpColor10 = Color(0xFF925825);
const makeUpColor11 = Color(0xFF66361E);
const makeUpColor12 = Color(0xFF43302B);

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/controllers/bio_controller.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:peer_circle_app/core/mock_config/config.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/repositories/bio_repository.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/views/ui_states/bio_state.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'bio_controller.g.dart';

@Riverpod(keepAlive: true)
class BioController extends _$BioController {
  @override
  Future<BioState> build() async {
    if (ref.read(mockModeNotifierProvider)) {
      final insights = [
        {'type': 'defined_primary', 'text': 'tYou define you.', 'check': true, 'connector': 'tso you need to'},
        {'type': 'defined_secondary', 'text': 'tBe you, no pressure.', 'check': true, 'connector': "tit's why"},
        {'type': 'validation_primary', 'text': 'tDepth over appearance. Always.', 'check': true, 'connector': ''}
      ].map(Insight.fromJson).toIList();
      return BioState(
        bio: 'I am a software engineer',
        insights: insights,
        archetype: 'The Alchemist',
      );
    }
    return const BioState();
  }

  Future<void> submitBio(String bio) async {
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      final repository = ref.read(bioRepositoryProvider);
      final userId = await ref.read(authControllerProvider.selectAsync((value) => value?.id));
      if (userId == null) {
        throw Exception('User id is null');
      }
      final request = BioRequest(userId: userId, bio: bio);
      final response = await repository.submitBio(request);
      return BioState(bio: bio, insights: IList(response.insights), archetype: response.archetype);
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data_sources/auth_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_request.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_response.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/features/auth/models/data/login_response.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_request.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_response.dart';
import 'package:peer_circle_app/features/auth/models/data_sources/auth_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'auth_remote_data_source.g.dart';

@riverpod
AuthDataSource authDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  return AuthRemoteDataSource(dio);
}

class AuthRemoteDataSource implements AuthDataSource {
  AuthRemoteDataSource(this._dio);
  final Dio _dio;

  @override
  Future<void> signOut() async {
    await handleRequest(
      request: () => _dio.post('/auth/signout'),
      fromJson: (_) => null, // No response parsing needed for sign-out
    );
  }

  @override
  Future<CreateUserResponse> createUser(CreateUserRequest request) {
    return handleRequest(
      request: () => _dio.post('/new_user/', data: request.toJson()),
      fromJson: CreateUserResponse.fromJson,
    );
  }

  @override
  Future<LoginResponse> login(LoginRequest loginRequest) {
    return handleRequest(
      request: () => _dio.post('/login/', data: loginRequest.toJson()),
      fromJson: LoginResponse.fromJson,
    );
  }

  @override
  Future<VerifyCodeResponse> verifyCode(VerifyCodeRequest request) {
    return handleRequest(
      request: () => _dio.post('/verify_code/', data: request.toJson()),
      fromJson: VerifyCodeResponse.fromJson,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/bootstrap.dart
```dart
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/router/navigation_history/current_route_notifier.dart';
import 'package:peer_circle_app/router/navigation_history/navigation_history_notifier.dart';
import 'package:peer_circle_app/router/router.dart';
import 'package:talker_riverpod_logger/talker_riverpod_logger_observer.dart';

Future<ProviderContainer> bootstrap() async {
  WidgetsFlutterBinding.ensureInitialized();
  await ScreenUtil.ensureScreenSize();
  if (kReleaseMode) {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
    ]);
  }
  final container = ProviderContainer(
    observers: <ProviderObserver>[
      TalkerRiverpodObserver(talker: talker),
    ],
  );
  await initProviders(container);

  return container;
}

/// Initializes the providers.
/// Fetches the previous login from the auth repository.
Future<void> initProviders(ProviderContainer container) async {
  container.read(routerProvider);
  container.read(currentRouteNotifierProvider);
  container.read(navigationHistoryNotifierProvider);
}

// /// Logs errors that occur in providers.
// class ErrorLogger extends ProviderObserver {
//   /// Creates an instance of `ErrorLogger`.
//   const ErrorLogger();
//
//   @override
//   void didUpdateProvider(
//     ProviderBase<Object?> provider,
//     Object? previousValue,
//     Object? newValue,
//     ProviderContainer container,
//   ) {
//     if (newValue.runtimeType.toString().startsWith('AsyncError')) {
//       talker.error('[${provider.name}]\n$newValue');
//     }
//   }
//
//   @override
//   void providerDidFail(
//     ProviderBase<Object?> provider,
//     Object error,
//     StackTrace stackTrace,
//     ProviderContainer container,
//   ) {
//     talker.error(
//       '''
//       {
//         "provider": "${provider.name ?? provider.runtimeType}",
//         "error": "$error",
//       }
//       ''',
//       stackTrace,
//     );
//   }
// }

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/screens/culture_drag_drop_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/overview_drag_drop_screen.dart';

import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/drag_drop_template.dart';

class CultureDragDropScreen extends HookConsumerWidget {
  const CultureDragDropScreen({super.key});
  const CultureDragDropScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'culture-drag-drop';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bottomText = useState('');
    const categoryKey = CategoryKey.culture;
    return DragDropTemplate(
      categoryKey: categoryKey,
      key: const Key('neurodiversity-drag-drop'),
      title: 'My cultural blend',
      subtitle: RichText(
        text: TextSpan(
          children: [
            TextSpan(
              text: 'Here’s all the cultures that make ',
              style: context.textTheme.bodyMedium,
            ),
            TextSpan(
              text: 'me, me!',
              style: context.textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.bold,
                fontStyle: FontStyle.italic,
              ),
            ),
            TextSpan(
              text: '\nMore to come!',
              style: context.textTheme.bodyMedium,
            ),
          ],
        ),
      ),
      bottomText: bottomText.value,
      dataSet: categoryKey.items,
      onlySelectOne: false,
      onSelectionChanged: (selectedData) {
        if (selectedData.isNotEmpty) {
          bottomText.value = 'From this 🌍';
        } else {
          bottomText.value = '';
        }
      },
      onNavForward: () {
        context.goNamed(OverviewDragDropScreen.routeName);
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/repositories/auth_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/local_storage/local_storage_repository.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_request.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_response.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/features/auth/models/data/login_response.dart';
import 'package:peer_circle_app/features/auth/models/data/user.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_request.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_response.dart';
import 'package:peer_circle_app/features/auth/models/data_sources/auth_data_source.dart';
import 'package:peer_circle_app/features/auth/models/data_sources/auth_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'auth_repository.g.dart';

@riverpod
AuthRepository authRepository(Ref ref) {
  final dataSource = ref.watch(authDataSourceProvider);
  final localStorage = ref.watch(localStorageRepositoryProvider);
  return AuthRepository(dataSource, localStorage);
}

class AuthRepository {
  AuthRepository(this._dataSource, this._localStorage);
  final AuthDataSource _dataSource;
  final LocalStorageRepository _localStorage;

  Future<CreateUserResponse> createUser(CreateUserRequest createUserRequest) {
    return _dataSource.createUser(createUserRequest);
  }

  Future<void> signOut() async {
    // await _dataSource.signOut();
    await _localStorage.clearUser();
  }

  Future<LoginResponse> login(LoginRequest loginRequest) async {
    final response = await _dataSource.login(loginRequest);
    await _localStorage.saveUser(
      userId: response.userId,
      username: loginRequest.username,
      firstname: response.firstname,
      lastname: response.lastname,
    );

    return response;
  }

  Future<User?> getCurrentUser() {
    return _localStorage.getUser();
  }

  Future<VerifyCodeResponse> verifyCode(VerifyCodeRequest request) async {
    final response = await _dataSource.verifyCode(request);
    return response;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:peer_circle_app/core/mock_config/config.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'drag_drop_data_controller.g.dart';

@Riverpod(keepAlive: true)
class DragDropDataController extends _$DragDropDataController {
  @override
  IMap<String, ISet<CategoryItem>> build() {
    if (ref.read(mockModeNotifierProvider)) {
      return IMap.fromEntries(
        CategoryKey.values.map(
          (category) => MapEntry(
            category.name,
            ISet([
              if (category != CategoryKey.guide) CategoryItem(label: category.items.first, visible: true),
            ]),
          ),
        ),
      );
    }
    return IMap.fromEntries(
      CategoryKey.values.map(
        (category) => MapEntry(category.name, ISet()),
      ),
    );
  }

  void removeData(String key, String label) {
    if (state.containsKey(key)) {
      state = state.update(
        key,
        (existingList) => existingList.removeWhere((item) => item.label == label),
      );
    }
  }

  void addData(String key, String label, bool isVisible) {
    state = state.update(
      key,
      (existingList) => existingList.add(CategoryItem(label: label, visible: isVisible)),
    );
  }

  void clearData() {
    state = IMap.fromEntries(
      CategoryKey.values.map((category) => MapEntry(category.name, ISet())),
    );
  }

  void toggleVisibility(String key, String label) {
    if (state.containsKey(key)) {
      state = state.update(
        key,
        (existingList) => existingList.map(
          (item) {
            if (item.label == label) {
              return item.copyWith(visible: !item.visible);
            }
            return item;
          },
        ).toISet(),
      );
    }
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/screens/get_started_or_login_welcome_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/common_widgets/home_screen.dart';
import 'package:peer_circle_app/core/constants/assets.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/views/screens/sign_up_flow/onboarding_screen.dart';
import 'package:peer_circle_app/features/auth/views/screens/welcome_signin_screen.dart';

class GetStartedOrLoginWelcomeScreen extends HookConsumerWidget {
  const GetStartedOrLoginWelcomeScreen({super.key});
  const GetStartedOrLoginWelcomeScreen.fromRoute(BuildContext _, GoRouterState __) : this();
  static const routeName = 'get-started-screen';
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final isSignedIn = useState(false);
    return isSignedIn.value
        ? const HomeScreen()
        : Scaffold(
            //appBar: CustomAppBarForAuth(),
            body: Padding(
              padding: EdgeInsets.symmetric(horizontal: 20.w),
              child: Column(
                children: [
                  Expanded(
                    child: Center(
                      child: Image.asset(
                        fullLogo,
                        height: 125.sp,
                        width: 125.sp,
                      ),
                    ),
                  ),
                  Column(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      FilledButton(
                        onPressed: () => context.goNamed(OnboardingScreen.routeName),
                        child: const Text('Get Started'),
                      ),
                      20.sizedBoxH,
                      OutlinedButton(
                        onPressed: () => context.goNamed(WelcomeSignInScreen.routeName),
                        child: const Text('Log in'),
                      ),
                      20.sizedBoxH,
                    ],
                  ),
                ],
              ),
            ),
          );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/views/screens/peer_snapshot_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/common_widgets/custom_app_bar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/screens/avatar_upload_screen.dart';

class PeerSnapshotScreen extends HookConsumerWidget {
  const PeerSnapshotScreen({super.key});
  const PeerSnapshotScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'peer-snapshot';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: const CustomAppBar(),
      body: Padding(
        padding: kDefaultScaffoldPadding(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Build my 360° Peer Snapshot',
              style: TextStyle(
                fontSize: 24.sp,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 10.h),
            Text(
              'This is all facets of YOU. Let’s start by understanding how you what the world to see you and how you see yourself.',
              style: TextStyle(
                fontSize: 16.sp,
                color: Colors.white70,
              ),
            ),
            Expanded(
              child: Center(
                child: Image.asset(
                  'assets/images/360snapshot.png',
                  width: 340.w,
                ),
              ),
            ),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  context.goNamed(AvatarUploadScreen.routeName);
                },
                child: const Text(
                  'Create Your Peer Snapshot',
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/controllers/avatar_controller.dart
```dart
import 'dart:async';
import 'package:image_picker/image_picker.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/controllers/current_avatar.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/models/repositories/avatar_repository.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/views/ui_states/avatar_state.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'avatar_controller.g.dart';

@riverpod
class AvatarController extends _$AvatarController {
  @override
  AvatarState build() {
    return const AvatarState();
  }

  /// Picks an image from the gallery, updates currentAvatarProvider for preview,
  /// and stores the picked file in our state.
  Future<void> pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);
    if (pickedFile == null) return;

    // For local preview in the UI
    ref.read(currentAvatarProvider.notifier).updateAvatar(pickedFile);

    // Update state to store the chosen file
    state = state.copyWith(pickedFile: pickedFile);
  }

  /// Uploads the currently picked image to the server
  Future<void> uploadAvatar() async {
    final file = state.pickedFile;
    if (file == null) return; // No file to upload

    // Set uploadState to loading
    state = state.copyWith(uploadState: const AsyncValue.loading());

    // Attempt the upload
    final result = await AsyncValue.guard(() async {
      final repository = ref.read(avatarRepositoryProvider);
      await repository.uploadAvatar(file);
    });

    // Update the state with success or error
    state = state.copyWith(uploadState: result);

    // If error, clear the local avatar to let user try again
    if (result.hasError) {
      ref.read(currentAvatarProvider.notifier).clearAvatar();
      state = state.copyWith(pickedFile: null);
    }
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/models/data_sources/avatar_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/models/data/avatar_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/models/data/avatar_response.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'avatar_remote_data_source.g.dart';

@riverpod
AvatarRemoteDataSource avatarRemoteDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  final curUser = ref.watch(authControllerProvider).valueOrNull;

  return AvatarRemoteDataSource(dio, curUser?.id);
}

class AvatarRemoteDataSource {
  AvatarRemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId; // from the current logged-in user

  /// Uploads the avatar for the current logged-in user and returns [AvatarResponse].
  Future<AvatarResponse> uploadAvatar(XFile file) async {
    if (_userId == null) {
      throw Exception('User not logged in');
    }

    // Build the request object
    final request = AvatarRequest(userId: _userId!, file: file);

    // Send the request using handleRequest
    final response = await handleRequest<AvatarResponse>(
      request: () async {
        // Convert the request into FormData
        final formData = await request.toFormData();
        return await _dio.post('/avatar/', data: formData);
      },
      // Parse JSON into an AvatarResponse
      fromJson: AvatarResponse.fromJson,
    );

    return response;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/custom_button.dart
```dart
import 'package:flutter/material.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';

class CustomButton extends StatelessWidget {
  const CustomButton({
    super.key,
    required this.buttonText,
    this.buttonColor = primaryAppColor,
    required this.onTap,
    this.borderSideColor,
    this.borderSideWidth = 1.5,
    this.buttonWidth = double.infinity,
    this.buttonHeight = 60,
    this.borderRadius = 10,
    required this.textStyle,
    this.showLoader = false,
  });
  final String buttonText;
  final Color buttonColor;
  final VoidCallback onTap;
  final Color? borderSideColor;
  final double borderSideWidth;
  final double buttonWidth;
  final double buttonHeight;
  final double borderRadius;
  final TextStyle textStyle;
  final bool showLoader;

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onTap,
      style: ButtonStyle(
        surfaceTintColor: const WidgetStatePropertyAll(transparentColor),
        splashFactory: InkSplash.splashFactory,
        overlayColor: WidgetStatePropertyAll(
          whiteColor.withValues(alpha: 0.2),
        ),
        backgroundColor: WidgetStatePropertyAll(
          buttonColor,
        ),
        fixedSize: WidgetStatePropertyAll(
          Size(buttonWidth, buttonHeight),
        ),
        shape: WidgetStatePropertyAll(
          RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(borderRadius),
            side: BorderSide(
              color: borderSideColor ?? Colors.transparent,
              width: borderSideWidth,
            ),
          ),
        ),
      ),
      child: Center(
        child: showLoader
            ? const CircularProgressIndicator(
                strokeWidth: 2,
              )
            : Text(
                buttonText,
                style: textStyle,
              ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'role_based_qa_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$RoleBasedQARequestImpl _$$RoleBasedQARequestImplFromJson(
        Map<String, dynamic> json) =>
    _$RoleBasedQARequestImpl(
      userId: (json['user_id'] as num).toInt(),
      qa: (json['qa'] as List<dynamic>)
          .map((e) => RoleBasedQAEntry.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$$RoleBasedQARequestImplToJson(
        _$RoleBasedQARequestImpl instance) =>
    <String, dynamic>{
      'user_id': instance.userId,
      'qa': instance.qa,
    };

_$RoleBasedQAEntryImpl _$$RoleBasedQAEntryImplFromJson(
        Map<String, dynamic> json) =>
    _$RoleBasedQAEntryImpl(
      question: (json['question'] as num).toInt(),
      answer1: (json['answer1'] as num).toInt(),
      answer2: (json['answer2'] as num).toInt(),
      answer3: (json['answer3'] as num).toInt(),
      answer4: (json['answer4'] as num).toInt(),
      answer5: (json['answer5'] as num).toInt(),
    );

Map<String, dynamic> _$$RoleBasedQAEntryImplToJson(
        _$RoleBasedQAEntryImpl instance) =>
    <String, dynamic>{
      'question': instance.question,
      'answer1': instance.answer1,
      'answer2': instance.answer2,
      'answer3': instance.answer3,
      'answer4': instance.answer4,
      'answer5': instance.answer5,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/ui_states/create_user_state.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'create_user_state.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$CreateUserStateImpl _$$CreateUserStateImplFromJson(Map<String, dynamic> json) => _$CreateUserStateImpl(
      status: $enumDecodeNullable(_$CreateUserStatusEnumMap, json['status']) ?? CreateUserStatus.initial,
      firstName: json['firstName'] as String?,
      lastName: json['lastName'] as String?,
      password: json['password'] as String?,
      userName: json['userName'] as String?,
      dOB: json['dOB'] as String?,
      phoneNumber: json['phoneNumber'] as String?,
      createUserResponse: json['createUserResponse'] == null ? null : CreateUserResponse.fromJson(json['createUserResponse'] as Map<String, dynamic>),
      errorMessage: json['errorMessage'] as String?,
    );

Map<String, dynamic> _$$CreateUserStateImplToJson(_$CreateUserStateImpl instance) => <String, dynamic>{
      'status': _$CreateUserStatusEnumMap[instance.status]!,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
      'password': instance.password,
      'userName': instance.userName,
      'dOB': instance.dOB,
      'phoneNumber': instance.phoneNumber,
      'createUserResponse': instance.createUserResponse,
      'errorMessage': instance.errorMessage,
    };

const _$CreateUserStatusEnumMap = {
  CreateUserStatus.initial: 'initial',
  CreateUserStatus.collecting: 'collecting',
  CreateUserStatus.loading: 'loading',
  CreateUserStatus.success: 'success',
  CreateUserStatus.error: 'error',
};

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/models/data_sources/fav_colour_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/models/data/fav_colour_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/models/data/fav_colour_response.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'fav_colour_remote_data_source.g.dart';

@riverpod
FavColourRemoteDataSource favColourRemoteDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  final curUser = ref.watch(authControllerProvider).valueOrNull;

  return FavColourRemoteDataSource(dio, curUser?.id);
}

class FavColourRemoteDataSource {
  FavColourRemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId;

  /// Saves the user's favourite colour
  Future<FavColourResponse> saveFavouriteColour(String colourName) async {
    if (_userId == null) {
      throw Exception('User not logged in');
    }

    // Create the request object
    final request = FavColourRequest(userId: _userId!, favColourName: colourName);

    // Send the request using handleRequest
    return await handleRequest<FavColourResponse>(
      request: () {
        return _dio.post('/fav_colour/', data: request.toJson());
      },
      fromJson: FavColourResponse.fromJson, // Parses the response
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/screens/neurodiversity_drag_drop_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/culture_drag_drop_screen.dart';

import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/drag_drop_template.dart';

class NeurodiversityDragDropScreen extends HookConsumerWidget {
  const NeurodiversityDragDropScreen({super.key});
  const NeurodiversityDragDropScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'neurodiversity-drag-drop';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bottomText = useState('');
    const categoryKey = CategoryKey.neurodiversity;

    return DragDropTemplate(
      key: const Key('neurodiversity-drag-drop'),
      title: 'My brain, built different',
      subtitle: const Text("Right now, this fits—I'll shape my neurodivergence at the end!"),
      bottomText: bottomText.value,
      categoryKey: categoryKey,
      dataSet: categoryKey.items,
      onSelectionChanged: (selectedData) {
        if (selectedData.isNotEmpty) {
          bottomText.value = 'Neuro-spicy 🌶️';
        } else {
          bottomText.value = '';
        }
      },
      onNavForward: () {
        context.goNamed(CultureDragDropScreen.routeName);
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/router_notifier.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'router_notifier.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$routerNotifierHash() => r'cce582610ae5dd1aac9cfaf8c4d9abbb8e14a74a';

/// This notifier is meant to implement the [Listenable] our [GoRouter] needs.
///
/// We aim to trigger redirects whenever needed.
/// This is done by calling our (only) listener everytime we want to notify stuff.
/// This allows to centralize global redirecting logic in this class.
/// In this simple case, we just listen to auth changes.
///
/// SIDE NOTE.
/// This might look overcomplicated at a first glance;
/// Instead, this method aims to follow some good some good practices:
///   1. It doesn't require us to pipe down any `ref` parameter
///   2. It works as a complete replacement for [ChangeNotifier] (it's a [Listenable] implementation)
///   3. It allows for listening to multiple providers if needed (we do have a [Ref] now!)
///
/// Copied from [RouterNotifier].
@ProviderFor(RouterNotifier)
final routerNotifierProvider = NotifierProvider<RouterNotifier, void>.internal(
  RouterNotifier.new,
  name: r'routerNotifierProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$routerNotifierHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$RouterNotifier = Notifier<void>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/navigation_history/navigation_history_notifier.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:peer_circle_app/router/navigation_history/current_route_notifier.dart';
import 'package:peer_circle_app/router/navigation_history/navigation_state.dart';
import 'package:peer_circle_app/router/router.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'navigation_history_notifier.g.dart';

@Riverpod(keepAlive: true)
class NavigationHistoryNotifier extends _$NavigationHistoryNotifier {
  @override
  NavigationState build() {
    state = const NavigationState();
    ref.listen(currentRouteNotifierProvider, (previous, next) {
      if (state.history.isNotEmpty && state.history.last == next) return;

      final history = state.history.add(next);
      final popped = state.popped.isNotEmpty && state.popped.last == next ? state.popped.removeLast() : const IListConst<String>([]);

      state = state.copyWith(history: history, popped: popped);
    }, fireImmediately: true);

    return const NavigationState();
  }

  void goBack() {
    if (!state.canGoBack) return;

    final updatedHistory = state.history.removeLast();
    final popped = state.popped.add(state.history.last);

    state = state.copyWith(history: updatedHistory, popped: popped);
    ref.read(routerProvider).go(state.history.last);
  }

  void goForward() {
    if (!state.canGoForward) return;

    final nextLocation = state.popped.last;
    final updatedHistory = state.history.add(nextLocation);
    final updatedPopped = state.popped.removeLast();

    state = state.copyWith(history: updatedHistory, popped: updatedPopped);
    ref.read(routerProvider).go(nextLocation);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/local_storage/local_storage_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/auth/models/data/user.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:shared_preferences/shared_preferences.dart';
part 'local_storage_repository.g.dart';

@riverpod
LocalStorageRepository localStorageRepository(Ref ref) => LocalStorageRepository();

class LocalStorageRepository {
  Future<SharedPreferences> _prefsInstance() => SharedPreferences.getInstance();

  Future<void> saveUser({
    required int userId,
    required String username,
    required String firstname,
    required String lastname,
  }) async {
    final prefs = await _prefsInstance();
    await prefs.setInt('user_id', userId);
    await prefs.setString('username', username);
    await prefs.setString('first_name', firstname);
    await prefs.setString('last_name', lastname);
  }

  Future<void> clearUser() async {
    final prefs = await _prefsInstance();
    await prefs.remove('user_id');
    await prefs.remove('username');
    await prefs.remove('first_name');
    await prefs.remove('last_name');
  }

  Future<User?> getUser() async {
    final prefs = await _prefsInstance();
    final userId = prefs.getInt('user_id');
    final username = prefs.getString('username');
    final firstName = prefs.getString('first_name');
    final lastName = prefs.getString('last_name');
    if (userId == null || username == null || firstName == null || lastName == null) {
      return null;
    }
    return User(id: userId, userName: username, firstName: firstName, lastName: lastName);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/app_style/theme_manager.dart
```dart
// final darkTheme = ThemeData(
//   fontFamily: 'SF Pro',
//   useMaterial3: true,
//   colorScheme: const ColorScheme.dark(
//     primary: primaryAppColor,
//     error: feedBackErrorColor,
//   ),
//   appBarTheme: const AppBarTheme(
//     backgroundColor: scaffoldBackgroundColor,
//     surfaceTintColor: transparentColor,
//   ),
//   elevatedButtonTheme: ElevatedButtonThemeData(
//     style: ElevatedButton.styleFrom(
//       backgroundColor: primaryAppColor,
//     ),
//   ),
//   dividerColor: dividerColor,
// );
// final darkTheme = FlexThemeData.dark(
//   fontFamily: 'SF Pro',
//   colors: const FlexSchemeColor(
//     primary: primaryAppColor,
//     error: feedBackErrorColor,
//     secondary: null,
//   ),
//   appBarBackground: scaffoldBackgroundColor,
//   surfaceTint: transparentColor,
//   dividerColor: dividerColor,
//   subThemesData: const FlexSubThemesData(
//     elevatedButtonSchemeColor: SchemeColor.primary,
//     elevatedButtonSecondarySchemeColor: SchemeColor.onPrimary,
//     defaultRadius: 8,
//     // Add any additional sub-theme configurations here
//     thickBorderWidth: 2.0,
//     thinBorderWidth: 1.0,
//     textButtonTextStyle: WidgetStatePropertyAll(
//       TextStyle(fontFamily: 'SF Pro'),
//     ),
//   ),
//   keyColors: const FlexKeyColors(
//     useSecondary: true,
//     useTertiary: true,
//   ),
//   tones: FlexTones.material(Brightness.dark),
//   visualDensity: FlexColorScheme.comfortablePlatformDensity,
// );

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/custom_app_bar.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/app_style/sizes.dart';
import 'package:peer_circle_app/core/constants/assets.dart';
import 'package:peer_circle_app/router/navigation_history/navigation_history_notifier.dart';

class CustomAppBar extends HookConsumerWidget implements PreferredSizeWidget {
  const CustomAppBar({
    super.key,
    this.trailing,
  });

  final List<Widget>? trailing;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final navHistory = ref.watch(navigationHistoryNotifierProvider);

    return AppBar(
      title: Image.asset(
        logo,
        height: 32.r,
        width: 32.r,
      ),
      centerTitle: true,
      actions: trailing
          ?.map((widget) => Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8.0).r,
                child: widget,
              ))
          .toList(),
      leading: IconButton(
        padding: EdgeInsets.only(left: kDefaultHorizontalPadding.w),
        icon: Icon(
          Icons.arrow_back_ios,
          size: 28.r,
        ),
        onPressed: () {
          if (navHistory.canGoBack) {
            ref.read(navigationHistoryNotifierProvider.notifier).goBack();
          } else if (context.canPop()) {
            context.pop();
          }
        },
      ),
    );
  }

  @override
  Size get preferredSize => Size.fromHeight(kAppBarHeight.r);
}

const kAppBarHeight = 56.0;

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data/category_item.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'category_item.g.dart';

part 'category_item.freezed.dart';

@freezed
class CategoryItem with _$CategoryItem {
  const factory CategoryItem({
    required String label,
    required bool visible,
  }) = _CategoryItem;

  factory CategoryItem.fromJson(Map<String, dynamic> json) => _$CategoryItemFromJson(json);
}

enum CategoryKey {
  pronouns,
  orientation,
  neurodiversity,
  culture,
  guide,
  ;

  ISet<String> get items {
    switch (this) {
      case CategoryKey.pronouns:
        return [
          'She/Her',
          'He/Him',
          'They/Them',
          'Other',
          notTelling,
        ].toISet();
      case CategoryKey.orientation:
        return [
          'LGBTQ+',
          'Two Spirit',
        ].toISet();
      case CategoryKey.neurodiversity:
        return [
          'Wonderfully Wired',
          'Maybe Me',
        ].toISet();
      case CategoryKey.culture:
        return [
          'Asian',
          'Southeast Asian',
          'North African',
          'African (Sub-Saharan)',
          'Middle Eastern',
          'Latino/Latina/Latinx',
          'Caribbean',
          'Pacific Islander',
          'Indigenous',
        ].toISet();
      case CategoryKey.guide:
        return [
          'The\nReal Me',
        ].toISet();
    }
  }
}

const notTelling = 'Not Telling';

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/screens/orientation_drag_drop_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/neurodiversity_drag_drop_screen.dart';

import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/drag_drop_template.dart';

class OrientationDragDropScreen extends HookConsumerWidget {
  const OrientationDragDropScreen({super.key});
  const OrientationDragDropScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'orientation-drag-drop';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bottomText = useState('');
    const categoryKey = CategoryKey.orientation;

    return DragDropTemplate(
      key: const Key('orientation-drag-drop'),
      title: 'My flavours? 🌈',
      subtitle: const Text("This is just the beginning-I'll add more details as I go"),
      bottomText: bottomText.value,
      dataSet: categoryKey.items,
      categoryKey: categoryKey,
      onSelectionChanged: (selectedData) {
        if (selectedData.isNotEmpty) {
          bottomText.value = 'Claimed 🏳️‍🌈';
        } else {
          bottomText.value = '';
        }
      },
      onNavForward: () {
        context.goNamed(NeurodiversityDragDropScreen.routeName);
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data_sources/role_based_qa_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'role_based_qa_remote_data_source.g.dart';

@riverpod
RoleBasedQARemoteDataSource roleBasedQARemoteDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  final curUser = ref.watch(authControllerProvider).valueOrNull;

  return RoleBasedQARemoteDataSource(dio, curUser?.id);
}

class RoleBasedQARemoteDataSource {
  RoleBasedQARemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId;

  Future<RoleBasedQAResponse> submitQA(RoleBasedQARequest request) async {
    if (_userId == null) {
      throw Exception('User not logged in');
    }

    return await handleRequest<RoleBasedQAResponse>(
      request: () {
        return _dio.post('/role_based_qa/', data: request.toJson());
      },
      fromJson: RoleBasedQAResponse.fromJson,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/data_sources/emotional_qa_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_response.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'emotional_qa_remote_data_source.g.dart';

@riverpod
EmotionalQARemoteDataSource emotionalQARemoteDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  final curUser = ref.watch(authControllerProvider).valueOrNull;

  return EmotionalQARemoteDataSource(dio, curUser?.id);
}

class EmotionalQARemoteDataSource {
  EmotionalQARemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId;

  Future<EmotionalQAResponse> submitQA(EmotionalQARequest request) async {
    if (_userId == null) {
      throw Exception('User not logged in');
    }

    return await handleRequest<EmotionalQAResponse>(
      request: () {
        return _dio.post('/emotional_qa/', data: request.toJson());
      },
      fromJson: EmotionalQAResponse.fromJson,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/pretty_json/pretty_json.dart
```dart
import 'dart:convert';

String prettyPrintJson(String jsonString) {
  final dynamic jsonObject = jsonDecode(jsonString);
  final prettyString = _printJson(jsonObject);

  return prettyString;
}

String _printJson(dynamic jsonObject, {int indent = 0}) {
  final buffer = StringBuffer();

  if (jsonObject is Map) {
    buffer.writeln('{');
    var index = 0;
    jsonObject.forEach((dynamic key, dynamic value) {
      if (value is String) {
        buffer.write('${" " * (indent + 2)}"$key": "$value"');
      } else {
        buffer.write('${" " * (indent + 2)}"$key": ${_printJson(value, indent: indent + 2)}');
      }
      if (index < jsonObject.length - 1) {
        buffer.writeln(',');
      } else {
        buffer.writeln();
      }
      index++;
    });
    buffer.write('${" " * indent}}');
  } else if (jsonObject is List) {
    buffer.writeln('[');
    for (var i = 0; i < jsonObject.length; i++) {
      buffer.write('${" " * (indent + 2)}${_printJson(jsonObject[i], indent: indent + 2)}');
      if (i < jsonObject.length - 1) {
        buffer.writeln(',');
      } else {
        buffer.writeln();
      }
    }
    buffer.write('${" " * indent}]');
  } else {
    buffer.write(jsonObject.toString());
  }
  return buffer.toString();
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/views/screens/pronoun_drag_drop_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/screens/orientation_drag_drop_screen.dart';

import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/views/widgets/drag_drop_template.dart';

class PronounDragDropScreen extends HookConsumerWidget {
  const PronounDragDropScreen({super.key});
  const PronounDragDropScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'pronoun-drag-drop';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bottomText = useState('');
    const categoryKey = CategoryKey.pronouns;

    return DragDropTemplate(
      key: const Key('pronoun-drag-drop'),
      title: 'My pronouns are ...',
      subtitle: const Text('Not a request. Just respect.'),
      bottomText: bottomText.value,
      dataSet: categoryKey.items,
      categoryKey: categoryKey,
      onSelectionChanged: (selectedData) {
        if (selectedData.isNotEmpty) {
          bottomText.value = 'Say less 💅';
        } else {
          bottomText.value = '';
        }
      },
      onNavForward: () {
        context.goNamed(OrientationDragDropScreen.routeName);
      },
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data/physical_core_request.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/category_item.dart';

class PhysicalCoreRequest {
  PhysicalCoreRequest({
    required this.userId,
    required this.pronouns,
    required this.orientation,
    required this.neurodiversity,
    required this.culture,
  });

  factory PhysicalCoreRequest.fromState(int userId, IMap<String, ISet<CategoryItem>> selectedData) {
    List<Map<String, String>> extractCategory(String key) {
      return selectedData[key]
              ?.map((item) => {
                    'label': item.label,
                    'visible': item.visible.toString(),
                  })
              .toList() ??
          [];
    }

    return PhysicalCoreRequest(
      userId: userId,
      pronouns: extractCategory('pronouns'),
      orientation: extractCategory('orientation'),
      neurodiversity: extractCategory('neurodiversity'),
      culture: extractCategory('culture'),
    );
  }

  final int userId;
  final List<Map<String, String>> pronouns;
  final List<Map<String, String>> orientation;
  final List<Map<String, String>> neurodiversity;
  final List<Map<String, String>> culture;

  Map<String, dynamic> toJson() {
    return {
      'user_id': userId,
      'pronouns': pronouns,
      'orientation': orientation,
      'neurodiversity': neurodiversity,
      'culture': culture,
    };
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'role_based_qa_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$RoleBasedQAResponseImpl _$$RoleBasedQAResponseImplFromJson(
        Map<String, dynamic> json) =>
    _$RoleBasedQAResponseImpl(
      status: (json['status'] as num).toInt(),
      archetype: json['archetype'] as String,
      insights: json['insights'] == null
          ? const IListConst([])
          : IList<Insight>.fromJson(json['insights'],
              (value) => Insight.fromJson(value as Map<String, dynamic>)),
    );

Map<String, dynamic> _$$RoleBasedQAResponseImplToJson(
        _$RoleBasedQAResponseImpl instance) =>
    <String, dynamic>{
      'status': instance.status,
      'archetype': instance.archetype,
      'insights': instance.insights.toJson(
        (value) => value,
      ),
    };

_$InsightImpl _$$InsightImplFromJson(Map<String, dynamic> json) =>
    _$InsightImpl(
      type: json['type'] as String,
      text: json['text'] as String,
      check: json['check'] as bool,
      connector: json['connector'] as String,
    );

Map<String, dynamic> _$$InsightImplToJson(_$InsightImpl instance) =>
    <String, dynamic>{
      'type': instance.type,
      'text': instance.text,
      'check': instance.check,
      'connector': instance.connector,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/controllers/auth_controller.dart
```dart
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/features/auth/models/data/user.dart';
import 'package:peer_circle_app/features/auth/models/repositories/auth_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'auth_controller.g.dart';

// AuthController handles the authentication logic
// The state of the controller is the user id of the authenticated user
@riverpod
class AuthController extends _$AuthController {
  @override
  FutureOr<User?> build() => _loadAuthState();

  Future<User?> _loadAuthState() async {
    talker.debug('Loading auth state');
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() => ref.read(authRepositoryProvider).getCurrentUser());
    return state.value;
  }

  Future<void> signIn(LoginRequest request) async {
    talker.debug('Signing in with $request');
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      final response = await ref.read(authRepositoryProvider).login(request);
      return User(id: response.userId, userName: request.username, firstName: response.firstname, lastName: response.lastname);
    });
  }

  Future<void> signOut() async {
    talker.debug('Signing out');
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      await ref.read(authRepositoryProvider).signOut();
      return null;
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data_sources/core_insights_feedback_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_response.dart';

import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'core_insights_feedback_remote_data_source.g.dart';

@riverpod
CoreInsightsFeedbackRemoteDataSource coreInsightsFeedbackRemoteDataSource(
  Ref ref,
) {
  final dio = ref.watch(dioProvider);
  final user = ref.watch(authControllerProvider).valueOrNull;
  return CoreInsightsFeedbackRemoteDataSource(dio, user?.id);
}

class CoreInsightsFeedbackRemoteDataSource {
  CoreInsightsFeedbackRemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId;

  Future<CoreInsightsFeedbackResponse> submit(CoreInsightsFeedbackRequest request) async {
    if (_userId == null) throw Exception('User not logged in');

    return await handleRequest<CoreInsightsFeedbackResponse>(
      request: () => _dio.post('/core_insights_feedback/', data: request.toJson()),
      fromJson: CoreInsightsFeedbackResponse.fromJson,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data_sources/physical_core_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/physical_core_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/physical_core_response.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'physical_core_remote_data_source.g.dart';

@riverpod
PhysicalCoreRemoteDataSource physicalCoreRemoteDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  final curUser = ref.watch(authControllerProvider).valueOrNull;
  return PhysicalCoreRemoteDataSource(dio, curUser?.id);
}

class PhysicalCoreRemoteDataSource {
  PhysicalCoreRemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId;

  Future<PhysicalCoreResponse> submitPhysicalCore(PhysicalCoreRequest request) async {
    if (_userId == null) {
      throw Exception('User not logged in');
    }

    return await handleRequest<PhysicalCoreResponse>(
      request: () {
        return _dio.post('/physical_core/', data: request.toJson());
      },
      fromJson: PhysicalCoreResponse.fromJson,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data/bio_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bio_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$BioResponseImpl _$$BioResponseImplFromJson(Map<String, dynamic> json) =>
    _$BioResponseImpl(
      status: (json['status'] as num).toInt(),
      archetype: json['archetype'] as String,
      insights: json['insights'] == null
          ? const IListConst([])
          : IList<Insight>.fromJson(json['insights'],
              (value) => Insight.fromJson(value as Map<String, dynamic>)),
    );

Map<String, dynamic> _$$BioResponseImplToJson(_$BioResponseImpl instance) =>
    <String, dynamic>{
      'status': instance.status,
      'archetype': instance.archetype,
      'insights': instance.insights.toJson(
        (value) => value,
      ),
    };

_$InsightImpl _$$InsightImplFromJson(Map<String, dynamic> json) =>
    _$InsightImpl(
      type: json['type'] as String,
      text: json['text'] as String,
      check: json['check'] as bool,
      connector: json['connector'] as String,
    );

Map<String, dynamic> _$$InsightImplToJson(_$InsightImpl instance) =>
    <String, dynamic>{
      'type': instance.type,
      'text': instance.text,
      'check': instance.check,
      'connector': instance.connector,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data_sources/bio_remote_data_source.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/dio_provider.dart';
import 'package:peer_circle_app/core/functions/handle_request.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'bio_remote_data_source.g.dart';

@riverpod
BioRemoteDataSource bioRemoteDataSource(Ref ref) {
  final dio = ref.watch(dioProvider);
  final curUser = ref.watch(authControllerProvider).valueOrNull;
  return BioRemoteDataSource(dio, curUser?.id);
}

class BioRemoteDataSource {
  BioRemoteDataSource(this._dio, this._userId);
  final Dio _dio;
  final int? _userId;

  Future<BioResponse> submitBio(BioRequest request) async {
    if (_userId == null) {
      throw Exception('User not logged in');
    }

    return await handleRequest<BioResponse>(
      request: () {
        return _dio.post('/bio/', data: request.toJson());
      },
      fromJson: BioResponse.fromJson,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/controllers/core_insights_feedback_controller.dart
```dart
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/repositories/core_insights_feedback_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'core_insights_feedback_controller.g.dart';

@riverpod
class CoreInsightsFeedbackController extends _$CoreInsightsFeedbackController {
  @override
  Future<void> build() async {}

  Future<void> submitInsights(Map<String, bool> selectedInsights) async {
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      final userId = await ref.read(authControllerProvider.selectAsync((u) => u?.id));
      if (userId == null) throw Exception('User ID is null');

      final request = CoreInsightsFeedbackRequest(
        userId: userId,
        definedPrimary: selectedInsights[InsightType.definedPrimary.key].toString(),
        definedSecondary: selectedInsights[InsightType.definedSecondary.key].toString(),
        validationPrimary: selectedInsights[InsightType.validationPrimary.key].toString(),
      );

      await ref.read(coreInsightsFeedbackRepositoryProvider).submit(request);
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/navigation_history/current_route_notifier.dart
```dart
import 'package:go_router/go_router.dart';
import 'package:peer_circle_app/router/router.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'current_route_notifier.g.dart';

@Riverpod(keepAlive: true)
class CurrentRouteNotifier extends _$CurrentRouteNotifier {
  @override
  String build() {
    final router = ref.watch(routerProvider);
    router.routeInformationProvider.addListener(_onRouteChange);
    router.routerDelegate.addListener(_onRouteChange);

    ref.onDispose(() {
      router.routeInformationProvider.removeListener(_onRouteChange);
      router.routerDelegate.removeListener(_onRouteChange);
    });

    return router.currentLocation;
  }

  void _onRouteChange() {
    final router = ref.read(routerProvider);
    if (router.routerDelegate.currentConfiguration.isNotEmpty) {
      state = router.currentLocation;
    }
  }
}

extension GoRouterExtension on GoRouter {
  String get currentLocation => routerDelegate.currentRoute;
}

extension GoRouterDelegateExtension on GoRouterDelegate {
  String get currentRoute {
    RouteMatch? lastMatch;
    try {
      lastMatch = currentConfiguration.last;
    } catch (e) {
      lastMatch = null;
    }
    final matchList = lastMatch is ImperativeRouteMatch ? lastMatch.matches : currentConfiguration;
    return matchList.uri.toString();
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data_sources/role_based_qa_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'role_based_qa_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$roleBasedQARemoteDataSourceHash() =>
    r'94fa83d250415b7b336b61f2f48eee49861f10a2';

/// See also [roleBasedQARemoteDataSource].
@ProviderFor(roleBasedQARemoteDataSource)
final roleBasedQARemoteDataSourceProvider =
    AutoDisposeProvider<RoleBasedQARemoteDataSource>.internal(
  roleBasedQARemoteDataSource,
  name: r'roleBasedQARemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$roleBasedQARemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef RoleBasedQARemoteDataSourceRef
    = AutoDisposeProviderRef<RoleBasedQARemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/data_sources/emotional_qa_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'emotional_qa_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$emotionalQARemoteDataSourceHash() => r'483d10df8b932991ee42bd321325763f6780c5e9';

/// See also [emotionalQARemoteDataSource].
@ProviderFor(emotionalQARemoteDataSource)
final emotionalQARemoteDataSourceProvider = AutoDisposeProvider<EmotionalQARemoteDataSource>.internal(
  emotionalQARemoteDataSource,
  name: r'emotionalQARemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$emotionalQARemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef EmotionalQARemoteDataSourceRef = AutoDisposeProviderRef<EmotionalQARemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/controllers/physical_core_controller.dart
```dart
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/physical_core_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/repositories/physical_core_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'physical_core_controller.g.dart';

@riverpod
class PhysicalCoreController extends _$PhysicalCoreController {
  @override
  Future<void> build() async {
    return;
  }

  Future<void> submitData() async {
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      final selectedData = ref.read(dragDropDataControllerProvider);
      final repository = ref.read(physicalCoreRepositoryProvider);
      final userId = await ref.read(authControllerProvider.selectAsync((value) => value?.id));
      if (userId == null) {
        throw Exception('User id is null');
      }
      final request = PhysicalCoreRequest.fromState(
        userId,
        selectedData,
      );
      await repository.submitPhysicalCore(request);
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/controllers/emotional_qa_controller.dart
```dart
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/repositories/emotional_qa_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'emotional_qa_controller.g.dart';

@riverpod
class EmotionalQAController extends _$EmotionalQAController {
  @override
  Future<void> build() async {
    return;
  }

  Future<void> submitQA(List<int> answers) async {
    state = const AsyncValue.loading();
    state = await AsyncValue.guard(() async {
      final repository = ref.read(emotionalQARepositoryProvider);
      final userId = await ref.read(authControllerProvider.selectAsync((value) => value?.id));
      if (userId == null) {
        throw Exception('User id is null');
      }
      final request = EmotionalQARequest(
        userId: userId,
        qa: List.generate(answers.length, (index) => QAEntry(question: index + 1, answer: answers[index] + 1)),
      );
      await repository.submitQA(request);
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data_sources/core_insights_feedback_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'core_insights_feedback_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$coreInsightsFeedbackRemoteDataSourceHash() => r'13c35b58efdbcfe11ddc6f924fc0a4a0aee61f1e';

/// See also [coreInsightsFeedbackRemoteDataSource].
@ProviderFor(coreInsightsFeedbackRemoteDataSource)
final coreInsightsFeedbackRemoteDataSourceProvider = AutoDisposeProvider<CoreInsightsFeedbackRemoteDataSource>.internal(
  coreInsightsFeedbackRemoteDataSource,
  name: r'coreInsightsFeedbackRemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$coreInsightsFeedbackRemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef CoreInsightsFeedbackRemoteDataSourceRef = AutoDisposeProviderRef<CoreInsightsFeedbackRemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data/bio_response.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'bio_response.freezed.dart';
part 'bio_response.g.dart';

@freezed
class BioResponse with _$BioResponse {
  const factory BioResponse({
    required int status,
    required String archetype,
    @Default(IListConst([])) IList<Insight> insights,
  }) = _BioResponse;

  factory BioResponse.fromJson(Map<String, dynamic> json) => _$BioResponseFromJson(json);
}

@freezed
class Insight with _$Insight {
  const factory Insight({
    required String type,
    required String text,
    required bool check,
    required String connector,
  }) = _Insight;

  factory Insight.fromJson(Map<String, dynamic> json) => _$InsightFromJson(json);
  const Insight._();
}

enum InsightType {
  definedPrimary,
  definedSecondary,
  validationPrimary,
  ;

  String get key {
    switch (this) {
      case InsightType.definedPrimary:
        return 'defined_primary';
      case InsightType.definedSecondary:
        return 'defined_secondary';
      case InsightType.validationPrimary:
        return 'validation_primary';
    }
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'emotional_qa_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$EmotionalQARequestImpl _$$EmotionalQARequestImplFromJson(Map<String, dynamic> json) => _$EmotionalQARequestImpl(
      userId: (json['user_id'] as num).toInt(),
      qa: (json['qa'] as List<dynamic>).map((e) => QAEntry.fromJson(e as Map<String, dynamic>)).toList(),
    );

Map<String, dynamic> _$$EmotionalQARequestImplToJson(_$EmotionalQARequestImpl instance) => <String, dynamic>{
      'user_id': instance.userId,
      'qa': instance.qa,
    };

_$QAEntryImpl _$$QAEntryImplFromJson(Map<String, dynamic> json) => _$QAEntryImpl(
      question: (json['question'] as num).toInt(),
      answer: (json['answer'] as num).toInt(),
    );

Map<String, dynamic> _$$QAEntryImplToJson(_$QAEntryImpl instance) => <String, dynamic>{
      'question': instance.question,
      'answer': instance.answer,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/read_only_container_textfield.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';
import 'package:peer_circle_app/core/app_style/text_style_constants.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';

class ReadOnlyContainerTextField extends StatelessWidget {
  const ReadOnlyContainerTextField({
    super.key,
    required this.hintText,
    required this.onTap,
  });
  final String hintText;
  final VoidCallback onTap;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        height: 48.h,
        width: context.screenWidth,
        decoration: BoxDecoration(
          color: surfaceColor,
          borderRadius: BorderRadius.circular(12.r),
        ),
        child: Padding(
          padding: EdgeInsets.only(left: 15.sp),
          child: Row(
            children: [
              Material(
                color: surfaceColor,
                child: Text(
                  hintText,
                  style: hintTextTextStyle(),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data_sources/physical_core_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'physical_core_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$physicalCoreRemoteDataSourceHash() => r'6394ab93adc9909c81c1672fd79c4cfeb4f004fd';

/// See also [physicalCoreRemoteDataSource].
@ProviderFor(physicalCoreRemoteDataSource)
final physicalCoreRemoteDataSourceProvider = AutoDisposeProvider<PhysicalCoreRemoteDataSource>.internal(
  physicalCoreRemoteDataSource,
  name: r'physicalCoreRemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$physicalCoreRemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef PhysicalCoreRemoteDataSourceRef = AutoDisposeProviderRef<PhysicalCoreRemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/models/data_sources/fav_colour_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'fav_colour_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$favColourRemoteDataSourceHash() => r'aff3bf894d0f7b12d35a1716169312a3b67238cf';

/// See also [favColourRemoteDataSource].
@ProviderFor(favColourRemoteDataSource)
final favColourRemoteDataSourceProvider = AutoDisposeProvider<FavColourRemoteDataSource>.internal(
  favColourRemoteDataSource,
  name: r'favColourRemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$favColourRemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef FavColourRemoteDataSourceRef = AutoDisposeProviderRef<FavColourRemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/api/dio_provider.dart
```dart
import 'package:dio/dio.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/api/constants.dart';
import 'package:peer_circle_app/core/debug_log/logger.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:talker_dio_logger/talker_dio_logger_interceptor.dart';
import 'package:talker_dio_logger/talker_dio_logger_settings.dart';

part 'dio_provider.g.dart';

@riverpod
Dio dio(Ref ref) {
  final dioInstance = Dio(
    BaseOptions(
      baseUrl: baseUrl,
      contentType: 'application/json',
    ),
  );
  dioInstance.interceptors.add(
    TalkerDioLogger(
      talker: talker,
      settings: const TalkerDioLoggerSettings(
        printRequestHeaders: true,
        printResponseHeaders: true,
      ),
    ),
  );
  // if (!kIsWeb) {
  //   final persistCookieJar = PersistCookieJar();
  //   dioInstance.interceptors.add(CookieManager(persistCookieJar));
  // }

  return dioInstance;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/repositories/role_based_qa_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'role_based_qa_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$roleBasedQARepositoryHash() =>
    r'54a834ade1b06ec0a2823a1713e80d9294a8a42a';

/// See also [roleBasedQARepository].
@ProviderFor(roleBasedQARepository)
final roleBasedQARepositoryProvider =
    AutoDisposeProvider<RoleBasedQARepository>.internal(
  roleBasedQARepository,
  name: r'roleBasedQARepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$roleBasedQARepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef RoleBasedQARepositoryRef
    = AutoDisposeProviderRef<RoleBasedQARepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data_sources/bio_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bio_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$bioRemoteDataSourceHash() =>
    r'66d77fceb88c312533f42399b9e422501aa19d9d';

/// See also [bioRemoteDataSource].
@ProviderFor(bioRemoteDataSource)
final bioRemoteDataSourceProvider =
    AutoDisposeProvider<BioRemoteDataSource>.internal(
  bioRemoteDataSource,
  name: r'bioRemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$bioRemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef BioRemoteDataSourceRef = AutoDisposeProviderRef<BioRemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/ui_states/create_user_state.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_response.dart';

part 'create_user_state.g.dart';

part 'create_user_state.freezed.dart';

@freezed
class CreateUserState with _$CreateUserState {
  const factory CreateUserState({
    @Default(CreateUserStatus.initial) CreateUserStatus status,
    String? firstName,
    String? lastName,
    String? password,
    String? userName,
    String? dOB,
    String? phoneNumber,
    CreateUserResponse? createUserResponse,
    String? errorMessage,
  }) = _CreateUserState;
  const CreateUserState._();

  factory CreateUserState.fromJson(Map<String, dynamic> json) => _$CreateUserStateFromJson(json);

  // isLoading
  bool get isLoading => status == CreateUserStatus.loading;

  // hasError
  bool get hasError => status == CreateUserStatus.error;

  // isSuccess
  bool get isSuccess => status == CreateUserStatus.success;
}

enum CreateUserStatus { initial, collecting, loading, success, error }

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/controllers/role_based_qa_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'role_based_qa_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$roleBasedQAControllerHash() =>
    r'3c9f917f4597fd9a6434d1a7acde2587d68a65c3';

/// See also [RoleBasedQAController].
@ProviderFor(RoleBasedQAController)
final roleBasedQAControllerProvider = AutoDisposeNotifierProvider<
    RoleBasedQAController, AsyncValue<RoleBasedQAResponse?>>.internal(
  RoleBasedQAController.new,
  name: r'roleBasedQAControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$roleBasedQAControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$RoleBasedQAController
    = AutoDisposeNotifier<AsyncValue<RoleBasedQAResponse?>>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/functions/handle_request.dart
```dart
import 'package:dio/dio.dart';
import 'package:peer_circle_app/core/exception/auth_exception.dart';
import 'package:peer_circle_app/features/auth/models/data/error_response.dart';

/// Generic request handler with error handling
Future<T> handleRequest<T>({
  required Future<Response<dynamic>> Function() request,
  required T Function(Map<String, dynamic>) fromJson,
}) async {
  try {
    final response = await request();

    if (response.data is Map<String, dynamic>) {
      final data = response.data as Map<String, dynamic>;

      // Check if response contains an error
      if (data.containsKey('error')) {
        final errorResponse = ErrorResponse.fromJson(data);
        throw AuthException(errorResponse.error); // Convert to AuthException
      }

      return fromJson(data);
    }

    throw const FormatException('Unexpected response format');
  } catch (e) {
    if (e is DioException) {
      throw AuthException('Network error: ${e.message}');
    } else if (e is FormatException) {
      throw AuthException('Invalid response format');
    }
    rethrow;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/models/data_sources/avatar_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'avatar_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$avatarRemoteDataSourceHash() => r'ef47e290230c0675851d8694d8ea3bfd1c222be5';

/// See also [avatarRemoteDataSource].
@ProviderFor(avatarRemoteDataSource)
final avatarRemoteDataSourceProvider = AutoDisposeProvider<AvatarRemoteDataSource>.internal(
  avatarRemoteDataSource,
  name: r'avatarRemoteDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$avatarRemoteDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef AvatarRemoteDataSourceRef = AutoDisposeProviderRef<AvatarRemoteDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/controllers/drag_drop_data_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'drag_drop_data_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$dragDropDataControllerHash() =>
    r'b2e539551aebcafa29c1c9f1ca1d479410044d11';

/// See also [DragDropDataController].
@ProviderFor(DragDropDataController)
final dragDropDataControllerProvider = NotifierProvider<DragDropDataController,
    IMap<String, ISet<CategoryItem>>>.internal(
  DragDropDataController.new,
  name: r'dragDropDataControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$dragDropDataControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$DragDropDataController = Notifier<IMap<String, ISet<CategoryItem>>>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/repositories/core_insights_feedback_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'core_insights_feedback_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$coreInsightsFeedbackRepositoryHash() => r'3ec80988a79b107f0564efa8496f084172394667';

/// See also [coreInsightsFeedbackRepository].
@ProviderFor(coreInsightsFeedbackRepository)
final coreInsightsFeedbackRepositoryProvider = AutoDisposeProvider<CoreInsightsFeedbackRepository>.internal(
  coreInsightsFeedbackRepository,
  name: r'coreInsightsFeedbackRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$coreInsightsFeedbackRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef CoreInsightsFeedbackRepositoryRef = AutoDisposeProviderRef<CoreInsightsFeedbackRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/repositories/emotional_qa_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'emotional_qa_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$emotionalQARepositoryHash() => r'043e976ba17ce3a3c90fcfae9614dae6beccd91d';

/// See also [emotionalQARepository].
@ProviderFor(emotionalQARepository)
final emotionalQARepositoryProvider = AutoDisposeProvider<EmotionalQARepository>.internal(
  emotionalQARepository,
  name: r'emotionalQARepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$emotionalQARepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef EmotionalQARepositoryRef = AutoDisposeProviderRef<EmotionalQARepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/extension/talker.dart
```dart
import 'package:flutter/material.dart';
import 'package:talker_flutter/talker_flutter.dart';

extension TalkerExt on Talker {
  void success(String message) {
    logCustom(SuccessLog(message));
  }
}

class SuccessLog extends TalkerLog {
  SuccessLog(String super.message);

  /// Your custom log title
  @override
  String get title => 'S';

  /// Your custom log color
  @override
  AnsiPen get pen => AnsiPen()..green();
}

extension TalkerDataColor on TalkerData {
  Color getColor() {
    if (title == SuccessLog('').title) {
      return Colors.green;
    }
    switch (logLevel) {
      case LogLevel.error:
        return Colors.red;
      case LogLevel.warning:
        return Colors.orange;
      case LogLevel.info:
        return Colors.blue;
      case LogLevel.debug:
        return Colors.green;
      default:
        return Colors.white54;
    }
  }

  String oneLineString() {
    return '[$title] ${displayTime()} | $displayMessage';
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/repositories/role_based_qa_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/role_based_identity/models/data_sources/role_based_qa_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'role_based_qa_repository.g.dart';

@riverpod
RoleBasedQARepository roleBasedQARepository(Ref ref) {
  final remoteDataSource = ref.watch(roleBasedQARemoteDataSourceProvider);
  return RoleBasedQARepository(remoteDataSource);
}

class RoleBasedQARepository {
  RoleBasedQARepository(this._remoteDataSource);
  final RoleBasedQARemoteDataSource _remoteDataSource;

  Future<RoleBasedQAResponse> submitQA(RoleBasedQARequest request) {
    return _remoteDataSource.submitQA(request);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/local_storage/local_storage_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'local_storage_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$localStorageRepositoryHash() => r'8f5e384eebd99e524988a463a21792a9670a6e4f';

/// See also [localStorageRepository].
@ProviderFor(localStorageRepository)
final localStorageRepositoryProvider = AutoDisposeProvider<LocalStorageRepository>.internal(
  localStorageRepository,
  name: r'localStorageRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$localStorageRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef LocalStorageRepositoryRef = AutoDisposeProviderRef<LocalStorageRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data_sources/auth_remote_data_source.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'auth_remote_data_source.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$authDataSourceHash() => r'ca1ea7c8c11d4c1ed261ee4518c1911775d8591c';

/// See also [authDataSource].
@ProviderFor(authDataSource)
final authDataSourceProvider = AutoDisposeProvider<AuthDataSource>.internal(
  authDataSource,
  name: r'authDataSourceProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$authDataSourceHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef AuthDataSourceRef = AutoDisposeProviderRef<AuthDataSource>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/repositories/physical_core_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'physical_core_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$physicalCoreRepositoryHash() => r'ce2ed3f3e3cc36b552d1997874d11d0aae685811';

/// See also [physicalCoreRepository].
@ProviderFor(physicalCoreRepository)
final physicalCoreRepositoryProvider = AutoDisposeProvider<PhysicalCoreRepository>.internal(
  physicalCoreRepository,
  name: r'physicalCoreRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$physicalCoreRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef PhysicalCoreRepositoryRef = AutoDisposeProviderRef<PhysicalCoreRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/models/repositories/fav_colour_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'fav_colour_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$favColourRepositoryHash() => r'e94603296b36cbe154b76a28949ca3dca76c1df8';

/// See also [favColourRepository].
@ProviderFor(favColourRepository)
final favColourRepositoryProvider = AutoDisposeProvider<FavColourRepository>.internal(
  favColourRepository,
  name: r'favColourRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$favColourRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef FavColourRepositoryRef = AutoDisposeProviderRef<FavColourRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/controllers/core_insights_feedback_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'core_insights_feedback_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$coreInsightsFeedbackControllerHash() =>
    r'e7fbb86df2e1b5fbe1e53cb729315a8539ecf8a6';

/// See also [CoreInsightsFeedbackController].
@ProviderFor(CoreInsightsFeedbackController)
final coreInsightsFeedbackControllerProvider = AutoDisposeAsyncNotifierProvider<
    CoreInsightsFeedbackController, void>.internal(
  CoreInsightsFeedbackController.new,
  name: r'coreInsightsFeedbackControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$coreInsightsFeedbackControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$CoreInsightsFeedbackController = AutoDisposeAsyncNotifier<void>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/repositories/emotional_qa_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/emotion_qa/models/data_sources/emotional_qa_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'emotional_qa_repository.g.dart';

@riverpod
EmotionalQARepository emotionalQARepository(Ref ref) {
  final remoteDataSource = ref.watch(emotionalQARemoteDataSourceProvider);
  return EmotionalQARepository(remoteDataSource);
}

class EmotionalQARepository {
  EmotionalQARepository(this._remoteDataSource);
  final EmotionalQARemoteDataSource _remoteDataSource;

  Future<EmotionalQAResponse> submitQA(EmotionalQARequest request) {
    return _remoteDataSource.submitQA(request);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/home_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/extension/double.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';

class HomeScreen extends HookConsumerWidget {
  const HomeScreen({super.key});

  const HomeScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'home';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      body: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text('You are logged in!'),
              16.sizedBoxH,
              FilledButton(
                onPressed: () {
                  ref.read(authControllerProvider.notifier).signOut();
                },
                child: const Text('Sign out'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/controllers/fav_colour_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'fav_colour_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$favColourControllerHash() =>
    r'fbaf16adfd160846650f5a4bde35b4b4325fd9e8';

/// See also [FavColourController].
@ProviderFor(FavColourController)
final favColourControllerProvider =
    AutoDisposeNotifierProvider<FavColourController, FavColourState>.internal(
  FavColourController.new,
  name: r'favColourControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$favColourControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$FavColourController = AutoDisposeNotifier<FavColourState>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'role_based_qa_request.freezed.dart';
part 'role_based_qa_request.g.dart';

@freezed
class RoleBasedQARequest with _$RoleBasedQARequest {
  const factory RoleBasedQARequest({
    @JsonKey(name: 'user_id') required int userId,
    required List<RoleBasedQAEntry> qa,
  }) = _RoleBasedQARequest;

  factory RoleBasedQARequest.fromJson(Map<String, dynamic> json) =>
      _$RoleBasedQARequestFromJson(json);
}

@freezed
class RoleBasedQAEntry with _$RoleBasedQAEntry {
  const factory RoleBasedQAEntry({
    required int question,
    required int answer1,
    required int answer2,
    required int answer3,
    required int answer4,
    required int answer5,
  }) = _RoleBasedQAEntry;

  factory RoleBasedQAEntry.fromJson(Map<String, dynamic> json) =>
      _$RoleBasedQAEntryFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/models/repositories/avatar_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'avatar_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$avatarRepositoryHash() => r'6db71e230d885130b9011f86d66a2e64372d7202';

/// See also [avatarRepository].
@ProviderFor(avatarRepository)
final avatarRepositoryProvider = AutoDisposeProvider<AvatarRepository>.internal(
  avatarRepository,
  name: r'avatarRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$avatarRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef AvatarRepositoryRef = AutoDisposeProviderRef<AvatarRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/repositories/bio_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bio_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$bioRepositoryHash() => r'ebbfe4bbee22981c37a28635cbbbda3af5043378';

/// See also [bioRepository].
@ProviderFor(bioRepository)
final bioRepositoryProvider = AutoDisposeProvider<BioRepository>.internal(
  bioRepository,
  name: r'bioRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$bioRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef BioRepositoryRef = AutoDisposeProviderRef<BioRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/repositories/core_insights_feedback_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/profile_completion/models/data_sources/core_insights_feedback_remote_data_source.dart';

import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'core_insights_feedback_repository.g.dart';

@riverpod
CoreInsightsFeedbackRepository coreInsightsFeedbackRepository(Ref ref) {
  final remoteDataSource = ref.watch(coreInsightsFeedbackRemoteDataSourceProvider);
  return CoreInsightsFeedbackRepository(remoteDataSource);
}

class CoreInsightsFeedbackRepository {
  CoreInsightsFeedbackRepository(this._remoteDataSource);
  final CoreInsightsFeedbackRemoteDataSource _remoteDataSource;

  Future<CoreInsightsFeedbackResponse> submit(CoreInsightsFeedbackRequest request) {
    return _remoteDataSource.submit(request);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/api/dio_provider.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'dio_provider.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$dioHash() => r'ba14c5e6a69a4ff8b6b7bb76e7f14c417d0a55a9';

/// See also [dio].
@ProviderFor(dio)
final dioProvider = AutoDisposeProvider<Dio>.internal(
  dio,
  name: r'dioProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$dioHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef DioRef = AutoDisposeProviderRef<Dio>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/controllers/emotional_qa_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'emotional_qa_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$emotionalQAControllerHash() => r'407134d180f5b7446d346125fd0086876212df8c';

/// See also [EmotionalQAController].
@ProviderFor(EmotionalQAController)
final emotionalQAControllerProvider = AutoDisposeAsyncNotifierProvider<EmotionalQAController, void>.internal(
  EmotionalQAController.new,
  name: r'emotionalQAControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$emotionalQAControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$EmotionalQAController = AutoDisposeAsyncNotifier<void>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/repositories/auth_repository.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'auth_repository.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$authRepositoryHash() => r'ff8ccdbef9383aeccd0780f3dabcedd5d7ffbbbf';

/// See also [authRepository].
@ProviderFor(authRepository)
final authRepositoryProvider = AutoDisposeProvider<AuthRepository>.internal(
  authRepository,
  name: r'authRepositoryProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$authRepositoryHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef AuthRepositoryRef = AutoDisposeProviderRef<AuthRepository>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/navigation_history/navigation_history_notifier.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'navigation_history_notifier.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$navigationHistoryNotifierHash() =>
    r'04d775a81b8617db1c686a52882447ce22d9d723';

/// See also [NavigationHistoryNotifier].
@ProviderFor(NavigationHistoryNotifier)
final navigationHistoryNotifierProvider =
    NotifierProvider<NavigationHistoryNotifier, NavigationState>.internal(
  NavigationHistoryNotifier.new,
  name: r'navigationHistoryNotifierProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$navigationHistoryNotifierHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$NavigationHistoryNotifier = Notifier<NavigationState>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/extension/build_context.dart
```dart
import 'package:flutter/material.dart';
import 'package:top_snackbar_flutter/custom_snack_bar.dart';
import 'package:top_snackbar_flutter/top_snack_bar.dart';

extension BuildContextExt on BuildContext {
  ThemeData get theme => Theme.of(this);

  TextTheme get textTheme => theme.textTheme;

  ColorScheme get colorScheme => theme.colorScheme;

  double get screenWidth => MediaQuery.sizeOf(this).width;

  double get screenHeight => MediaQuery.sizeOf(this).height;

  void showTopSnackBarSuccess(String message) {
    showTopSnackBar(
      Overlay.of(this),
      CustomSnackBar.success(message: message),
    );
  }

  void showTopSnackBarInfo(String message) {
    showTopSnackBar(
      Overlay.of(this),
      CustomSnackBar.info(message: message),
    );
  }

  void showTopSnackBarError(String message) {
    showTopSnackBar(
      Overlay.of(this),
      CustomSnackBar.error(message: message),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/repositories/physical_core_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/physical_core_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data/physical_core_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/drag_drop/models/data_sources/physical_core_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'physical_core_repository.g.dart';

@riverpod
PhysicalCoreRepository physicalCoreRepository(Ref ref) {
  final remoteDataSource = ref.watch(physicalCoreRemoteDataSourceProvider);
  return PhysicalCoreRepository(remoteDataSource);
}

class PhysicalCoreRepository {
  PhysicalCoreRepository(this._remoteDataSource);
  final PhysicalCoreRemoteDataSource _remoteDataSource;

  Future<PhysicalCoreResponse> submitPhysicalCore(PhysicalCoreRequest request) {
    return _remoteDataSource.submitPhysicalCore(request);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/create_user_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'create_user_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$CreateUserRequestImpl _$$CreateUserRequestImplFromJson(Map<String, dynamic> json) => _$CreateUserRequestImpl(
      firstName: json['first_name'] as String,
      lastName: json['last_name'] as String,
      password: json['password'] as String,
      userName: json['username'] as String,
      dOB: json['d_o_b'] as String,
      phoneNumber: json['phone_number'] as String,
    );

Map<String, dynamic> _$$CreateUserRequestImplToJson(_$CreateUserRequestImpl instance) => <String, dynamic>{
      'first_name': instance.firstName,
      'last_name': instance.lastName,
      'password': instance.password,
      'username': instance.userName,
      'd_o_b': instance.dOB,
      'phone_number': instance.phoneNumber,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/controllers/physical_core_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'physical_core_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$physicalCoreControllerHash() =>
    r'9265eb9fe6abb87a74904ae878087628df6908f7';

/// See also [PhysicalCoreController].
@ProviderFor(PhysicalCoreController)
final physicalCoreControllerProvider =
    AutoDisposeAsyncNotifierProvider<PhysicalCoreController, void>.internal(
  PhysicalCoreController.new,
  name: r'physicalCoreControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$physicalCoreControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$PhysicalCoreController = AutoDisposeAsyncNotifier<void>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/mock_config/config.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'config.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$mockModeNotifierHash() => r'ad2aa0b7e2c919c9d4501b934b1fe73651884223';

/// See also [MockModeNotifier].
@ProviderFor(MockModeNotifier)
final mockModeNotifierProvider =
    AutoDisposeNotifierProvider<MockModeNotifier, bool>.internal(
  MockModeNotifier.new,
  name: r'mockModeNotifierProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$mockModeNotifierHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$MockModeNotifier = AutoDisposeNotifier<bool>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/models/repositories/fav_colour_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/models/data/fav_colour_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/models/data_sources/fav_colour_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'fav_colour_repository.g.dart';

@riverpod
FavColourRepository favColourRepository(Ref ref) {
  final remoteDataSource = ref.watch(favColourRemoteDataSourceProvider);
  return FavColourRepository(remoteDataSource);
}

class FavColourRepository {
  FavColourRepository(this._remoteDataSource);
  final FavColourRemoteDataSource _remoteDataSource;

  /// Saves the user's favourite colour by delegating the request to the remote data source
  Future<FavColourResponse> saveFavouriteColour(String colourName) async {
    return await _remoteDataSource.saveFavouriteColour(colourName);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/controllers/create_user_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'create_user_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$createUserControllerHash() => r'991d1210e33c561042b9d8454360f7ca06ddcda7';

/// See also [CreateUserController].
@ProviderFor(CreateUserController)
final createUserControllerProvider = NotifierProvider<CreateUserController, CreateUserState>.internal(
  CreateUserController.new,
  name: r'createUserControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$createUserControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$CreateUserController = Notifier<CreateUserState>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/views/ui_states/question_content.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'question_content.freezed.dart';
part 'question_content.g.dart';

@freezed
class QuestionContent with _$QuestionContent {
  const factory QuestionContent({
    required String title,
    required String subtitle,
  }) = _QuestionContent;

  factory QuestionContent.fromJson(Map<String, dynamic> json) => _$QuestionContentFromJson(json);
}

const questionList = [
  QuestionContent(
    title: 'My social flow starts here',
    subtitle: 'First, your beauty & wellness journey. Then, swipe to define how you show up & what you need.',
  ),
  QuestionContent(
    title: 'Expressing the Real Me',
    subtitle: 'Now, let’s explore how you show up and move through the world.',
  ),
  QuestionContent(
    title: 'I need my people to...',
    subtitle: 'What do you need from your people to feel seen and supported?',
  ),
];

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/navigation_history/current_route_notifier.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'current_route_notifier.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$currentRouteNotifierHash() =>
    r'862eaf466518f705c3984a165f51526be9d21276';

/// See also [CurrentRouteNotifier].
@ProviderFor(CurrentRouteNotifier)
final currentRouteNotifierProvider =
    NotifierProvider<CurrentRouteNotifier, String>.internal(
  CurrentRouteNotifier.new,
  name: r'currentRouteNotifierProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$currentRouteNotifierHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$CurrentRouteNotifier = Notifier<String>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/controllers/bio_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bio_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$bioControllerHash() => r'50a3fd76eb9d56670d2111f532db2eea9c4b0f7e';

/// See also [BioController].
@ProviderFor(BioController)
final bioControllerProvider =
    AsyncNotifierProvider<BioController, BioState>.internal(
  BioController.new,
  name: r'bioControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product')
      ? null
      : _$bioControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$BioController = AsyncNotifier<BioState>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/models/data/role_based_qa_response.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'role_based_qa_response.freezed.dart';
part 'role_based_qa_response.g.dart';

@freezed
class RoleBasedQAResponse with _$RoleBasedQAResponse {
  const factory RoleBasedQAResponse({
    required int status,
    required String archetype,
    @Default(IListConst([])) IList<Insight> insights,
  }) = _RoleBasedQAResponse;

  factory RoleBasedQAResponse.fromJson(Map<String, dynamic> json) =>
      _$RoleBasedQAResponseFromJson(json);
}

@freezed
class Insight with _$Insight {
  const factory Insight({
    required String type,
    required String text,
    required bool check,
    required String connector,
  }) = _Insight;

  factory Insight.fromJson(Map<String, dynamic> json) => _$InsightFromJson(json);
  const Insight._();
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/router.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'router.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$routerHash() => r'77ad1150f664057d65b727a7d9da78ea0156c10d';

/// See also [router].
@ProviderFor(router)
final routerProvider = Provider<GoRouter>.internal(
  router,
  name: r'routerProvider',
  debugGetCreateSourceHash:
      const bool.fromEnvironment('dart.vm.product') ? null : _$routerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
typedef RouterRef = ProviderRef<GoRouter>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/extension/ilist.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

extension IListExt<T> on IList<T> {
  @useResult
  IList<T> swap(int index1, int index2) {
    if (index1 < 0 || index1 >= length) {
      throw RangeError.range(index1, 0, length - 1, 'index1', 'Index out of range');
    }
    if (index2 < 0 || index2 >= length) {
      throw RangeError.range(index2, 0, length - 1, 'index2', 'Index out of range');
    }

    if (index1 == index2) return this;

    final list = toList();
    final temp = list[index1];
    list[index1] = list[index2];
    list[index2] = temp;

    return list.lock;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/widgets/name_and_username.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/auth/controllers/auth_controller.dart';

class NameAndUsername extends HookConsumerWidget {
  const NameAndUsername({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final curUser = ref.watch(authControllerProvider).valueOrNull;
    return // Name and handle
        Column(
      children: [
        Text(
          curUser?.fullName ?? 'Lena Sommer',
          style: TextStyle(fontSize: 18.sp, fontWeight: FontWeight.w600, color: Colors.white),
        ),
        Text(
          '@${curUser?.userName ?? 'peachbaby'}',
          style: TextStyle(fontSize: 14.sp, color: Colors.white70),
        ),
      ],
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/controllers/avatar_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'avatar_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$avatarControllerHash() => r'f162bc04fca7eee59feb64a67908db9a05a0d86f';

/// See also [AvatarController].
@ProviderFor(AvatarController)
final avatarControllerProvider = AutoDisposeNotifierProvider<AvatarController, AvatarState>.internal(
  AvatarController.new,
  name: r'avatarControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$avatarControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$AvatarController = AutoDisposeNotifier<AvatarState>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/controllers/cur_colour.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'cur_colour.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$curColourHash() => r'f7cb6369300e6de44130963aede9e4331cc908c2';

/// See also [CurColour].
@ProviderFor(CurColour)
final curColourProvider = NotifierProvider<CurColour, ColourOption>.internal(
  CurColour.new,
  name: r'curColourProvider',
  debugGetCreateSourceHash:
      const bool.fromEnvironment('dart.vm.product') ? null : _$curColourHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$CurColour = Notifier<ColourOption>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/splash_screen.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:go_router/go_router.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/core/constants/assets.dart';
import 'package:peer_circle_app/core/mock_config/config.dart';

class SplashScreen extends HookConsumerWidget {
  const SplashScreen({super.key});

  const SplashScreen.fromRoute(BuildContext _, GoRouterState __) : this();

  static const routeName = 'splash';

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      body: Center(
        child: GestureDetector(
          child: Image.asset(fullLogo, width: 200.r, height: 200.r),
          onLongPress: () {
            ref.read(mockModeNotifierProvider.notifier).toggle();
          },
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/controllers/auth_controller.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'auth_controller.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$authControllerHash() => r'bdb207928c042104fdfeb36992193a7ffc56c31e';

/// See also [AuthController].
@ProviderFor(AuthController)
final authControllerProvider = AutoDisposeAsyncNotifierProvider<AuthController, User?>.internal(
  AuthController.new,
  name: r'authControllerProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$authControllerHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$AuthController = AutoDisposeAsyncNotifier<User?>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/views/widgets/password_validation_indicator_row.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/extension/build_context.dart';

class PasswordValidationIndicatorRow extends StatelessWidget {
  const PasswordValidationIndicatorRow({
    super.key,
    required this.text,
    required this.isValid,
  });
  final String text;
  final bool isValid;

  @override
  Widget build(BuildContext context) {
    final color = isValid ? context.colorScheme.primaryContainer : context.colorScheme.surfaceBright;
    return Row(
      children: [
        Icon(
          Icons.check_circle,
          color: color,
          size: 20.sp,
        ),
        SizedBox(width: 8.w),
        Text(
          text,
          style: TextStyle(
            fontSize: 14.sp,
            fontWeight: FontWeight.w500,
            color: color,
          ),
        ),
      ],
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/controllers/current_avatar.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'current_avatar.dart';

// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$currentAvatarHash() => r'b72a5935da71fea2a8507932ebfd320de8892d06';

/// See also [CurrentAvatar].
@ProviderFor(CurrentAvatar)
final currentAvatarProvider = NotifierProvider<CurrentAvatar, XFile?>.internal(
  CurrentAvatar.new,
  name: r'currentAvatarProvider',
  debugGetCreateSourceHash: const bool.fromEnvironment('dart.vm.product') ? null : _$currentAvatarHash,
  dependencies: null,
  allTransitiveDependencies: null,
);

typedef _$CurrentAvatar = Notifier<XFile?>;
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/repositories/bio_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_request.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data_sources/bio_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'bio_repository.g.dart';

@riverpod
BioRepository bioRepository(Ref ref) {
  final remoteDataSource = ref.watch(bioRemoteDataSourceProvider);
  return BioRepository(remoteDataSource);
}

class BioRepository {
  BioRepository(this._remoteDataSource);
  final BioRemoteDataSource _remoteDataSource;

  Future<BioResponse> submitBio(BioRequest request) {
    return _remoteDataSource.submitBio(request);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/debug_log/logger.dart
```dart
import 'package:talker_flutter/talker_flutter.dart';

final Talker talker = TalkerFlutter.init(
  logger: TalkerLogger(
    formatter: const ColoredLoggerFormatter(),
    settings: TalkerLoggerSettings(),
  ),
  settings: TalkerSettings(
    titles: {
      TalkerLogType.exception.name: 'E',
      TalkerLogType.error.name: 'E',
      TalkerLogType.critical.name: 'C',
      TalkerLogType.info.name: 'i',
      TalkerLogType.debug.name: 'D',
      TalkerLogType.verbose.name: 'V',
      TalkerLogType.warning.name: 'W',
    },
  ),
);
// final TalkerScreenTheme talkerTheme = TalkerScreenTheme(
//   backgroundColor: flexTheme.colorScheme.surface,
//   textColor: flexTheme.colorScheme.onSurface,
//   cardColor: flexTheme.colorScheme.surface,
// );

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/views/ui_states/bio_state.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bio_state.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$BioStateImpl _$$BioStateImplFromJson(Map<String, dynamic> json) =>
    _$BioStateImpl(
      bio: json['bio'] as String?,
      archetype: json['archetype'] as String?,
      insights: json['insights'] == null
          ? const IListConst([])
          : IList<Insight>.fromJson(json['insights'],
              (value) => Insight.fromJson(value as Map<String, dynamic>)),
    );

Map<String, dynamic> _$$BioStateImplToJson(_$BioStateImpl instance) =>
    <String, dynamic>{
      'bio': instance.bio,
      'archetype': instance.archetype,
      'insights': instance.insights.toJson(
        (value) => value,
      ),
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/app_style/sizes.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

const String notEmptyError = 'This field cannot be empty.';
const String fieldNotValidError = 'This field is not valid.';
int profileScreenGridcount = 2;

Color darken(Color color, [double amount = .1]) {
  assert(amount >= 0 && amount <= 1);
  final hsl = HSLColor.fromColor(color);
  final hslDark = hsl.withLightness((hsl.lightness - amount).clamp(0.0, 1.0));
  return hslDark.toColor();
}

EdgeInsets kDefaultScaffoldPadding() => EdgeInsets.symmetric(horizontal: kDefaultHorizontalPadding.w, vertical: kDefaultVerticalPadding.h);
const kDefaultHorizontalPadding = 16.0;
const kDefaultVerticalPadding = 18.0;

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'core_insights_feedback_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$CoreInsightsFeedbackRequestImpl _$$CoreInsightsFeedbackRequestImplFromJson(Map<String, dynamic> json) => _$CoreInsightsFeedbackRequestImpl(
      userId: (json['user_id'] as num).toInt(),
      definedPrimary: json['defined_primary'] as String,
      definedSecondary: json['defined_secondary'] as String,
      validationPrimary: json['validation_primary'] as String,
    );

Map<String, dynamic> _$$CoreInsightsFeedbackRequestImplToJson(_$CoreInsightsFeedbackRequestImpl instance) => <String, dynamic>{
      'user_id': instance.userId,
      'defined_primary': instance.definedPrimary,
      'defined_secondary': instance.definedSecondary,
      'validation_primary': instance.validationPrimary,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/login_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'login_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$LoginResponseImpl _$$LoginResponseImplFromJson(Map<String, dynamic> json) => _$LoginResponseImpl(
      success: json['success'] as bool,
      userId: (json['user_id'] as num).toInt(),
      status: (json['status'] as num).toInt(),
      firstname: json['firstname'] as String,
      lastname: json['lastname'] as String,
    );

Map<String, dynamic> _$$LoginResponseImplToJson(_$LoginResponseImpl instance) => <String, dynamic>{
      'success': instance.success,
      'user_id': instance.userId,
      'status': instance.status,
      'firstname': instance.firstname,
      'lastname': instance.lastname,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/create_user_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'create_user_request.g.dart';
part 'create_user_request.freezed.dart';

@freezed
class CreateUserRequest with _$CreateUserRequest {
  const factory CreateUserRequest({
    @JsonKey(name: 'first_name') required String firstName,
    @JsonKey(name: 'last_name') required String lastName,
    @JsonKey(name: 'password') required String password,
    @JsonKey(name: 'username') required String userName,
    @JsonKey(name: 'd_o_b') required String dOB,
    @JsonKey(name: 'phone_number') required String phoneNumber,
  }) = _CreateUserRequest;
  factory CreateUserRequest.fromJson(Map<String, dynamic> json) => _$CreateUserRequestFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'emotional_qa_request.freezed.dart';
part 'emotional_qa_request.g.dart';

@freezed
class EmotionalQARequest with _$EmotionalQARequest {
  const factory EmotionalQARequest({
    @JsonKey(name: 'user_id') required int userId,
    required List<QAEntry> qa,
  }) = _EmotionalQARequest;

  factory EmotionalQARequest.fromJson(Map<String, dynamic> json) => _$EmotionalQARequestFromJson(json);
}

@freezed
class QAEntry with _$QAEntry {
  const factory QAEntry({
    required int question,
    required int answer,
  }) = _QAEntry;

  factory QAEntry.fromJson(Map<String, dynamic> json) => _$QAEntryFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/models/repositories/avatar_repository.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:peer_circle_app/features/multifaceted_profile/avatar/models/data_sources/avatar_remote_data_source.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'avatar_repository.g.dart';

@riverpod
AvatarRepository avatarRepository(Ref ref) {
  final remoteDataSource = ref.watch(avatarRemoteDataSourceProvider);
  return AvatarRepository(remoteDataSource);
}

class AvatarRepository {
  AvatarRepository(this._remoteDataSource);
  final AvatarRemoteDataSource _remoteDataSource;

  /// Upload avatar by delegating the request to the remote data source
  Future<void> uploadAvatar(XFile file) async {
    await _remoteDataSource.uploadAvatar(file);
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/make_up/views/widgets/sheet_button.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class SheetButton extends StatelessWidget {
  const SheetButton(
    this.label, {
    super.key,
    required this.onTap,
  });

  final String label;
  final Function() onTap;
  @override
  Widget build(BuildContext context) {
    return OutlinedButton(
      onPressed: onTap,
      style: OutlinedButton.styleFrom(
        side: const BorderSide(color: Colors.white),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30.r)),
        padding: EdgeInsets.symmetric(vertical: 14.h),
      ),
      child: Text(
        label,
        style: TextStyle(fontSize: 16.sp, color: Colors.white),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/views/ui_states/avatar_state.dart
```dart
// lib/features/avatar/controllers/avatar_state.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:image_picker/image_picker.dart';

part 'avatar_state.freezed.dart';

@freezed
class AvatarState with _$AvatarState {
  // pickedFile is null initially (no image chosen).
  // uploadState is AsyncValue.data(null) by default (meaning “no upload in progress; no error”).
  const factory AvatarState({
    /// Currently picked image (for local preview).
    XFile? pickedFile,

    /// The async state for the upload request.
    @Default(AsyncValue<void>.data(null)) AsyncValue<void> uploadState,
  }) = _AvatarState;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/user.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'user.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$UserImpl _$$UserImplFromJson(Map<String, dynamic> json) => _$UserImpl(
      id: (json['id'] as num).toInt(),
      userName: json['userName'] as String,
      firstName: json['firstName'] as String,
      lastName: json['lastName'] as String,
    );

Map<String, dynamic> _$$UserImplToJson(_$UserImpl instance) => <String, dynamic>{
      'id': instance.id,
      'userName': instance.userName,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/models/data/avatar_request.dart
```dart
import 'package:dio/dio.dart';
import 'package:image_picker/image_picker.dart';

/// Wraps the user ID and file to be uploaded as FormData
class AvatarRequest {
  AvatarRequest({
    required this.userId,
    required this.file,
  });
  final int userId;
  final XFile file;

  /// Builds the FormData for the POST /avatar/ endpoint
  Future<FormData> toFormData() async {
    // Convert XFile to a MultipartFile
    final multipartAvatar = MultipartFile.fromBytes(
      await file.readAsBytes(),
      filename: file.path.split('/').last,
    );
    return FormData.fromMap({
      'avatar': multipartAvatar,
      'user_id': userId,
    });
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/controllers/cur_colour.dart
```dart
import 'package:flutter/material.dart';
import 'package:peer_circle_app/core/mock_config/config.dart';
import 'package:peer_circle_app/features/multifaceted_profile/fav_colour/controllers/fav_colour_controller.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'cur_colour.g.dart';

@Riverpod(keepAlive: true)
class CurColour extends _$CurColour {
  @override
  ColourOption build() {
    if (ref.read(mockModeNotifierProvider)) {
      return colourOptions.first;
    }
    return ColourOption(name: 'Init', colourHex: '0x00FFFFFF', textColour: Colors.white);
  }

  void updateSelectedColour(ColourOption colourOption) {
    state = colourOption;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'core_insights_feedback_request.freezed.dart';
part 'core_insights_feedback_request.g.dart';

@freezed
class CoreInsightsFeedbackRequest with _$CoreInsightsFeedbackRequest {
  const factory CoreInsightsFeedbackRequest({
    @JsonKey(name: 'user_id') required int userId,
    @JsonKey(name: 'defined_primary') required String definedPrimary,
    @JsonKey(name: 'defined_secondary') required String definedSecondary,
    @JsonKey(name: 'validation_primary') required String validationPrimary,
  }) = _CoreInsightsFeedbackRequest;

  factory CoreInsightsFeedbackRequest.fromJson(Map<String, dynamic> json) => _$CoreInsightsFeedbackRequestFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data_sources/auth_data_source.dart
```dart
import 'package:peer_circle_app/features/auth/models/data/create_user_request.dart';
import 'package:peer_circle_app/features/auth/models/data/create_user_response.dart';
import 'package:peer_circle_app/features/auth/models/data/login_request.dart';
import 'package:peer_circle_app/features/auth/models/data/login_response.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_request.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_response.dart';

abstract class AuthDataSource {
  Future<CreateUserResponse> createUser(CreateUserRequest request);
  Future<void> signOut();
  Future<LoginResponse> login(LoginRequest request);
  Future<VerifyCodeResponse> verifyCode(VerifyCodeRequest request);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/clear_icon.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:peer_circle_app/core/app_style/color_constants.dart';

class ClearIcon extends StatelessWidget {
  const ClearIcon({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 24.h,
      width: 24.w,
      decoration: const BoxDecoration(
        shape: BoxShape.circle,
        color: scaffoldBackgroundColor,
      ),
      padding: EdgeInsets.all(6.r),
      child: const FittedBox(
        child: Icon(
          Icons.clear,
          color: whiteColor,
        ),
      ),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/views/ui_states/fav_colour_state.dart
```dart
// lib/features/fav_colour/controllers/fav_colour_state.dart

import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

part 'fav_colour_state.freezed.dart';

@freezed
class FavColourState with _$FavColourState {
  /// By default, no colour is chosen, and [uploadState] is idle.
  const factory FavColourState({
    String? pickedColourHex,
    Color? textColour, // Text colour for readability
    @Default(AsyncValue<void>.data(null)) AsyncValue<void> uploadState,
  }) = _FavColourState;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/views/ui_states/bio_state.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:peer_circle_app/features/multifaceted_profile/bio/models/data/bio_response.dart';

part 'bio_state.freezed.dart';
part 'bio_state.g.dart';

@freezed
class BioState with _$BioState {
  const factory BioState({
    String? bio,
    String? archetype,
    @Default(IListConst([])) IList<Insight> insights,
  }) = _BioState;

  factory BioState.fromJson(Map<String, dynamic> json) => _$BioStateFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/create_user_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'create_user_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$CreateUserResponseImpl _$$CreateUserResponseImplFromJson(Map<String, dynamic> json) => _$CreateUserResponseImpl(
      userId: (json['user'] as num).toInt(),
      status: (json['status'] as num).toInt(),
    );

Map<String, dynamic> _$$CreateUserResponseImplToJson(_$CreateUserResponseImpl instance) => <String, dynamic>{
      'user': instance.userId,
      'status': instance.status,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/verify_code_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'verify_code_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$VerifyCodeRequestImpl _$$VerifyCodeRequestImplFromJson(Map<String, dynamic> json) => _$VerifyCodeRequestImpl(
      userId: (json['user_id'] as num).toInt(),
      code: json['code'] as String,
    );

Map<String, dynamic> _$$VerifyCodeRequestImplToJson(_$VerifyCodeRequestImpl instance) => <String, dynamic>{
      'user_id': instance.userId,
      'code': instance.code,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/verify_code_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'verify_code_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$VerifyCodeResponseImpl _$$VerifyCodeResponseImplFromJson(Map<String, dynamic> json) => _$VerifyCodeResponseImpl(
      success: json['success'] as bool,
      status: (json['status'] as num).toInt(),
    );

Map<String, dynamic> _$$VerifyCodeResponseImplToJson(_$VerifyCodeResponseImpl instance) => <String, dynamic>{
      'success': instance.success,
      'status': instance.status,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data/bio_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bio_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$BioRequestImpl _$$BioRequestImplFromJson(Map<String, dynamic> json) => _$BioRequestImpl(
      userId: (json['user_id'] as num).toInt(),
      bio: json['bio'] as String,
    );

Map<String, dynamic> _$$BioRequestImplToJson(_$BioRequestImpl instance) => <String, dynamic>{
      'user_id': instance.userId,
      'bio': instance.bio,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/router/navigation_history/navigation_state.dart
```dart
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'navigation_state.freezed.dart';

@freezed
class NavigationState with _$NavigationState {
  const factory NavigationState({
    @Default(IListConst([])) IList<String> history,
    @Default(IListConst([])) IList<String> popped,
  }) = _NavigationState;

  const NavigationState._();

  bool get canGoForward => popped.isNotEmpty;
  bool get canGoBack => history.length > 1;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/error_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'error_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$ErrorResponseImpl _$$ErrorResponseImplFromJson(Map<String, dynamic> json) => _$ErrorResponseImpl(
      error: json['error'] as String,
      status: (json['status'] as num).toInt(),
    );

Map<String, dynamic> _$$ErrorResponseImplToJson(_$ErrorResponseImpl instance) => <String, dynamic>{
      'error': instance.error,
      'status': instance.status,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/login_request.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'login_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$LoginRequestImpl _$$LoginRequestImplFromJson(Map<String, dynamic> json) => _$LoginRequestImpl(
      username: json['username'] as String,
      password: json['password'] as String,
    );

Map<String, dynamic> _$$LoginRequestImplToJson(_$LoginRequestImpl instance) => <String, dynamic>{
      'username': instance.username,
      'password': instance.password,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data/category_item.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'category_item.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$CategoryItemImpl _$$CategoryItemImplFromJson(Map<String, dynamic> json) => _$CategoryItemImpl(
      label: json['label'] as String,
      visible: json['visible'] as bool,
    );

Map<String, dynamic> _$$CategoryItemImplToJson(_$CategoryItemImpl instance) => <String, dynamic>{
      'label': instance.label,
      'visible': instance.visible,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_response.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'core_insights_feedback_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$CoreInsightsFeedbackResponseImpl _$$CoreInsightsFeedbackResponseImplFromJson(Map<String, dynamic> json) => _$CoreInsightsFeedbackResponseImpl(
      status: (json['status'] as num).toInt(),
    );

Map<String, dynamic> _$$CoreInsightsFeedbackResponseImplToJson(_$CoreInsightsFeedbackResponseImpl instance) => <String, dynamic>{
      'status': instance.status,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/role_based_identity/views/ui_states/question_content.g.dart
```dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'question_content.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$QuestionContentImpl _$$QuestionContentImplFromJson(Map<String, dynamic> json) => _$QuestionContentImpl(
      title: json['title'] as String,
      subtitle: json['subtitle'] as String,
    );

Map<String, dynamic> _$$QuestionContentImplToJson(_$QuestionContentImpl instance) => <String, dynamic>{
      'title': instance.title,
      'subtitle': instance.subtitle,
    };

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/gen/fonts.gen.dart
```dart
/// GENERATED CODE - DO NOT MODIFY BY HAND
/// *****************************************************
///  FlutterGen
/// *****************************************************

// coverage:ignore-file
// ignore_for_file: type=lint
// ignore_for_file: directives_ordering,unnecessary_import,implicit_dynamic_list_literal,deprecated_member_use

class FontFamily {
  FontFamily._();

  /// Font family: Roderick
  static const String roderick = 'Roderick';

  /// Font family: SF Pro
  static const String sFPro = 'SF Pro';
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/controllers/verify_code_controller.dart
```dart
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:peer_circle_app/features/auth/models/data/verify_code_request.dart';
import 'package:peer_circle_app/features/auth/models/repositories/auth_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'verify_code_controller.g.dart';

@riverpod
Future<bool> verifyCode(Ref ref, VerifyCodeRequest request) async {
  final response = await ref.read(authRepositoryProvider).verifyCode(request);
  return response.success;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/login_response.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';
part 'login_response.g.dart';

part 'login_response.freezed.dart';

@freezed
class LoginResponse with _$LoginResponse {
  const factory LoginResponse({
    required bool success,
    @JsonKey(name: 'user_id') required int userId,
    required int status,
    required String firstname,
    required String lastname,
  }) = _LoginResponse;

  factory LoginResponse.fromJson(Map<String, dynamic> json) => _$LoginResponseFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/user.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'user.freezed.dart';
part 'user.g.dart';

@freezed
class User with _$User {
  const factory User({
    required int id,
    required String userName,
    required String firstName,
    required String lastName,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  const User._();

  String get fullName => '$firstName $lastName';
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/create_user_response.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'create_user_response.freezed.dart';
part 'create_user_response.g.dart';

@freezed
class CreateUserResponse with _$CreateUserResponse {
  const factory CreateUserResponse({
    @JsonKey(name: 'user') required int userId,
    required int status,
  }) = _CreateUserResponse;

  factory CreateUserResponse.fromJson(Map<String, dynamic> json) => _$CreateUserResponseFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/verify_code_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'verify_code_request.freezed.dart';
part 'verify_code_request.g.dart';

@freezed
class VerifyCodeRequest with _$VerifyCodeRequest {
  factory VerifyCodeRequest({
    @JsonKey(name: 'user_id') required int userId,
    required String code,
  }) = _VerifyCodeRequest;

  factory VerifyCodeRequest.fromJson(Map<String, dynamic> json) => _$VerifyCodeRequestFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/custom_textbutton.dart
```dart
import 'package:flutter/material.dart';

class CustomTextButton extends StatelessWidget {
  const CustomTextButton({
    super.key,
    required this.text,
    required this.onTap,
    required this.style,
  });
  final String text;
  final VoidCallback onTap;
  final TextStyle style;

  @override
  Widget build(BuildContext context) {
    return TextButton(
      onPressed: onTap,
      child: Text(text, style: style),
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/flavors.dart
```dart
enum Flavor {
  dev,
  staging,
  prod,
}

class F {
  static Flavor? appFlavor;

  static String get name => appFlavor?.name ?? '';

  static String get title {
    switch (appFlavor) {
      case Flavor.dev:
        return 'PeerCircle DEV';
      case Flavor.staging:
        return 'PeerCircle STAGING';
      case Flavor.prod:
        return 'PeerCircle';
      default:
        return 'title';
    }
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/profile_completion/models/data/core_insights_feedback_response.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'core_insights_feedback_response.freezed.dart';
part 'core_insights_feedback_response.g.dart';

@freezed
class CoreInsightsFeedbackResponse with _$CoreInsightsFeedbackResponse {
  const factory CoreInsightsFeedbackResponse({
    required int status,
  }) = _CoreInsightsFeedbackResponse;

  factory CoreInsightsFeedbackResponse.fromJson(Map<String, dynamic> json) => _$CoreInsightsFeedbackResponseFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/bio/models/data/bio_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'bio_request.freezed.dart';
part 'bio_request.g.dart';

@freezed
class BioRequest with _$BioRequest {
  const factory BioRequest({
    @JsonKey(name: 'user_id') required int userId,
    required String bio,
  }) = _BioRequest;

  factory BioRequest.fromJson(Map<String, dynamic> json) => _$BioRequestFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/controllers/current_avatar.dart
```dart
import 'package:image_picker/image_picker.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'current_avatar.g.dart';

@Riverpod(keepAlive: true)
class CurrentAvatar extends _$CurrentAvatar {
  @override
  XFile? build() {
    return null;
  }

  void updateAvatar(XFile file) {
    state = file;
  }

  void clearAvatar() {
    state = null;
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/verify_code_response.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'verify_code_response.freezed.dart';
part 'verify_code_response.g.dart';

@freezed
class VerifyCodeResponse with _$VerifyCodeResponse {
  factory VerifyCodeResponse({
    required bool success,
    required int status,
  }) = _VerifyCodeResponse;

  factory VerifyCodeResponse.fromJson(Map<String, dynamic> json) => _$VerifyCodeResponseFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/models/data/fav_colour_request.dart
```dart
class FavColourRequest {
  FavColourRequest({
    required this.userId,
    required this.favColourName,
  });
  final int userId;
  final String favColourName;

  /// Converts this request to JSON. If your backend expects a JSON body:
  Map<String, dynamic> toJson() {
    return {
      'user_id': userId,
      'fav_colour': favColourName,
    };
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/error_response.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'error_response.freezed.dart';
part 'error_response.g.dart';

@freezed
class ErrorResponse with _$ErrorResponse implements Exception {
  const factory ErrorResponse({
    required String error,
    required int status,
  }) = _ErrorResponse;

  factory ErrorResponse.fromJson(Map<String, dynamic> json) => _$ErrorResponseFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/auth/models/data/login_request.dart
```dart
import 'package:freezed_annotation/freezed_annotation.dart';

part 'login_request.freezed.dart';
part 'login_request.g.dart';

@freezed
class LoginRequest with _$LoginRequest {
  factory LoginRequest({
    required String username,
    required String password,
  }) = _LoginRequest;

  factory LoginRequest.fromJson(Map<String, dynamic> json) => _$LoginRequestFromJson(json);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/extension/completer.dart
```dart
import 'dart:async';

// ignore: always_specify_types
extension CompleterExt on Completer {
  void safeComplete([dynamic value]) {
    if (!isCompleted) {
      complete(value);
    }
  }

  void safeCompleteError(Object error, [StackTrace? stackTrace]) {
    if (!isCompleted) {
      completeError(error, stackTrace);
    }
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/functions/rebuild_all.dart
```dart
import 'package:flutter/cupertino.dart';

// Careful when using this. Main purpose of this is to rebuild views when device change from Device Preview
void rebuildAllChildren(BuildContext context) {
  void rebuild(Element el) {
    el.markNeedsBuild();
    el.visitChildren(rebuild);
  }

  (context as Element).visitChildren(rebuild);
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/avatar/models/data/avatar_response.dart
```dart
/// Represents a typical response from POST /avatar/
class AvatarResponse {
  // e.g. 200

  AvatarResponse({
    required this.status,
  });

  factory AvatarResponse.fromJson(Map<String, dynamic> json) {
    return AvatarResponse(
      status: json['status'] as int,
    );
  }
  final int status;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/extension/double.dart
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

extension SizeBox on int {
  SizedBox get sizedBoxH => SizedBox(
        height: h,
      );
  SizedBox get sizedBoxW => SizedBox(
        width: w,
      );
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/functions/date_formatters.dart
```dart
import 'package:intl/intl.dart';

//format the date in this format

String formatDate(String selectedDate) {
  final date = DateTime.parse(selectedDate);
  final formatter = DateFormat('yyyy-MM-dd');
  final formatted = formatter.format(date);
  return formatted;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/main_staging.dart
```dart
import 'package:flutter/material.dart'; // ignore: unused_import
import 'package:peer_circle_app/flavors.dart';
import 'package:peer_circle_app/main.dart' as runner;

Future<void> main() async {
  F.appFlavor = Flavor.staging;
  await runner.main();
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/main_dev.dart
```dart
import 'package:flutter/material.dart'; // ignore: unused_import
import 'package:peer_circle_app/flavors.dart';
import 'package:peer_circle_app/main.dart' as runner;

Future<void> main() async {
  F.appFlavor = Flavor.dev;
  await runner.main();
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/main_prod.dart
```dart
import 'package:flutter/material.dart'; // ignore: unused_import
import 'package:peer_circle_app/flavors.dart';
import 'package:peer_circle_app/main.dart' as runner;

Future<void> main() async {
  F.appFlavor = Flavor.prod;
  await runner.main();
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/common_widgets/height_space.dart
```dart
import 'package:flutter/material.dart';

class HeightSpace extends StatelessWidget {
  const HeightSpace(this.height, {super.key});
  final double height;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: height,
    );
  }
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/drag_drop/models/data/physical_core_response.dart
```dart
class PhysicalCoreResponse {
  PhysicalCoreResponse({required this.status});

  factory PhysicalCoreResponse.fromJson(Map<String, dynamic> json) {
    return PhysicalCoreResponse(
      status: json['status'] as int,
    );
  }

  final int status;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/emotion_qa/models/data/emotional_qa_response.dart
```dart
class EmotionalQAResponse {
  EmotionalQAResponse({required this.status});

  factory EmotionalQAResponse.fromJson(Map<String, dynamic> json) {
    return EmotionalQAResponse(
      status: json['status'] as int,
    );
  }
  final int status;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/features/multifaceted_profile/fav_colour/models/data/fav_colour_response.dart
```dart
class FavColourResponse {
  FavColourResponse({required this.status});

  factory FavColourResponse.fromJson(Map<String, dynamic> json) {
    return FavColourResponse(
      status: json['status'] as int,
    );
  }
  final int status;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/exception/auth_exception.dart
```dart
class AuthException implements Exception {
  AuthException(this.message);
  final String message;

  @override
  String toString() => message;
}

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/api/constants.dart
```dart
const baseUrl = 'http://10.20.0.76';

```

File: C:/Development/PeerCircle/PeerCircleApp/lib/core/constants/constants.dart
```dart
const kOnboardingTotalSteps = 8;

```

</file_contents>
